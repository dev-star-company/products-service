// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasproductreference"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasProductReferenceDelete is the builder for deleting a ProductHasProductReference entity.
type ProductHasProductReferenceDelete struct {
	config
	hooks    []Hook
	mutation *ProductHasProductReferenceMutation
}

// Where appends a list predicates to the ProductHasProductReferenceDelete builder.
func (phprd *ProductHasProductReferenceDelete) Where(ps ...predicate.ProductHasProductReference) *ProductHasProductReferenceDelete {
	phprd.mutation.Where(ps...)
	return phprd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (phprd *ProductHasProductReferenceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, phprd.sqlExec, phprd.mutation, phprd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (phprd *ProductHasProductReferenceDelete) ExecX(ctx context.Context) int {
	n, err := phprd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (phprd *ProductHasProductReferenceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(producthasproductreference.Table, sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt))
	if ps := phprd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, phprd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	phprd.mutation.done = true
	return affected, err
}

// ProductHasProductReferenceDeleteOne is the builder for deleting a single ProductHasProductReference entity.
type ProductHasProductReferenceDeleteOne struct {
	phprd *ProductHasProductReferenceDelete
}

// Where appends a list predicates to the ProductHasProductReferenceDelete builder.
func (phprdo *ProductHasProductReferenceDeleteOne) Where(ps ...predicate.ProductHasProductReference) *ProductHasProductReferenceDeleteOne {
	phprdo.phprd.mutation.Where(ps...)
	return phprdo
}

// Exec executes the deletion query.
func (phprdo *ProductHasProductReferenceDeleteOne) Exec(ctx context.Context) error {
	n, err := phprdo.phprd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{producthasproductreference.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (phprdo *ProductHasProductReferenceDeleteOne) ExecX(ctx context.Context) {
	if err := phprdo.Exec(ctx); err != nil {
		panic(err)
	}
}
