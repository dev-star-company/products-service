// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionHasProductCreate is the builder for creating a PromotionHasProduct entity.
type PromotionHasProductCreate struct {
	config
	mutation *PromotionHasProductMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (phpc *PromotionHasProductCreate) SetCreatedAt(t time.Time) *PromotionHasProductCreate {
	phpc.mutation.SetCreatedAt(t)
	return phpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phpc *PromotionHasProductCreate) SetNillableCreatedAt(t *time.Time) *PromotionHasProductCreate {
	if t != nil {
		phpc.SetCreatedAt(*t)
	}
	return phpc
}

// SetDeletedAt sets the "deleted_at" field.
func (phpc *PromotionHasProductCreate) SetDeletedAt(t time.Time) *PromotionHasProductCreate {
	phpc.mutation.SetDeletedAt(t)
	return phpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phpc *PromotionHasProductCreate) SetNillableDeletedAt(t *time.Time) *PromotionHasProductCreate {
	if t != nil {
		phpc.SetDeletedAt(*t)
	}
	return phpc
}

// SetProductsID sets the "products_id" field.
func (phpc *PromotionHasProductCreate) SetProductsID(i int) *PromotionHasProductCreate {
	phpc.mutation.SetProductsID(i)
	return phpc
}

// SetNillableProductsID sets the "products_id" field if the given value is not nil.
func (phpc *PromotionHasProductCreate) SetNillableProductsID(i *int) *PromotionHasProductCreate {
	if i != nil {
		phpc.SetProductsID(*i)
	}
	return phpc
}

// SetPromotionsID sets the "promotions_id" field.
func (phpc *PromotionHasProductCreate) SetPromotionsID(i int) *PromotionHasProductCreate {
	phpc.mutation.SetPromotionsID(i)
	return phpc
}

// SetNillablePromotionsID sets the "promotions_id" field if the given value is not nil.
func (phpc *PromotionHasProductCreate) SetNillablePromotionsID(i *int) *PromotionHasProductCreate {
	if i != nil {
		phpc.SetPromotionsID(*i)
	}
	return phpc
}

// SetPromocionalPrice sets the "promocional_price" field.
func (phpc *PromotionHasProductCreate) SetPromocionalPrice(f float64) *PromotionHasProductCreate {
	phpc.mutation.SetPromocionalPrice(f)
	return phpc
}

// SetProducts sets the "products" edge to the Products entity.
func (phpc *PromotionHasProductCreate) SetProducts(p *Products) *PromotionHasProductCreate {
	return phpc.SetProductsID(p.ID)
}

// SetPromotions sets the "promotions" edge to the Promotions entity.
func (phpc *PromotionHasProductCreate) SetPromotions(p *Promotions) *PromotionHasProductCreate {
	return phpc.SetPromotionsID(p.ID)
}

// Mutation returns the PromotionHasProductMutation object of the builder.
func (phpc *PromotionHasProductCreate) Mutation() *PromotionHasProductMutation {
	return phpc.mutation
}

// Save creates the PromotionHasProduct in the database.
func (phpc *PromotionHasProductCreate) Save(ctx context.Context) (*PromotionHasProduct, error) {
	phpc.defaults()
	return withHooks(ctx, phpc.sqlSave, phpc.mutation, phpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (phpc *PromotionHasProductCreate) SaveX(ctx context.Context) *PromotionHasProduct {
	v, err := phpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phpc *PromotionHasProductCreate) Exec(ctx context.Context) error {
	_, err := phpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpc *PromotionHasProductCreate) ExecX(ctx context.Context) {
	if err := phpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phpc *PromotionHasProductCreate) defaults() {
	if _, ok := phpc.mutation.CreatedAt(); !ok {
		v := promotionhasproduct.DefaultCreatedAt()
		phpc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phpc *PromotionHasProductCreate) check() error {
	if _, ok := phpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionHasProduct.created_at"`)}
	}
	if _, ok := phpc.mutation.PromocionalPrice(); !ok {
		return &ValidationError{Name: "promocional_price", err: errors.New(`ent: missing required field "PromotionHasProduct.promocional_price"`)}
	}
	return nil
}

func (phpc *PromotionHasProductCreate) sqlSave(ctx context.Context) (*PromotionHasProduct, error) {
	if err := phpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := phpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, phpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	phpc.mutation.id = &_node.ID
	phpc.mutation.done = true
	return _node, nil
}

func (phpc *PromotionHasProductCreate) createSpec() (*PromotionHasProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionHasProduct{config: phpc.config}
		_spec = sqlgraph.NewCreateSpec(promotionhasproduct.Table, sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt))
	)
	if value, ok := phpc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := phpc.mutation.DeletedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := phpc.mutation.PromocionalPrice(); ok {
		_spec.SetField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
		_node.PromocionalPrice = &value
	}
	if nodes := phpc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductsTable,
			Columns: []string{promotionhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductsID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phpc.mutation.PromotionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionsTable,
			Columns: []string{promotionhasproduct.PromotionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PromotionsID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PromotionHasProductCreateBulk is the builder for creating many PromotionHasProduct entities in bulk.
type PromotionHasProductCreateBulk struct {
	config
	err      error
	builders []*PromotionHasProductCreate
}

// Save creates the PromotionHasProduct entities in the database.
func (phpcb *PromotionHasProductCreateBulk) Save(ctx context.Context) ([]*PromotionHasProduct, error) {
	if phpcb.err != nil {
		return nil, phpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(phpcb.builders))
	nodes := make([]*PromotionHasProduct, len(phpcb.builders))
	mutators := make([]Mutator, len(phpcb.builders))
	for i := range phpcb.builders {
		func(i int, root context.Context) {
			builder := phpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionHasProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, phpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, phpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, phpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (phpcb *PromotionHasProductCreateBulk) SaveX(ctx context.Context) []*PromotionHasProduct {
	v, err := phpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phpcb *PromotionHasProductCreateBulk) Exec(ctx context.Context) error {
	_, err := phpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpcb *PromotionHasProductCreateBulk) ExecX(ctx context.Context) {
	if err := phpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
