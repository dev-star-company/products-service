// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasfeature"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasFeatureDelete is the builder for deleting a ProductHasFeature entity.
type ProductHasFeatureDelete struct {
	config
	hooks    []Hook
	mutation *ProductHasFeatureMutation
}

// Where appends a list predicates to the ProductHasFeatureDelete builder.
func (phfd *ProductHasFeatureDelete) Where(ps ...predicate.ProductHasFeature) *ProductHasFeatureDelete {
	phfd.mutation.Where(ps...)
	return phfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (phfd *ProductHasFeatureDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, phfd.sqlExec, phfd.mutation, phfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (phfd *ProductHasFeatureDelete) ExecX(ctx context.Context) int {
	n, err := phfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (phfd *ProductHasFeatureDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(producthasfeature.Table, sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt))
	if ps := phfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, phfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	phfd.mutation.done = true
	return affected, err
}

// ProductHasFeatureDeleteOne is the builder for deleting a single ProductHasFeature entity.
type ProductHasFeatureDeleteOne struct {
	phfd *ProductHasFeatureDelete
}

// Where appends a list predicates to the ProductHasFeatureDelete builder.
func (phfdo *ProductHasFeatureDeleteOne) Where(ps ...predicate.ProductHasFeature) *ProductHasFeatureDeleteOne {
	phfdo.phfd.mutation.Where(ps...)
	return phfdo
}

// Exec executes the deletion query.
func (phfdo *ProductHasFeatureDeleteOne) Exec(ctx context.Context) error {
	n, err := phfdo.phfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{producthasfeature.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (phfdo *ProductHasFeatureDeleteOne) ExecX(ctx context.Context) {
	if err := phfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
