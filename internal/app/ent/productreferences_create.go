// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/producthasproductreference"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/referencesources"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductReferencesCreate is the builder for creating a ProductReferences entity.
type ProductReferencesCreate struct {
	config
	mutation *ProductReferencesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (prc *ProductReferencesCreate) SetCreatedAt(t time.Time) *ProductReferencesCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *ProductReferencesCreate) SetNillableCreatedAt(t *time.Time) *ProductReferencesCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetDeletedAt sets the "deleted_at" field.
func (prc *ProductReferencesCreate) SetDeletedAt(t time.Time) *ProductReferencesCreate {
	prc.mutation.SetDeletedAt(t)
	return prc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prc *ProductReferencesCreate) SetNillableDeletedAt(t *time.Time) *ProductReferencesCreate {
	if t != nil {
		prc.SetDeletedAt(*t)
	}
	return prc
}

// SetReferenceSourceID sets the "reference_source_id" field.
func (prc *ProductReferencesCreate) SetReferenceSourceID(i int) *ProductReferencesCreate {
	prc.mutation.SetReferenceSourceID(i)
	return prc
}

// SetNillableReferenceSourceID sets the "reference_source_id" field if the given value is not nil.
func (prc *ProductReferencesCreate) SetNillableReferenceSourceID(i *int) *ProductReferencesCreate {
	if i != nil {
		prc.SetReferenceSourceID(*i)
	}
	return prc
}

// SetValue sets the "value" field.
func (prc *ProductReferencesCreate) SetValue(s string) *ProductReferencesCreate {
	prc.mutation.SetValue(s)
	return prc
}

// SetReferenceSourcesID sets the "reference_sources" edge to the ReferenceSources entity by ID.
func (prc *ProductReferencesCreate) SetReferenceSourcesID(id int) *ProductReferencesCreate {
	prc.mutation.SetReferenceSourcesID(id)
	return prc
}

// SetNillableReferenceSourcesID sets the "reference_sources" edge to the ReferenceSources entity by ID if the given value is not nil.
func (prc *ProductReferencesCreate) SetNillableReferenceSourcesID(id *int) *ProductReferencesCreate {
	if id != nil {
		prc = prc.SetReferenceSourcesID(*id)
	}
	return prc
}

// SetReferenceSources sets the "reference_sources" edge to the ReferenceSources entity.
func (prc *ProductReferencesCreate) SetReferenceSources(r *ReferenceSources) *ProductReferencesCreate {
	return prc.SetReferenceSourcesID(r.ID)
}

// AddProductIDs adds the "products" edge to the Products entity by IDs.
func (prc *ProductReferencesCreate) AddProductIDs(ids ...int) *ProductReferencesCreate {
	prc.mutation.AddProductIDs(ids...)
	return prc
}

// AddProducts adds the "products" edges to the Products entity.
func (prc *ProductReferencesCreate) AddProducts(p ...*Products) *ProductReferencesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prc.AddProductIDs(ids...)
}

// AddProductHasProductReferenceIDs adds the "product_has_product_reference" edge to the ProductHasProductReference entity by IDs.
func (prc *ProductReferencesCreate) AddProductHasProductReferenceIDs(ids ...int) *ProductReferencesCreate {
	prc.mutation.AddProductHasProductReferenceIDs(ids...)
	return prc
}

// AddProductHasProductReference adds the "product_has_product_reference" edges to the ProductHasProductReference entity.
func (prc *ProductReferencesCreate) AddProductHasProductReference(p ...*ProductHasProductReference) *ProductReferencesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prc.AddProductHasProductReferenceIDs(ids...)
}

// Mutation returns the ProductReferencesMutation object of the builder.
func (prc *ProductReferencesCreate) Mutation() *ProductReferencesMutation {
	return prc.mutation
}

// Save creates the ProductReferences in the database.
func (prc *ProductReferencesCreate) Save(ctx context.Context) (*ProductReferences, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *ProductReferencesCreate) SaveX(ctx context.Context) *ProductReferences {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *ProductReferencesCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *ProductReferencesCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *ProductReferencesCreate) defaults() {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := productreferences.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *ProductReferencesCreate) check() error {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductReferences.created_at"`)}
	}
	if _, ok := prc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "ProductReferences.value"`)}
	}
	return nil
}

func (prc *ProductReferencesCreate) sqlSave(ctx context.Context) (*ProductReferences, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *ProductReferencesCreate) createSpec() (*ProductReferences, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductReferences{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(productreferences.Table, sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(productreferences.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.DeletedAt(); ok {
		_spec.SetField(productreferences.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := prc.mutation.Value(); ok {
		_spec.SetField(productreferences.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if nodes := prc.mutation.ReferenceSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreferences.ReferenceSourcesTable,
			Columns: []string{productreferences.ReferenceSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReferenceSourceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductsTable,
			Columns: []string{productreferences.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.ProductHasProductReferenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductHasProductReferenceTable,
			Columns: []string{productreferences.ProductHasProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductReferencesCreateBulk is the builder for creating many ProductReferences entities in bulk.
type ProductReferencesCreateBulk struct {
	config
	err      error
	builders []*ProductReferencesCreate
}

// Save creates the ProductReferences entities in the database.
func (prcb *ProductReferencesCreateBulk) Save(ctx context.Context) ([]*ProductReferences, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*ProductReferences, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductReferencesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *ProductReferencesCreateBulk) SaveX(ctx context.Context) []*ProductReferences {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *ProductReferencesCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *ProductReferencesCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
