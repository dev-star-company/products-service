// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/promotionhasproduct"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionHasProductDelete is the builder for deleting a PromotionHasProduct entity.
type PromotionHasProductDelete struct {
	config
	hooks    []Hook
	mutation *PromotionHasProductMutation
}

// Where appends a list predicates to the PromotionHasProductDelete builder.
func (phpd *PromotionHasProductDelete) Where(ps ...predicate.PromotionHasProduct) *PromotionHasProductDelete {
	phpd.mutation.Where(ps...)
	return phpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (phpd *PromotionHasProductDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, phpd.sqlExec, phpd.mutation, phpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (phpd *PromotionHasProductDelete) ExecX(ctx context.Context) int {
	n, err := phpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (phpd *PromotionHasProductDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(promotionhasproduct.Table, sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt))
	if ps := phpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, phpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	phpd.mutation.done = true
	return affected, err
}

// PromotionHasProductDeleteOne is the builder for deleting a single PromotionHasProduct entity.
type PromotionHasProductDeleteOne struct {
	phpd *PromotionHasProductDelete
}

// Where appends a list predicates to the PromotionHasProductDelete builder.
func (phpdo *PromotionHasProductDeleteOne) Where(ps ...predicate.PromotionHasProduct) *PromotionHasProductDeleteOne {
	phpdo.phpd.mutation.Where(ps...)
	return phpdo
}

// Exec executes the deletion query.
func (phpdo *PromotionHasProductDeleteOne) Exec(ctx context.Context) error {
	n, err := phpdo.phpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{promotionhasproduct.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (phpdo *PromotionHasProductDeleteOne) ExecX(ctx context.Context) {
	if err := phpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
