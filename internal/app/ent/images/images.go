// Code generated by ent, DO NOT EDIT.

package images

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the images type in the database.
	Label = "images"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// EdgeImageFolderPath holds the string denoting the image_folder_path edge name in mutations.
	EdgeImageFolderPath = "image_folder_path"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeProductHasImage holds the string denoting the product_has_image edge name in mutations.
	EdgeProductHasImage = "product_has_image"
	// Table holds the table name of the images in the database.
	Table = "images"
	// ImageFolderPathTable is the table that holds the image_folder_path relation/edge.
	ImageFolderPathTable = "images"
	// ImageFolderPathInverseTable is the table name for the ImageFolderPath entity.
	// It exists in this package in order to avoid circular dependency with the "imagefolderpath" package.
	ImageFolderPathInverseTable = "image_folder_paths"
	// ImageFolderPathColumn is the table column denoting the image_folder_path relation/edge.
	ImageFolderPathColumn = "image_folder_path_images"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "products"
	// ProductsInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "images_id"
	// ProductHasImageTable is the table that holds the product_has_image relation/edge.
	ProductHasImageTable = "product_has_images"
	// ProductHasImageInverseTable is the table name for the ProductHasImage entity.
	// It exists in this package in order to avoid circular dependency with the "producthasimage" package.
	ProductHasImageInverseTable = "product_has_images"
	// ProductHasImageColumn is the table column denoting the product_has_image relation/edge.
	ProductHasImageColumn = "image_id"
)

// Columns holds all SQL columns for images fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldContent,
	FieldPath,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"image_folder_path_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Images queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByImageFolderPathField orders the results by image_folder_path field.
func ByImageFolderPathField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageFolderPathStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductsCount orders the results by products count.
func ByProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsStep(), opts...)
	}
}

// ByProducts orders the results by products terms.
func ByProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductHasImageCount orders the results by product_has_image count.
func ByProductHasImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductHasImageStep(), opts...)
	}
}

// ByProductHasImage orders the results by product_has_image terms.
func ByProductHasImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductHasImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImageFolderPathStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageFolderPathInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ImageFolderPathTable, ImageFolderPathColumn),
	)
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
	)
}
func newProductHasImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductHasImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductHasImageTable, ProductHasImageColumn),
	)
}
