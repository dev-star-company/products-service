// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/images"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasimage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImagesUpdate is the builder for updating Images entities.
type ImagesUpdate struct {
	config
	hooks    []Hook
	mutation *ImagesMutation
}

// Where appends a list predicates to the ImagesUpdate builder.
func (iu *ImagesUpdate) Where(ps ...predicate.Images) *ImagesUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ImagesUpdate) SetUpdatedAt(t time.Time) *ImagesUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *ImagesUpdate) SetDeletedAt(t time.Time) *ImagesUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *ImagesUpdate) SetNillableDeletedAt(t *time.Time) *ImagesUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *ImagesUpdate) ClearDeletedAt() *ImagesUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetUpdatedBy sets the "updated_by" field.
func (iu *ImagesUpdate) SetUpdatedBy(i int) *ImagesUpdate {
	iu.mutation.ResetUpdatedBy()
	iu.mutation.SetUpdatedBy(i)
	return iu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iu *ImagesUpdate) SetNillableUpdatedBy(i *int) *ImagesUpdate {
	if i != nil {
		iu.SetUpdatedBy(*i)
	}
	return iu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (iu *ImagesUpdate) AddUpdatedBy(i int) *ImagesUpdate {
	iu.mutation.AddUpdatedBy(i)
	return iu
}

// SetDeletedBy sets the "deleted_by" field.
func (iu *ImagesUpdate) SetDeletedBy(i int) *ImagesUpdate {
	iu.mutation.ResetDeletedBy()
	iu.mutation.SetDeletedBy(i)
	return iu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iu *ImagesUpdate) SetNillableDeletedBy(i *int) *ImagesUpdate {
	if i != nil {
		iu.SetDeletedBy(*i)
	}
	return iu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (iu *ImagesUpdate) AddDeletedBy(i int) *ImagesUpdate {
	iu.mutation.AddDeletedBy(i)
	return iu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iu *ImagesUpdate) ClearDeletedBy() *ImagesUpdate {
	iu.mutation.ClearDeletedBy()
	return iu
}

// SetImageFolderPathID sets the "image_folder_path_id" field.
func (iu *ImagesUpdate) SetImageFolderPathID(i int) *ImagesUpdate {
	iu.mutation.SetImageFolderPathID(i)
	return iu
}

// SetNillableImageFolderPathID sets the "image_folder_path_id" field if the given value is not nil.
func (iu *ImagesUpdate) SetNillableImageFolderPathID(i *int) *ImagesUpdate {
	if i != nil {
		iu.SetImageFolderPathID(*i)
	}
	return iu
}

// SetContent sets the "content" field.
func (iu *ImagesUpdate) SetContent(s string) *ImagesUpdate {
	iu.mutation.SetContent(s)
	return iu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (iu *ImagesUpdate) SetNillableContent(s *string) *ImagesUpdate {
	if s != nil {
		iu.SetContent(*s)
	}
	return iu
}

// SetPath sets the "path" field.
func (iu *ImagesUpdate) SetPath(s string) *ImagesUpdate {
	iu.mutation.SetPath(s)
	return iu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (iu *ImagesUpdate) SetNillablePath(s *string) *ImagesUpdate {
	if s != nil {
		iu.SetPath(*s)
	}
	return iu
}

// SetImageFolderPath sets the "image_folder_path" edge to the ImageFolderPath entity.
func (iu *ImagesUpdate) SetImageFolderPath(i *ImageFolderPath) *ImagesUpdate {
	return iu.SetImageFolderPathID(i.ID)
}

// AddProductHasImageIDs adds the "product_has_image" edge to the ProductHasImage entity by IDs.
func (iu *ImagesUpdate) AddProductHasImageIDs(ids ...int) *ImagesUpdate {
	iu.mutation.AddProductHasImageIDs(ids...)
	return iu
}

// AddProductHasImage adds the "product_has_image" edges to the ProductHasImage entity.
func (iu *ImagesUpdate) AddProductHasImage(p ...*ProductHasImage) *ImagesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddProductHasImageIDs(ids...)
}

// Mutation returns the ImagesMutation object of the builder.
func (iu *ImagesUpdate) Mutation() *ImagesMutation {
	return iu.mutation
}

// ClearImageFolderPath clears the "image_folder_path" edge to the ImageFolderPath entity.
func (iu *ImagesUpdate) ClearImageFolderPath() *ImagesUpdate {
	iu.mutation.ClearImageFolderPath()
	return iu
}

// ClearProductHasImage clears all "product_has_image" edges to the ProductHasImage entity.
func (iu *ImagesUpdate) ClearProductHasImage() *ImagesUpdate {
	iu.mutation.ClearProductHasImage()
	return iu
}

// RemoveProductHasImageIDs removes the "product_has_image" edge to ProductHasImage entities by IDs.
func (iu *ImagesUpdate) RemoveProductHasImageIDs(ids ...int) *ImagesUpdate {
	iu.mutation.RemoveProductHasImageIDs(ids...)
	return iu
}

// RemoveProductHasImage removes "product_has_image" edges to ProductHasImage entities.
func (iu *ImagesUpdate) RemoveProductHasImage(p ...*ProductHasImage) *ImagesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemoveProductHasImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImagesUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImagesUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImagesUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImagesUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ImagesUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := images.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImagesUpdate) check() error {
	if v, ok := iu.mutation.UpdatedBy(); ok {
		if err := images.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Images.updated_by": %w`, err)}
		}
	}
	if iu.mutation.ImageFolderPathCleared() && len(iu.mutation.ImageFolderPathIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Images.image_folder_path"`)
	}
	return nil
}

func (iu *ImagesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(images.Table, images.Columns, sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(images.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(images.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(images.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.UpdatedBy(); ok {
		_spec.SetField(images.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(images.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := iu.mutation.DeletedBy(); ok {
		_spec.SetField(images.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(images.FieldDeletedBy, field.TypeInt, value)
	}
	if iu.mutation.DeletedByCleared() {
		_spec.ClearField(images.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := iu.mutation.Content(); ok {
		_spec.SetField(images.FieldContent, field.TypeString, value)
	}
	if value, ok := iu.mutation.Path(); ok {
		_spec.SetField(images.FieldPath, field.TypeString, value)
	}
	if iu.mutation.ImageFolderPathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   images.ImageFolderPathTable,
			Columns: []string{images.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ImageFolderPathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   images.ImageFolderPathTable,
			Columns: []string{images.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ProductHasImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.ProductHasImageTable,
			Columns: []string{images.ProductHasImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedProductHasImageIDs(); len(nodes) > 0 && !iu.mutation.ProductHasImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.ProductHasImageTable,
			Columns: []string{images.ProductHasImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProductHasImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.ProductHasImageTable,
			Columns: []string{images.ProductHasImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{images.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImagesUpdateOne is the builder for updating a single Images entity.
type ImagesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImagesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ImagesUpdateOne) SetUpdatedAt(t time.Time) *ImagesUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *ImagesUpdateOne) SetDeletedAt(t time.Time) *ImagesUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *ImagesUpdateOne) SetNillableDeletedAt(t *time.Time) *ImagesUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *ImagesUpdateOne) ClearDeletedAt() *ImagesUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iuo *ImagesUpdateOne) SetUpdatedBy(i int) *ImagesUpdateOne {
	iuo.mutation.ResetUpdatedBy()
	iuo.mutation.SetUpdatedBy(i)
	return iuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iuo *ImagesUpdateOne) SetNillableUpdatedBy(i *int) *ImagesUpdateOne {
	if i != nil {
		iuo.SetUpdatedBy(*i)
	}
	return iuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (iuo *ImagesUpdateOne) AddUpdatedBy(i int) *ImagesUpdateOne {
	iuo.mutation.AddUpdatedBy(i)
	return iuo
}

// SetDeletedBy sets the "deleted_by" field.
func (iuo *ImagesUpdateOne) SetDeletedBy(i int) *ImagesUpdateOne {
	iuo.mutation.ResetDeletedBy()
	iuo.mutation.SetDeletedBy(i)
	return iuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iuo *ImagesUpdateOne) SetNillableDeletedBy(i *int) *ImagesUpdateOne {
	if i != nil {
		iuo.SetDeletedBy(*i)
	}
	return iuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (iuo *ImagesUpdateOne) AddDeletedBy(i int) *ImagesUpdateOne {
	iuo.mutation.AddDeletedBy(i)
	return iuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iuo *ImagesUpdateOne) ClearDeletedBy() *ImagesUpdateOne {
	iuo.mutation.ClearDeletedBy()
	return iuo
}

// SetImageFolderPathID sets the "image_folder_path_id" field.
func (iuo *ImagesUpdateOne) SetImageFolderPathID(i int) *ImagesUpdateOne {
	iuo.mutation.SetImageFolderPathID(i)
	return iuo
}

// SetNillableImageFolderPathID sets the "image_folder_path_id" field if the given value is not nil.
func (iuo *ImagesUpdateOne) SetNillableImageFolderPathID(i *int) *ImagesUpdateOne {
	if i != nil {
		iuo.SetImageFolderPathID(*i)
	}
	return iuo
}

// SetContent sets the "content" field.
func (iuo *ImagesUpdateOne) SetContent(s string) *ImagesUpdateOne {
	iuo.mutation.SetContent(s)
	return iuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (iuo *ImagesUpdateOne) SetNillableContent(s *string) *ImagesUpdateOne {
	if s != nil {
		iuo.SetContent(*s)
	}
	return iuo
}

// SetPath sets the "path" field.
func (iuo *ImagesUpdateOne) SetPath(s string) *ImagesUpdateOne {
	iuo.mutation.SetPath(s)
	return iuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (iuo *ImagesUpdateOne) SetNillablePath(s *string) *ImagesUpdateOne {
	if s != nil {
		iuo.SetPath(*s)
	}
	return iuo
}

// SetImageFolderPath sets the "image_folder_path" edge to the ImageFolderPath entity.
func (iuo *ImagesUpdateOne) SetImageFolderPath(i *ImageFolderPath) *ImagesUpdateOne {
	return iuo.SetImageFolderPathID(i.ID)
}

// AddProductHasImageIDs adds the "product_has_image" edge to the ProductHasImage entity by IDs.
func (iuo *ImagesUpdateOne) AddProductHasImageIDs(ids ...int) *ImagesUpdateOne {
	iuo.mutation.AddProductHasImageIDs(ids...)
	return iuo
}

// AddProductHasImage adds the "product_has_image" edges to the ProductHasImage entity.
func (iuo *ImagesUpdateOne) AddProductHasImage(p ...*ProductHasImage) *ImagesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddProductHasImageIDs(ids...)
}

// Mutation returns the ImagesMutation object of the builder.
func (iuo *ImagesUpdateOne) Mutation() *ImagesMutation {
	return iuo.mutation
}

// ClearImageFolderPath clears the "image_folder_path" edge to the ImageFolderPath entity.
func (iuo *ImagesUpdateOne) ClearImageFolderPath() *ImagesUpdateOne {
	iuo.mutation.ClearImageFolderPath()
	return iuo
}

// ClearProductHasImage clears all "product_has_image" edges to the ProductHasImage entity.
func (iuo *ImagesUpdateOne) ClearProductHasImage() *ImagesUpdateOne {
	iuo.mutation.ClearProductHasImage()
	return iuo
}

// RemoveProductHasImageIDs removes the "product_has_image" edge to ProductHasImage entities by IDs.
func (iuo *ImagesUpdateOne) RemoveProductHasImageIDs(ids ...int) *ImagesUpdateOne {
	iuo.mutation.RemoveProductHasImageIDs(ids...)
	return iuo
}

// RemoveProductHasImage removes "product_has_image" edges to ProductHasImage entities.
func (iuo *ImagesUpdateOne) RemoveProductHasImage(p ...*ProductHasImage) *ImagesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemoveProductHasImageIDs(ids...)
}

// Where appends a list predicates to the ImagesUpdate builder.
func (iuo *ImagesUpdateOne) Where(ps ...predicate.Images) *ImagesUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImagesUpdateOne) Select(field string, fields ...string) *ImagesUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Images entity.
func (iuo *ImagesUpdateOne) Save(ctx context.Context) (*Images, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImagesUpdateOne) SaveX(ctx context.Context) *Images {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImagesUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImagesUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ImagesUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := images.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImagesUpdateOne) check() error {
	if v, ok := iuo.mutation.UpdatedBy(); ok {
		if err := images.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Images.updated_by": %w`, err)}
		}
	}
	if iuo.mutation.ImageFolderPathCleared() && len(iuo.mutation.ImageFolderPathIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Images.image_folder_path"`)
	}
	return nil
}

func (iuo *ImagesUpdateOne) sqlSave(ctx context.Context) (_node *Images, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(images.Table, images.Columns, sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Images.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, images.FieldID)
		for _, f := range fields {
			if !images.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != images.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(images.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(images.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(images.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.UpdatedBy(); ok {
		_spec.SetField(images.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(images.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.DeletedBy(); ok {
		_spec.SetField(images.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(images.FieldDeletedBy, field.TypeInt, value)
	}
	if iuo.mutation.DeletedByCleared() {
		_spec.ClearField(images.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := iuo.mutation.Content(); ok {
		_spec.SetField(images.FieldContent, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Path(); ok {
		_spec.SetField(images.FieldPath, field.TypeString, value)
	}
	if iuo.mutation.ImageFolderPathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   images.ImageFolderPathTable,
			Columns: []string{images.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ImageFolderPathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   images.ImageFolderPathTable,
			Columns: []string{images.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ProductHasImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.ProductHasImageTable,
			Columns: []string{images.ProductHasImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedProductHasImageIDs(); len(nodes) > 0 && !iuo.mutation.ProductHasImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.ProductHasImageTable,
			Columns: []string{images.ProductHasImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProductHasImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   images.ProductHasImageTable,
			Columns: []string{images.ProductHasImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Images{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{images.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
