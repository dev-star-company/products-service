// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/promotions"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Promotions is the model entity for the Promotions schema.
type Promotions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// StartingDatetime holds the value of the "starting_datetime" field.
	StartingDatetime *time.Time `json:"starting_datetime,omitempty"`
	// EndingDatetime holds the value of the "ending_datetime" field.
	EndingDatetime *time.Time `json:"ending_datetime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionsQuery when eager-loading is set.
	Edges        PromotionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionsEdges holds the relations/edges for other nodes in the graph.
type PromotionsEdges struct {
	// PromotionHasProduct holds the value of the promotion_has_product edge.
	PromotionHasProduct []*PromotionHasProduct `json:"promotion_has_product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PromotionHasProductOrErr returns the PromotionHasProduct value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionsEdges) PromotionHasProductOrErr() ([]*PromotionHasProduct, error) {
	if e.loadedTypes[0] {
		return e.PromotionHasProduct, nil
	}
	return nil, &NotLoadedError{edge: "promotion_has_product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Promotions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotions.FieldID, promotions.FieldCreatedBy, promotions.FieldUpdatedBy, promotions.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case promotions.FieldName:
			values[i] = new(sql.NullString)
		case promotions.FieldCreatedAt, promotions.FieldUpdatedAt, promotions.FieldDeletedAt, promotions.FieldStartingDatetime, promotions.FieldEndingDatetime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Promotions fields.
func (pr *Promotions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case promotions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case promotions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case promotions.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = new(time.Time)
				*pr.DeletedAt = value.Time
			}
		case promotions.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pr.CreatedBy = int(value.Int64)
			}
		case promotions.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pr.UpdatedBy = int(value.Int64)
			}
		case promotions.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pr.DeletedBy = new(int)
				*pr.DeletedBy = int(value.Int64)
			}
		case promotions.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = new(string)
				*pr.Name = value.String
			}
		case promotions.FieldStartingDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field starting_datetime", values[i])
			} else if value.Valid {
				pr.StartingDatetime = new(time.Time)
				*pr.StartingDatetime = value.Time
			}
		case promotions.FieldEndingDatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ending_datetime", values[i])
			} else if value.Valid {
				pr.EndingDatetime = new(time.Time)
				*pr.EndingDatetime = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Promotions.
// This includes values selected through modifiers, order, etc.
func (pr *Promotions) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryPromotionHasProduct queries the "promotion_has_product" edge of the Promotions entity.
func (pr *Promotions) QueryPromotionHasProduct() *PromotionHasProductQuery {
	return NewPromotionsClient(pr.config).QueryPromotionHasProduct(pr)
}

// Update returns a builder for updating this Promotions.
// Note that you need to call Promotions.Unwrap() before calling this method if this Promotions
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Promotions) Update() *PromotionsUpdateOne {
	return NewPromotionsClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Promotions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Promotions) Unwrap() *Promotions {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Promotions is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Promotions) String() string {
	var builder strings.Builder
	builder.WriteString("Promotions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pr.UpdatedBy))
	builder.WriteString(", ")
	if v := pr.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.StartingDatetime; v != nil {
		builder.WriteString("starting_datetime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.EndingDatetime; v != nil {
		builder.WriteString("ending_datetime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PromotionsSlice is a parsable slice of Promotions.
type PromotionsSlice []*Promotions
