// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesUnitValuesDelete is the builder for deleting a FeaturesUnitValues entity.
type FeaturesUnitValuesDelete struct {
	config
	hooks    []Hook
	mutation *FeaturesUnitValuesMutation
}

// Where appends a list predicates to the FeaturesUnitValuesDelete builder.
func (fuvd *FeaturesUnitValuesDelete) Where(ps ...predicate.FeaturesUnitValues) *FeaturesUnitValuesDelete {
	fuvd.mutation.Where(ps...)
	return fuvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fuvd *FeaturesUnitValuesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fuvd.sqlExec, fuvd.mutation, fuvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fuvd *FeaturesUnitValuesDelete) ExecX(ctx context.Context) int {
	n, err := fuvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fuvd *FeaturesUnitValuesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(featuresunitvalues.Table, sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt))
	if ps := fuvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fuvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fuvd.mutation.done = true
	return affected, err
}

// FeaturesUnitValuesDeleteOne is the builder for deleting a single FeaturesUnitValues entity.
type FeaturesUnitValuesDeleteOne struct {
	fuvd *FeaturesUnitValuesDelete
}

// Where appends a list predicates to the FeaturesUnitValuesDelete builder.
func (fuvdo *FeaturesUnitValuesDeleteOne) Where(ps ...predicate.FeaturesUnitValues) *FeaturesUnitValuesDeleteOne {
	fuvdo.fuvd.mutation.Where(ps...)
	return fuvdo
}

// Exec executes the deletion query.
func (fuvdo *FeaturesUnitValuesDeleteOne) Exec(ctx context.Context) error {
	n, err := fuvdo.fuvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{featuresunitvalues.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fuvdo *FeaturesUnitValuesDeleteOne) ExecX(ctx context.Context) {
	if err := fuvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
