// Code generated by ent, DO NOT EDIT.

package productinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productinfo type in the database.
	Label = "product_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldInfoTypesID holds the string denoting the info_types_id field in the database.
	FieldInfoTypesID = "info_types_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeInfoType holds the string denoting the info_type edge name in mutations.
	EdgeInfoType = "info_type"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeProductHasInfo holds the string denoting the product_has_info edge name in mutations.
	EdgeProductHasInfo = "product_has_info"
	// Table holds the table name of the productinfo in the database.
	Table = "product_infos"
	// InfoTypeTable is the table that holds the info_type relation/edge.
	InfoTypeTable = "product_infos"
	// InfoTypeInverseTable is the table name for the InfoTypes entity.
	// It exists in this package in order to avoid circular dependency with the "infotypes" package.
	InfoTypeInverseTable = "info_types"
	// InfoTypeColumn is the table column denoting the info_type relation/edge.
	InfoTypeColumn = "info_types_id"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "product_has_infos"
	// ProductsInverseTable is the table name for the ProductHasInfo entity.
	// It exists in this package in order to avoid circular dependency with the "producthasinfo" package.
	ProductsInverseTable = "product_has_infos"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "product_info_products"
	// ProductHasInfoTable is the table that holds the product_has_info relation/edge.
	ProductHasInfoTable = "product_has_infos"
	// ProductHasInfoInverseTable is the table name for the ProductHasInfo entity.
	// It exists in this package in order to avoid circular dependency with the "producthasinfo" package.
	ProductHasInfoInverseTable = "product_has_infos"
	// ProductHasInfoColumn is the table column denoting the product_has_info relation/edge.
	ProductHasInfoColumn = "product_info_id"
)

// Columns holds all SQL columns for productinfo fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedBy,
	FieldInfoTypesID,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "product_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"features_values_types_product_info",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
)

// OrderOption defines the ordering options for the ProductInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByInfoTypesID orders the results by the info_types_id field.
func ByInfoTypesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInfoTypesID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByInfoTypeField orders the results by info_type field.
func ByInfoTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInfoTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductsCount orders the results by products count.
func ByProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsStep(), opts...)
	}
}

// ByProducts orders the results by products terms.
func ByProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductHasInfoCount orders the results by product_has_info count.
func ByProductHasInfoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductHasInfoStep(), opts...)
	}
}

// ByProductHasInfo orders the results by product_has_info terms.
func ByProductHasInfo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductHasInfoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInfoTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InfoTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InfoTypeTable, InfoTypeColumn),
	)
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
	)
}
func newProductHasInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductHasInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductHasInfoTable, ProductHasInfoColumn),
	)
}
