// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesUnitValuesUpdate is the builder for updating FeaturesUnitValues entities.
type FeaturesUnitValuesUpdate struct {
	config
	hooks    []Hook
	mutation *FeaturesUnitValuesMutation
}

// Where appends a list predicates to the FeaturesUnitValuesUpdate builder.
func (fuvu *FeaturesUnitValuesUpdate) Where(ps ...predicate.FeaturesUnitValues) *FeaturesUnitValuesUpdate {
	fuvu.mutation.Where(ps...)
	return fuvu
}

// SetDeletedAt sets the "deleted_at" field.
func (fuvu *FeaturesUnitValuesUpdate) SetDeletedAt(t time.Time) *FeaturesUnitValuesUpdate {
	fuvu.mutation.SetDeletedAt(t)
	return fuvu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuvu *FeaturesUnitValuesUpdate) SetNillableDeletedAt(t *time.Time) *FeaturesUnitValuesUpdate {
	if t != nil {
		fuvu.SetDeletedAt(*t)
	}
	return fuvu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuvu *FeaturesUnitValuesUpdate) ClearDeletedAt() *FeaturesUnitValuesUpdate {
	fuvu.mutation.ClearDeletedAt()
	return fuvu
}

// SetName sets the "name" field.
func (fuvu *FeaturesUnitValuesUpdate) SetName(s string) *FeaturesUnitValuesUpdate {
	fuvu.mutation.SetName(s)
	return fuvu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuvu *FeaturesUnitValuesUpdate) SetNillableName(s *string) *FeaturesUnitValuesUpdate {
	if s != nil {
		fuvu.SetName(*s)
	}
	return fuvu
}

// SetDecimals sets the "decimals" field.
func (fuvu *FeaturesUnitValuesUpdate) SetDecimals(i int) *FeaturesUnitValuesUpdate {
	fuvu.mutation.ResetDecimals()
	fuvu.mutation.SetDecimals(i)
	return fuvu
}

// SetNillableDecimals sets the "decimals" field if the given value is not nil.
func (fuvu *FeaturesUnitValuesUpdate) SetNillableDecimals(i *int) *FeaturesUnitValuesUpdate {
	if i != nil {
		fuvu.SetDecimals(*i)
	}
	return fuvu
}

// AddDecimals adds i to the "decimals" field.
func (fuvu *FeaturesUnitValuesUpdate) AddDecimals(i int) *FeaturesUnitValuesUpdate {
	fuvu.mutation.AddDecimals(i)
	return fuvu
}

// ClearDecimals clears the value of the "decimals" field.
func (fuvu *FeaturesUnitValuesUpdate) ClearDecimals() *FeaturesUnitValuesUpdate {
	fuvu.mutation.ClearDecimals()
	return fuvu
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fuvu *FeaturesUnitValuesUpdate) AddFeatureValueIDs(ids ...int) *FeaturesUnitValuesUpdate {
	fuvu.mutation.AddFeatureValueIDs(ids...)
	return fuvu
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fuvu *FeaturesUnitValuesUpdate) AddFeatureValues(f ...*FeaturesValues) *FeaturesUnitValuesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuvu.AddFeatureValueIDs(ids...)
}

// Mutation returns the FeaturesUnitValuesMutation object of the builder.
func (fuvu *FeaturesUnitValuesUpdate) Mutation() *FeaturesUnitValuesMutation {
	return fuvu.mutation
}

// ClearFeatureValues clears all "feature_values" edges to the FeaturesValues entity.
func (fuvu *FeaturesUnitValuesUpdate) ClearFeatureValues() *FeaturesUnitValuesUpdate {
	fuvu.mutation.ClearFeatureValues()
	return fuvu
}

// RemoveFeatureValueIDs removes the "feature_values" edge to FeaturesValues entities by IDs.
func (fuvu *FeaturesUnitValuesUpdate) RemoveFeatureValueIDs(ids ...int) *FeaturesUnitValuesUpdate {
	fuvu.mutation.RemoveFeatureValueIDs(ids...)
	return fuvu
}

// RemoveFeatureValues removes "feature_values" edges to FeaturesValues entities.
func (fuvu *FeaturesUnitValuesUpdate) RemoveFeatureValues(f ...*FeaturesValues) *FeaturesUnitValuesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuvu.RemoveFeatureValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fuvu *FeaturesUnitValuesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fuvu.sqlSave, fuvu.mutation, fuvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuvu *FeaturesUnitValuesUpdate) SaveX(ctx context.Context) int {
	affected, err := fuvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fuvu *FeaturesUnitValuesUpdate) Exec(ctx context.Context) error {
	_, err := fuvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuvu *FeaturesUnitValuesUpdate) ExecX(ctx context.Context) {
	if err := fuvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuvu *FeaturesUnitValuesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(featuresunitvalues.Table, featuresunitvalues.Columns, sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt))
	if ps := fuvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuvu.mutation.DeletedAt(); ok {
		_spec.SetField(featuresunitvalues.FieldDeletedAt, field.TypeTime, value)
	}
	if fuvu.mutation.DeletedAtCleared() {
		_spec.ClearField(featuresunitvalues.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuvu.mutation.Name(); ok {
		_spec.SetField(featuresunitvalues.FieldName, field.TypeString, value)
	}
	if value, ok := fuvu.mutation.Decimals(); ok {
		_spec.SetField(featuresunitvalues.FieldDecimals, field.TypeInt, value)
	}
	if value, ok := fuvu.mutation.AddedDecimals(); ok {
		_spec.AddField(featuresunitvalues.FieldDecimals, field.TypeInt, value)
	}
	if fuvu.mutation.DecimalsCleared() {
		_spec.ClearField(featuresunitvalues.FieldDecimals, field.TypeInt)
	}
	if fuvu.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresunitvalues.FeatureValuesTable,
			Columns: []string{featuresunitvalues.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuvu.mutation.RemovedFeatureValuesIDs(); len(nodes) > 0 && !fuvu.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresunitvalues.FeatureValuesTable,
			Columns: []string{featuresunitvalues.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuvu.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresunitvalues.FeatureValuesTable,
			Columns: []string{featuresunitvalues.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fuvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuresunitvalues.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fuvu.mutation.done = true
	return n, nil
}

// FeaturesUnitValuesUpdateOne is the builder for updating a single FeaturesUnitValues entity.
type FeaturesUnitValuesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeaturesUnitValuesMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (fuvuo *FeaturesUnitValuesUpdateOne) SetDeletedAt(t time.Time) *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.SetDeletedAt(t)
	return fuvuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuvuo *FeaturesUnitValuesUpdateOne) SetNillableDeletedAt(t *time.Time) *FeaturesUnitValuesUpdateOne {
	if t != nil {
		fuvuo.SetDeletedAt(*t)
	}
	return fuvuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuvuo *FeaturesUnitValuesUpdateOne) ClearDeletedAt() *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.ClearDeletedAt()
	return fuvuo
}

// SetName sets the "name" field.
func (fuvuo *FeaturesUnitValuesUpdateOne) SetName(s string) *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.SetName(s)
	return fuvuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuvuo *FeaturesUnitValuesUpdateOne) SetNillableName(s *string) *FeaturesUnitValuesUpdateOne {
	if s != nil {
		fuvuo.SetName(*s)
	}
	return fuvuo
}

// SetDecimals sets the "decimals" field.
func (fuvuo *FeaturesUnitValuesUpdateOne) SetDecimals(i int) *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.ResetDecimals()
	fuvuo.mutation.SetDecimals(i)
	return fuvuo
}

// SetNillableDecimals sets the "decimals" field if the given value is not nil.
func (fuvuo *FeaturesUnitValuesUpdateOne) SetNillableDecimals(i *int) *FeaturesUnitValuesUpdateOne {
	if i != nil {
		fuvuo.SetDecimals(*i)
	}
	return fuvuo
}

// AddDecimals adds i to the "decimals" field.
func (fuvuo *FeaturesUnitValuesUpdateOne) AddDecimals(i int) *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.AddDecimals(i)
	return fuvuo
}

// ClearDecimals clears the value of the "decimals" field.
func (fuvuo *FeaturesUnitValuesUpdateOne) ClearDecimals() *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.ClearDecimals()
	return fuvuo
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fuvuo *FeaturesUnitValuesUpdateOne) AddFeatureValueIDs(ids ...int) *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.AddFeatureValueIDs(ids...)
	return fuvuo
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fuvuo *FeaturesUnitValuesUpdateOne) AddFeatureValues(f ...*FeaturesValues) *FeaturesUnitValuesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuvuo.AddFeatureValueIDs(ids...)
}

// Mutation returns the FeaturesUnitValuesMutation object of the builder.
func (fuvuo *FeaturesUnitValuesUpdateOne) Mutation() *FeaturesUnitValuesMutation {
	return fuvuo.mutation
}

// ClearFeatureValues clears all "feature_values" edges to the FeaturesValues entity.
func (fuvuo *FeaturesUnitValuesUpdateOne) ClearFeatureValues() *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.ClearFeatureValues()
	return fuvuo
}

// RemoveFeatureValueIDs removes the "feature_values" edge to FeaturesValues entities by IDs.
func (fuvuo *FeaturesUnitValuesUpdateOne) RemoveFeatureValueIDs(ids ...int) *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.RemoveFeatureValueIDs(ids...)
	return fuvuo
}

// RemoveFeatureValues removes "feature_values" edges to FeaturesValues entities.
func (fuvuo *FeaturesUnitValuesUpdateOne) RemoveFeatureValues(f ...*FeaturesValues) *FeaturesUnitValuesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuvuo.RemoveFeatureValueIDs(ids...)
}

// Where appends a list predicates to the FeaturesUnitValuesUpdate builder.
func (fuvuo *FeaturesUnitValuesUpdateOne) Where(ps ...predicate.FeaturesUnitValues) *FeaturesUnitValuesUpdateOne {
	fuvuo.mutation.Where(ps...)
	return fuvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuvuo *FeaturesUnitValuesUpdateOne) Select(field string, fields ...string) *FeaturesUnitValuesUpdateOne {
	fuvuo.fields = append([]string{field}, fields...)
	return fuvuo
}

// Save executes the query and returns the updated FeaturesUnitValues entity.
func (fuvuo *FeaturesUnitValuesUpdateOne) Save(ctx context.Context) (*FeaturesUnitValues, error) {
	return withHooks(ctx, fuvuo.sqlSave, fuvuo.mutation, fuvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuvuo *FeaturesUnitValuesUpdateOne) SaveX(ctx context.Context) *FeaturesUnitValues {
	node, err := fuvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuvuo *FeaturesUnitValuesUpdateOne) Exec(ctx context.Context) error {
	_, err := fuvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuvuo *FeaturesUnitValuesUpdateOne) ExecX(ctx context.Context) {
	if err := fuvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuvuo *FeaturesUnitValuesUpdateOne) sqlSave(ctx context.Context) (_node *FeaturesUnitValues, err error) {
	_spec := sqlgraph.NewUpdateSpec(featuresunitvalues.Table, featuresunitvalues.Columns, sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt))
	id, ok := fuvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeaturesUnitValues.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featuresunitvalues.FieldID)
		for _, f := range fields {
			if !featuresunitvalues.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != featuresunitvalues.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuvuo.mutation.DeletedAt(); ok {
		_spec.SetField(featuresunitvalues.FieldDeletedAt, field.TypeTime, value)
	}
	if fuvuo.mutation.DeletedAtCleared() {
		_spec.ClearField(featuresunitvalues.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuvuo.mutation.Name(); ok {
		_spec.SetField(featuresunitvalues.FieldName, field.TypeString, value)
	}
	if value, ok := fuvuo.mutation.Decimals(); ok {
		_spec.SetField(featuresunitvalues.FieldDecimals, field.TypeInt, value)
	}
	if value, ok := fuvuo.mutation.AddedDecimals(); ok {
		_spec.AddField(featuresunitvalues.FieldDecimals, field.TypeInt, value)
	}
	if fuvuo.mutation.DecimalsCleared() {
		_spec.ClearField(featuresunitvalues.FieldDecimals, field.TypeInt)
	}
	if fuvuo.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresunitvalues.FeatureValuesTable,
			Columns: []string{featuresunitvalues.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuvuo.mutation.RemovedFeatureValuesIDs(); len(nodes) > 0 && !fuvuo.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresunitvalues.FeatureValuesTable,
			Columns: []string{featuresunitvalues.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuvuo.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresunitvalues.FeatureValuesTable,
			Columns: []string{featuresunitvalues.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeaturesUnitValues{config: fuvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuresunitvalues.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuvuo.mutation.done = true
	return _node, nil
}
