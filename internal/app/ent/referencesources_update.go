// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/referencesources"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReferenceSourcesUpdate is the builder for updating ReferenceSources entities.
type ReferenceSourcesUpdate struct {
	config
	hooks    []Hook
	mutation *ReferenceSourcesMutation
}

// Where appends a list predicates to the ReferenceSourcesUpdate builder.
func (rsu *ReferenceSourcesUpdate) Where(ps ...predicate.ReferenceSources) *ReferenceSourcesUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetDeletedAt sets the "deleted_at" field.
func (rsu *ReferenceSourcesUpdate) SetDeletedAt(t time.Time) *ReferenceSourcesUpdate {
	rsu.mutation.SetDeletedAt(t)
	return rsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rsu *ReferenceSourcesUpdate) SetNillableDeletedAt(t *time.Time) *ReferenceSourcesUpdate {
	if t != nil {
		rsu.SetDeletedAt(*t)
	}
	return rsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rsu *ReferenceSourcesUpdate) ClearDeletedAt() *ReferenceSourcesUpdate {
	rsu.mutation.ClearDeletedAt()
	return rsu
}

// SetName sets the "name" field.
func (rsu *ReferenceSourcesUpdate) SetName(s string) *ReferenceSourcesUpdate {
	rsu.mutation.SetName(s)
	return rsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsu *ReferenceSourcesUpdate) SetNillableName(s *string) *ReferenceSourcesUpdate {
	if s != nil {
		rsu.SetName(*s)
	}
	return rsu
}

// AddProductReferenceIDs adds the "product_references" edge to the ProductReferences entity by IDs.
func (rsu *ReferenceSourcesUpdate) AddProductReferenceIDs(ids ...int) *ReferenceSourcesUpdate {
	rsu.mutation.AddProductReferenceIDs(ids...)
	return rsu
}

// AddProductReferences adds the "product_references" edges to the ProductReferences entity.
func (rsu *ReferenceSourcesUpdate) AddProductReferences(p ...*ProductReferences) *ReferenceSourcesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsu.AddProductReferenceIDs(ids...)
}

// Mutation returns the ReferenceSourcesMutation object of the builder.
func (rsu *ReferenceSourcesUpdate) Mutation() *ReferenceSourcesMutation {
	return rsu.mutation
}

// ClearProductReferences clears all "product_references" edges to the ProductReferences entity.
func (rsu *ReferenceSourcesUpdate) ClearProductReferences() *ReferenceSourcesUpdate {
	rsu.mutation.ClearProductReferences()
	return rsu
}

// RemoveProductReferenceIDs removes the "product_references" edge to ProductReferences entities by IDs.
func (rsu *ReferenceSourcesUpdate) RemoveProductReferenceIDs(ids ...int) *ReferenceSourcesUpdate {
	rsu.mutation.RemoveProductReferenceIDs(ids...)
	return rsu
}

// RemoveProductReferences removes "product_references" edges to ProductReferences entities.
func (rsu *ReferenceSourcesUpdate) RemoveProductReferences(p ...*ProductReferences) *ReferenceSourcesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsu.RemoveProductReferenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *ReferenceSourcesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rsu.sqlSave, rsu.mutation, rsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *ReferenceSourcesUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *ReferenceSourcesUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *ReferenceSourcesUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rsu *ReferenceSourcesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(referencesources.Table, referencesources.Columns, sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt))
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.DeletedAt(); ok {
		_spec.SetField(referencesources.FieldDeletedAt, field.TypeTime, value)
	}
	if rsu.mutation.DeletedAtCleared() {
		_spec.ClearField(referencesources.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rsu.mutation.Name(); ok {
		_spec.SetField(referencesources.FieldName, field.TypeString, value)
	}
	if rsu.mutation.ProductReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referencesources.ProductReferencesTable,
			Columns: []string{referencesources.ProductReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RemovedProductReferencesIDs(); len(nodes) > 0 && !rsu.mutation.ProductReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referencesources.ProductReferencesTable,
			Columns: []string{referencesources.ProductReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.ProductReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referencesources.ProductReferencesTable,
			Columns: []string{referencesources.ProductReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referencesources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsu.mutation.done = true
	return n, nil
}

// ReferenceSourcesUpdateOne is the builder for updating a single ReferenceSources entity.
type ReferenceSourcesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReferenceSourcesMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (rsuo *ReferenceSourcesUpdateOne) SetDeletedAt(t time.Time) *ReferenceSourcesUpdateOne {
	rsuo.mutation.SetDeletedAt(t)
	return rsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rsuo *ReferenceSourcesUpdateOne) SetNillableDeletedAt(t *time.Time) *ReferenceSourcesUpdateOne {
	if t != nil {
		rsuo.SetDeletedAt(*t)
	}
	return rsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rsuo *ReferenceSourcesUpdateOne) ClearDeletedAt() *ReferenceSourcesUpdateOne {
	rsuo.mutation.ClearDeletedAt()
	return rsuo
}

// SetName sets the "name" field.
func (rsuo *ReferenceSourcesUpdateOne) SetName(s string) *ReferenceSourcesUpdateOne {
	rsuo.mutation.SetName(s)
	return rsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsuo *ReferenceSourcesUpdateOne) SetNillableName(s *string) *ReferenceSourcesUpdateOne {
	if s != nil {
		rsuo.SetName(*s)
	}
	return rsuo
}

// AddProductReferenceIDs adds the "product_references" edge to the ProductReferences entity by IDs.
func (rsuo *ReferenceSourcesUpdateOne) AddProductReferenceIDs(ids ...int) *ReferenceSourcesUpdateOne {
	rsuo.mutation.AddProductReferenceIDs(ids...)
	return rsuo
}

// AddProductReferences adds the "product_references" edges to the ProductReferences entity.
func (rsuo *ReferenceSourcesUpdateOne) AddProductReferences(p ...*ProductReferences) *ReferenceSourcesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsuo.AddProductReferenceIDs(ids...)
}

// Mutation returns the ReferenceSourcesMutation object of the builder.
func (rsuo *ReferenceSourcesUpdateOne) Mutation() *ReferenceSourcesMutation {
	return rsuo.mutation
}

// ClearProductReferences clears all "product_references" edges to the ProductReferences entity.
func (rsuo *ReferenceSourcesUpdateOne) ClearProductReferences() *ReferenceSourcesUpdateOne {
	rsuo.mutation.ClearProductReferences()
	return rsuo
}

// RemoveProductReferenceIDs removes the "product_references" edge to ProductReferences entities by IDs.
func (rsuo *ReferenceSourcesUpdateOne) RemoveProductReferenceIDs(ids ...int) *ReferenceSourcesUpdateOne {
	rsuo.mutation.RemoveProductReferenceIDs(ids...)
	return rsuo
}

// RemoveProductReferences removes "product_references" edges to ProductReferences entities.
func (rsuo *ReferenceSourcesUpdateOne) RemoveProductReferences(p ...*ProductReferences) *ReferenceSourcesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsuo.RemoveProductReferenceIDs(ids...)
}

// Where appends a list predicates to the ReferenceSourcesUpdate builder.
func (rsuo *ReferenceSourcesUpdateOne) Where(ps ...predicate.ReferenceSources) *ReferenceSourcesUpdateOne {
	rsuo.mutation.Where(ps...)
	return rsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *ReferenceSourcesUpdateOne) Select(field string, fields ...string) *ReferenceSourcesUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated ReferenceSources entity.
func (rsuo *ReferenceSourcesUpdateOne) Save(ctx context.Context) (*ReferenceSources, error) {
	return withHooks(ctx, rsuo.sqlSave, rsuo.mutation, rsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *ReferenceSourcesUpdateOne) SaveX(ctx context.Context) *ReferenceSources {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *ReferenceSourcesUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *ReferenceSourcesUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rsuo *ReferenceSourcesUpdateOne) sqlSave(ctx context.Context) (_node *ReferenceSources, err error) {
	_spec := sqlgraph.NewUpdateSpec(referencesources.Table, referencesources.Columns, sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt))
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReferenceSources.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, referencesources.FieldID)
		for _, f := range fields {
			if !referencesources.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != referencesources.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.DeletedAt(); ok {
		_spec.SetField(referencesources.FieldDeletedAt, field.TypeTime, value)
	}
	if rsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(referencesources.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rsuo.mutation.Name(); ok {
		_spec.SetField(referencesources.FieldName, field.TypeString, value)
	}
	if rsuo.mutation.ProductReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referencesources.ProductReferencesTable,
			Columns: []string{referencesources.ProductReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RemovedProductReferencesIDs(); len(nodes) > 0 && !rsuo.mutation.ProductReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referencesources.ProductReferencesTable,
			Columns: []string{referencesources.ProductReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.ProductReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referencesources.ProductReferencesTable,
			Columns: []string{referencesources.ProductReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReferenceSources{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{referencesources.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuo.mutation.done = true
	return _node, nil
}
