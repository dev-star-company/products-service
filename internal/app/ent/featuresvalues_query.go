// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/featuresvaluestypes"
	"products-service/internal/app/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesValuesQuery is the builder for querying FeaturesValues entities.
type FeaturesValuesQuery struct {
	config
	ctx                    *QueryContext
	order                  []featuresvalues.OrderOption
	inters                 []Interceptor
	predicates             []predicate.FeaturesValues
	withFeatures           *FeaturesQuery
	withFeatureUnitValues  *FeaturesUnitValuesQuery
	withFeatureValuesTypes *FeaturesValuesTypesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeaturesValuesQuery builder.
func (fvq *FeaturesValuesQuery) Where(ps ...predicate.FeaturesValues) *FeaturesValuesQuery {
	fvq.predicates = append(fvq.predicates, ps...)
	return fvq
}

// Limit the number of records to be returned by this query.
func (fvq *FeaturesValuesQuery) Limit(limit int) *FeaturesValuesQuery {
	fvq.ctx.Limit = &limit
	return fvq
}

// Offset to start from.
func (fvq *FeaturesValuesQuery) Offset(offset int) *FeaturesValuesQuery {
	fvq.ctx.Offset = &offset
	return fvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fvq *FeaturesValuesQuery) Unique(unique bool) *FeaturesValuesQuery {
	fvq.ctx.Unique = &unique
	return fvq
}

// Order specifies how the records should be ordered.
func (fvq *FeaturesValuesQuery) Order(o ...featuresvalues.OrderOption) *FeaturesValuesQuery {
	fvq.order = append(fvq.order, o...)
	return fvq
}

// QueryFeatures chains the current query on the "features" edge.
func (fvq *FeaturesValuesQuery) QueryFeatures() *FeaturesQuery {
	query := (&FeaturesClient{config: fvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(featuresvalues.Table, featuresvalues.FieldID, selector),
			sqlgraph.To(features.Table, features.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, featuresvalues.FeaturesTable, featuresvalues.FeaturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(fvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeatureUnitValues chains the current query on the "feature_unit_values" edge.
func (fvq *FeaturesValuesQuery) QueryFeatureUnitValues() *FeaturesUnitValuesQuery {
	query := (&FeaturesUnitValuesClient{config: fvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(featuresvalues.Table, featuresvalues.FieldID, selector),
			sqlgraph.To(featuresunitvalues.Table, featuresunitvalues.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, featuresvalues.FeatureUnitValuesTable, featuresvalues.FeatureUnitValuesColumn),
		)
		fromU = sqlgraph.SetNeighbors(fvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeatureValuesTypes chains the current query on the "feature_values_types" edge.
func (fvq *FeaturesValuesQuery) QueryFeatureValuesTypes() *FeaturesValuesTypesQuery {
	query := (&FeaturesValuesTypesClient{config: fvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(featuresvalues.Table, featuresvalues.FieldID, selector),
			sqlgraph.To(featuresvaluestypes.Table, featuresvaluestypes.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, featuresvalues.FeatureValuesTypesTable, featuresvalues.FeatureValuesTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(fvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FeaturesValues entity from the query.
// Returns a *NotFoundError when no FeaturesValues was found.
func (fvq *FeaturesValuesQuery) First(ctx context.Context) (*FeaturesValues, error) {
	nodes, err := fvq.Limit(1).All(setContextOp(ctx, fvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{featuresvalues.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) FirstX(ctx context.Context) *FeaturesValues {
	node, err := fvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeaturesValues ID from the query.
// Returns a *NotFoundError when no FeaturesValues ID was found.
func (fvq *FeaturesValuesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fvq.Limit(1).IDs(setContextOp(ctx, fvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{featuresvalues.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) FirstIDX(ctx context.Context) int {
	id, err := fvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeaturesValues entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeaturesValues entity is found.
// Returns a *NotFoundError when no FeaturesValues entities are found.
func (fvq *FeaturesValuesQuery) Only(ctx context.Context) (*FeaturesValues, error) {
	nodes, err := fvq.Limit(2).All(setContextOp(ctx, fvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{featuresvalues.Label}
	default:
		return nil, &NotSingularError{featuresvalues.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) OnlyX(ctx context.Context) *FeaturesValues {
	node, err := fvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeaturesValues ID in the query.
// Returns a *NotSingularError when more than one FeaturesValues ID is found.
// Returns a *NotFoundError when no entities are found.
func (fvq *FeaturesValuesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fvq.Limit(2).IDs(setContextOp(ctx, fvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{featuresvalues.Label}
	default:
		err = &NotSingularError{featuresvalues.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) OnlyIDX(ctx context.Context) int {
	id, err := fvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeaturesValuesSlice.
func (fvq *FeaturesValuesQuery) All(ctx context.Context) ([]*FeaturesValues, error) {
	ctx = setContextOp(ctx, fvq.ctx, ent.OpQueryAll)
	if err := fvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeaturesValues, *FeaturesValuesQuery]()
	return withInterceptors[[]*FeaturesValues](ctx, fvq, qr, fvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) AllX(ctx context.Context) []*FeaturesValues {
	nodes, err := fvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeaturesValues IDs.
func (fvq *FeaturesValuesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fvq.ctx.Unique == nil && fvq.path != nil {
		fvq.Unique(true)
	}
	ctx = setContextOp(ctx, fvq.ctx, ent.OpQueryIDs)
	if err = fvq.Select(featuresvalues.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) IDsX(ctx context.Context) []int {
	ids, err := fvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fvq *FeaturesValuesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fvq.ctx, ent.OpQueryCount)
	if err := fvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fvq, querierCount[*FeaturesValuesQuery](), fvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) CountX(ctx context.Context) int {
	count, err := fvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fvq *FeaturesValuesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fvq.ctx, ent.OpQueryExist)
	switch _, err := fvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fvq *FeaturesValuesQuery) ExistX(ctx context.Context) bool {
	exist, err := fvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeaturesValuesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fvq *FeaturesValuesQuery) Clone() *FeaturesValuesQuery {
	if fvq == nil {
		return nil
	}
	return &FeaturesValuesQuery{
		config:                 fvq.config,
		ctx:                    fvq.ctx.Clone(),
		order:                  append([]featuresvalues.OrderOption{}, fvq.order...),
		inters:                 append([]Interceptor{}, fvq.inters...),
		predicates:             append([]predicate.FeaturesValues{}, fvq.predicates...),
		withFeatures:           fvq.withFeatures.Clone(),
		withFeatureUnitValues:  fvq.withFeatureUnitValues.Clone(),
		withFeatureValuesTypes: fvq.withFeatureValuesTypes.Clone(),
		// clone intermediate query.
		sql:  fvq.sql.Clone(),
		path: fvq.path,
	}
}

// WithFeatures tells the query-builder to eager-load the nodes that are connected to
// the "features" edge. The optional arguments are used to configure the query builder of the edge.
func (fvq *FeaturesValuesQuery) WithFeatures(opts ...func(*FeaturesQuery)) *FeaturesValuesQuery {
	query := (&FeaturesClient{config: fvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvq.withFeatures = query
	return fvq
}

// WithFeatureUnitValues tells the query-builder to eager-load the nodes that are connected to
// the "feature_unit_values" edge. The optional arguments are used to configure the query builder of the edge.
func (fvq *FeaturesValuesQuery) WithFeatureUnitValues(opts ...func(*FeaturesUnitValuesQuery)) *FeaturesValuesQuery {
	query := (&FeaturesUnitValuesClient{config: fvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvq.withFeatureUnitValues = query
	return fvq
}

// WithFeatureValuesTypes tells the query-builder to eager-load the nodes that are connected to
// the "feature_values_types" edge. The optional arguments are used to configure the query builder of the edge.
func (fvq *FeaturesValuesQuery) WithFeatureValuesTypes(opts ...func(*FeaturesValuesTypesQuery)) *FeaturesValuesQuery {
	query := (&FeaturesValuesTypesClient{config: fvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvq.withFeatureValuesTypes = query
	return fvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeaturesValues.Query().
//		GroupBy(featuresvalues.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fvq *FeaturesValuesQuery) GroupBy(field string, fields ...string) *FeaturesValuesGroupBy {
	fvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeaturesValuesGroupBy{build: fvq}
	grbuild.flds = &fvq.ctx.Fields
	grbuild.label = featuresvalues.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.FeaturesValues.Query().
//		Select(featuresvalues.FieldCreatedAt).
//		Scan(ctx, &v)
func (fvq *FeaturesValuesQuery) Select(fields ...string) *FeaturesValuesSelect {
	fvq.ctx.Fields = append(fvq.ctx.Fields, fields...)
	sbuild := &FeaturesValuesSelect{FeaturesValuesQuery: fvq}
	sbuild.label = featuresvalues.Label
	sbuild.flds, sbuild.scan = &fvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeaturesValuesSelect configured with the given aggregations.
func (fvq *FeaturesValuesQuery) Aggregate(fns ...AggregateFunc) *FeaturesValuesSelect {
	return fvq.Select().Aggregate(fns...)
}

func (fvq *FeaturesValuesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fvq); err != nil {
				return err
			}
		}
	}
	for _, f := range fvq.ctx.Fields {
		if !featuresvalues.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fvq.path != nil {
		prev, err := fvq.path(ctx)
		if err != nil {
			return err
		}
		fvq.sql = prev
	}
	return nil
}

func (fvq *FeaturesValuesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeaturesValues, error) {
	var (
		nodes       = []*FeaturesValues{}
		_spec       = fvq.querySpec()
		loadedTypes = [3]bool{
			fvq.withFeatures != nil,
			fvq.withFeatureUnitValues != nil,
			fvq.withFeatureValuesTypes != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeaturesValues).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeaturesValues{config: fvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fvq.withFeatures; query != nil {
		if err := fvq.loadFeatures(ctx, query, nodes, nil,
			func(n *FeaturesValues, e *Features) { n.Edges.Features = e }); err != nil {
			return nil, err
		}
	}
	if query := fvq.withFeatureUnitValues; query != nil {
		if err := fvq.loadFeatureUnitValues(ctx, query, nodes, nil,
			func(n *FeaturesValues, e *FeaturesUnitValues) { n.Edges.FeatureUnitValues = e }); err != nil {
			return nil, err
		}
	}
	if query := fvq.withFeatureValuesTypes; query != nil {
		if err := fvq.loadFeatureValuesTypes(ctx, query, nodes, nil,
			func(n *FeaturesValues, e *FeaturesValuesTypes) { n.Edges.FeatureValuesTypes = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fvq *FeaturesValuesQuery) loadFeatures(ctx context.Context, query *FeaturesQuery, nodes []*FeaturesValues, init func(*FeaturesValues), assign func(*FeaturesValues, *Features)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FeaturesValues)
	for i := range nodes {
		if nodes[i].FeaturesID == nil {
			continue
		}
		fk := *nodes[i].FeaturesID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(features.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "features_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fvq *FeaturesValuesQuery) loadFeatureUnitValues(ctx context.Context, query *FeaturesUnitValuesQuery, nodes []*FeaturesValues, init func(*FeaturesValues), assign func(*FeaturesValues, *FeaturesUnitValues)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FeaturesValues)
	for i := range nodes {
		if nodes[i].FeatureUnitValuesID == nil {
			continue
		}
		fk := *nodes[i].FeatureUnitValuesID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(featuresunitvalues.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_unit_values_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fvq *FeaturesValuesQuery) loadFeatureValuesTypes(ctx context.Context, query *FeaturesValuesTypesQuery, nodes []*FeaturesValues, init func(*FeaturesValues), assign func(*FeaturesValues, *FeaturesValuesTypes)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FeaturesValues)
	for i := range nodes {
		if nodes[i].FeatureValuesTypesID == nil {
			continue
		}
		fk := *nodes[i].FeatureValuesTypesID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(featuresvaluestypes.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_values_types_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fvq *FeaturesValuesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fvq.querySpec()
	_spec.Node.Columns = fvq.ctx.Fields
	if len(fvq.ctx.Fields) > 0 {
		_spec.Unique = fvq.ctx.Unique != nil && *fvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fvq.driver, _spec)
}

func (fvq *FeaturesValuesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(featuresvalues.Table, featuresvalues.Columns, sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt))
	_spec.From = fvq.sql
	if unique := fvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fvq.path != nil {
		_spec.Unique = true
	}
	if fields := fvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featuresvalues.FieldID)
		for i := range fields {
			if fields[i] != featuresvalues.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if fvq.withFeatures != nil {
			_spec.Node.AddColumnOnce(featuresvalues.FieldFeaturesID)
		}
		if fvq.withFeatureUnitValues != nil {
			_spec.Node.AddColumnOnce(featuresvalues.FieldFeatureUnitValuesID)
		}
		if fvq.withFeatureValuesTypes != nil {
			_spec.Node.AddColumnOnce(featuresvalues.FieldFeatureValuesTypesID)
		}
	}
	if ps := fvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fvq *FeaturesValuesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fvq.driver.Dialect())
	t1 := builder.Table(featuresvalues.Table)
	columns := fvq.ctx.Fields
	if len(columns) == 0 {
		columns = featuresvalues.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fvq.sql != nil {
		selector = fvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fvq.ctx.Unique != nil && *fvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fvq.predicates {
		p(selector)
	}
	for _, p := range fvq.order {
		p(selector)
	}
	if offset := fvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FeaturesValuesGroupBy is the group-by builder for FeaturesValues entities.
type FeaturesValuesGroupBy struct {
	selector
	build *FeaturesValuesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fvgb *FeaturesValuesGroupBy) Aggregate(fns ...AggregateFunc) *FeaturesValuesGroupBy {
	fvgb.fns = append(fvgb.fns, fns...)
	return fvgb
}

// Scan applies the selector query and scans the result into the given value.
func (fvgb *FeaturesValuesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fvgb.build.ctx, ent.OpQueryGroupBy)
	if err := fvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeaturesValuesQuery, *FeaturesValuesGroupBy](ctx, fvgb.build, fvgb, fvgb.build.inters, v)
}

func (fvgb *FeaturesValuesGroupBy) sqlScan(ctx context.Context, root *FeaturesValuesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fvgb.fns))
	for _, fn := range fvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fvgb.flds)+len(fvgb.fns))
		for _, f := range *fvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeaturesValuesSelect is the builder for selecting fields of FeaturesValues entities.
type FeaturesValuesSelect struct {
	*FeaturesValuesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fvs *FeaturesValuesSelect) Aggregate(fns ...AggregateFunc) *FeaturesValuesSelect {
	fvs.fns = append(fvs.fns, fns...)
	return fvs
}

// Scan applies the selector query and scans the result into the given value.
func (fvs *FeaturesValuesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fvs.ctx, ent.OpQuerySelect)
	if err := fvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeaturesValuesQuery, *FeaturesValuesSelect](ctx, fvs.FeaturesValuesQuery, fvs, fvs.inters, v)
}

func (fvs *FeaturesValuesSelect) sqlScan(ctx context.Context, root *FeaturesValuesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fvs.fns))
	for _, fn := range fvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
