// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeCreatedProducts holds the string denoting the created_products edge name in mutations.
	EdgeCreatedProducts = "created_products"
	// EdgeUpdatedProducts holds the string denoting the updated_products edge name in mutations.
	EdgeUpdatedProducts = "updated_products"
	// EdgeDeletedProducts holds the string denoting the deleted_products edge name in mutations.
	EdgeDeletedProducts = "deleted_products"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "products"
	// ProductsInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "user_products"
	// CreatedProductsTable is the table that holds the created_products relation/edge.
	CreatedProductsTable = "products"
	// CreatedProductsInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	CreatedProductsInverseTable = "products"
	// CreatedProductsColumn is the table column denoting the created_products relation/edge.
	CreatedProductsColumn = "user_created_products"
	// UpdatedProductsTable is the table that holds the updated_products relation/edge.
	UpdatedProductsTable = "products"
	// UpdatedProductsInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	UpdatedProductsInverseTable = "products"
	// UpdatedProductsColumn is the table column denoting the updated_products relation/edge.
	UpdatedProductsColumn = "user_updated_products"
	// DeletedProductsTable is the table that holds the deleted_products relation/edge.
	DeletedProductsTable = "products"
	// DeletedProductsInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	DeletedProductsInverseTable = "products"
	// DeletedProductsColumn is the table column denoting the deleted_products relation/edge.
	DeletedProductsColumn = "user_deleted_products"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldName,
	FieldSurname,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SurnameValidator is a validator for the "Surname" field. It is called by the builders before save.
	SurnameValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySurname orders the results by the Surname field.
func BySurname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurname, opts...).ToFunc()
}

// ByProductsCount orders the results by products count.
func ByProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductsStep(), opts...)
	}
}

// ByProducts orders the results by products terms.
func ByProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedProductsCount orders the results by created_products count.
func ByCreatedProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedProductsStep(), opts...)
	}
}

// ByCreatedProducts orders the results by created_products terms.
func ByCreatedProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUpdatedProductsCount orders the results by updated_products count.
func ByUpdatedProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUpdatedProductsStep(), opts...)
	}
}

// ByUpdatedProducts orders the results by updated_products terms.
func ByUpdatedProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeletedProductsCount orders the results by deleted_products count.
func ByDeletedProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeletedProductsStep(), opts...)
	}
}

// ByDeletedProducts orders the results by deleted_products terms.
func ByDeletedProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeletedProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
	)
}
func newCreatedProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedProductsTable, CreatedProductsColumn),
	)
}
func newUpdatedProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UpdatedProductsTable, UpdatedProductsColumn),
	)
}
func newDeletedProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeletedProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeletedProductsTable, DeletedProductsColumn),
	)
}
