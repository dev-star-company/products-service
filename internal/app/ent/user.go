// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "Surname" field.
	Surname string `json:"Surname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Products holds the value of the products edge.
	Products []*Products `json:"products,omitempty"`
	// CreatedProducts holds the value of the created_products edge.
	CreatedProducts []*Products `json:"created_products,omitempty"`
	// UpdatedProducts holds the value of the updated_products edge.
	UpdatedProducts []*Products `json:"updated_products,omitempty"`
	// DeletedProducts holds the value of the deleted_products edge.
	DeletedProducts []*Products `json:"deleted_products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProductsOrErr() ([]*Products, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// CreatedProductsOrErr returns the CreatedProducts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedProductsOrErr() ([]*Products, error) {
	if e.loadedTypes[1] {
		return e.CreatedProducts, nil
	}
	return nil, &NotLoadedError{edge: "created_products"}
}

// UpdatedProductsOrErr returns the UpdatedProducts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UpdatedProductsOrErr() ([]*Products, error) {
	if e.loadedTypes[2] {
		return e.UpdatedProducts, nil
	}
	return nil, &NotLoadedError{edge: "updated_products"}
}

// DeletedProductsOrErr returns the DeletedProducts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DeletedProductsOrErr() ([]*Products, error) {
	if e.loadedTypes[3] {
		return e.DeletedProducts, nil
	}
	return nil, &NotLoadedError{edge: "deleted_products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldSurname:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Surname", values[i])
			} else if value.Valid {
				u.Surname = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the User entity.
func (u *User) QueryProducts() *ProductsQuery {
	return NewUserClient(u.config).QueryProducts(u)
}

// QueryCreatedProducts queries the "created_products" edge of the User entity.
func (u *User) QueryCreatedProducts() *ProductsQuery {
	return NewUserClient(u.config).QueryCreatedProducts(u)
}

// QueryUpdatedProducts queries the "updated_products" edge of the User entity.
func (u *User) QueryUpdatedProducts() *ProductsQuery {
	return NewUserClient(u.config).QueryUpdatedProducts(u)
}

// QueryDeletedProducts queries the "deleted_products" edge of the User entity.
func (u *User) QueryDeletedProducts() *ProductsQuery {
	return NewUserClient(u.config).QueryDeletedProducts(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("Surname=")
	builder.WriteString(u.Surname)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
