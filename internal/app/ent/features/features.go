// Code generated by ent, DO NOT EDIT.

package features

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the features type in the database.
	Label = "features"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldFeatureValueID holds the string denoting the feature_value_id field in the database.
	FieldFeatureValueID = "feature_value_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeFeatureValues holds the string denoting the feature_values edge name in mutations.
	EdgeFeatureValues = "feature_values"
	// EdgeProductHasFeature holds the string denoting the product_has_feature edge name in mutations.
	EdgeProductHasFeature = "product_has_feature"
	// Table holds the table name of the features in the database.
	Table = "features"
	// FeatureValuesTable is the table that holds the feature_values relation/edge.
	FeatureValuesTable = "features_values"
	// FeatureValuesInverseTable is the table name for the FeaturesValues entity.
	// It exists in this package in order to avoid circular dependency with the "featuresvalues" package.
	FeatureValuesInverseTable = "features_values"
	// FeatureValuesColumn is the table column denoting the feature_values relation/edge.
	FeatureValuesColumn = "feature_id"
	// ProductHasFeatureTable is the table that holds the product_has_feature relation/edge.
	ProductHasFeatureTable = "product_has_features"
	// ProductHasFeatureInverseTable is the table name for the ProductHasFeature entity.
	// It exists in this package in order to avoid circular dependency with the "producthasfeature" package.
	ProductHasFeatureInverseTable = "product_has_features"
	// ProductHasFeatureColumn is the table column denoting the product_has_feature relation/edge.
	ProductHasFeatureColumn = "feature_id"
)

// Columns holds all SQL columns for features fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldFeatureValueID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Features queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByFeatureValueID orders the results by the feature_value_id field.
func ByFeatureValueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureValueID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFeatureValuesCount orders the results by feature_values count.
func ByFeatureValuesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeatureValuesStep(), opts...)
	}
}

// ByFeatureValues orders the results by feature_values terms.
func ByFeatureValues(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureValuesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductHasFeatureCount orders the results by product_has_feature count.
func ByProductHasFeatureCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductHasFeatureStep(), opts...)
	}
}

// ByProductHasFeature orders the results by product_has_feature terms.
func ByProductHasFeature(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductHasFeatureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFeatureValuesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureValuesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeatureValuesTable, FeatureValuesColumn),
	)
}
func newProductHasFeatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductHasFeatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductHasFeatureTable, ProductHasFeatureColumn),
	)
}
