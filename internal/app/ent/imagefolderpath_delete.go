// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderPathDelete is the builder for deleting a ImageFolderPath entity.
type ImageFolderPathDelete struct {
	config
	hooks    []Hook
	mutation *ImageFolderPathMutation
}

// Where appends a list predicates to the ImageFolderPathDelete builder.
func (ifpd *ImageFolderPathDelete) Where(ps ...predicate.ImageFolderPath) *ImageFolderPathDelete {
	ifpd.mutation.Where(ps...)
	return ifpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ifpd *ImageFolderPathDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ifpd.sqlExec, ifpd.mutation, ifpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ifpd *ImageFolderPathDelete) ExecX(ctx context.Context) int {
	n, err := ifpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ifpd *ImageFolderPathDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(imagefolderpath.Table, sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt))
	if ps := ifpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ifpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ifpd.mutation.done = true
	return affected, err
}

// ImageFolderPathDeleteOne is the builder for deleting a single ImageFolderPath entity.
type ImageFolderPathDeleteOne struct {
	ifpd *ImageFolderPathDelete
}

// Where appends a list predicates to the ImageFolderPathDelete builder.
func (ifpdo *ImageFolderPathDeleteOne) Where(ps ...predicate.ImageFolderPath) *ImageFolderPathDeleteOne {
	ifpdo.ifpd.mutation.Where(ps...)
	return ifpdo
}

// Exec executes the deletion query.
func (ifpdo *ImageFolderPathDeleteOne) Exec(ctx context.Context) error {
	n, err := ifpdo.ifpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{imagefolderpath.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ifpdo *ImageFolderPathDeleteOne) ExecX(ctx context.Context) {
	if err := ifpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
