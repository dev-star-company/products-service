// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/featuresvaluestypes"
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesValuesUpdate is the builder for updating FeaturesValues entities.
type FeaturesValuesUpdate struct {
	config
	hooks    []Hook
	mutation *FeaturesValuesMutation
}

// Where appends a list predicates to the FeaturesValuesUpdate builder.
func (fvu *FeaturesValuesUpdate) Where(ps ...predicate.FeaturesValues) *FeaturesValuesUpdate {
	fvu.mutation.Where(ps...)
	return fvu
}

// SetDeletedAt sets the "deleted_at" field.
func (fvu *FeaturesValuesUpdate) SetDeletedAt(t time.Time) *FeaturesValuesUpdate {
	fvu.mutation.SetDeletedAt(t)
	return fvu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fvu *FeaturesValuesUpdate) SetNillableDeletedAt(t *time.Time) *FeaturesValuesUpdate {
	if t != nil {
		fvu.SetDeletedAt(*t)
	}
	return fvu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fvu *FeaturesValuesUpdate) ClearDeletedAt() *FeaturesValuesUpdate {
	fvu.mutation.ClearDeletedAt()
	return fvu
}

// SetFeaturesID sets the "features_id" field.
func (fvu *FeaturesValuesUpdate) SetFeaturesID(i int) *FeaturesValuesUpdate {
	fvu.mutation.SetFeaturesID(i)
	return fvu
}

// SetNillableFeaturesID sets the "features_id" field if the given value is not nil.
func (fvu *FeaturesValuesUpdate) SetNillableFeaturesID(i *int) *FeaturesValuesUpdate {
	if i != nil {
		fvu.SetFeaturesID(*i)
	}
	return fvu
}

// SetFeatureUnitValuesID sets the "feature_unit_values_id" field.
func (fvu *FeaturesValuesUpdate) SetFeatureUnitValuesID(i int) *FeaturesValuesUpdate {
	fvu.mutation.SetFeatureUnitValuesID(i)
	return fvu
}

// SetNillableFeatureUnitValuesID sets the "feature_unit_values_id" field if the given value is not nil.
func (fvu *FeaturesValuesUpdate) SetNillableFeatureUnitValuesID(i *int) *FeaturesValuesUpdate {
	if i != nil {
		fvu.SetFeatureUnitValuesID(*i)
	}
	return fvu
}

// ClearFeatureUnitValuesID clears the value of the "feature_unit_values_id" field.
func (fvu *FeaturesValuesUpdate) ClearFeatureUnitValuesID() *FeaturesValuesUpdate {
	fvu.mutation.ClearFeatureUnitValuesID()
	return fvu
}

// SetFeatureValuesTypesID sets the "feature_values_types_id" field.
func (fvu *FeaturesValuesUpdate) SetFeatureValuesTypesID(i int) *FeaturesValuesUpdate {
	fvu.mutation.SetFeatureValuesTypesID(i)
	return fvu
}

// SetNillableFeatureValuesTypesID sets the "feature_values_types_id" field if the given value is not nil.
func (fvu *FeaturesValuesUpdate) SetNillableFeatureValuesTypesID(i *int) *FeaturesValuesUpdate {
	if i != nil {
		fvu.SetFeatureValuesTypesID(*i)
	}
	return fvu
}

// ClearFeatureValuesTypesID clears the value of the "feature_values_types_id" field.
func (fvu *FeaturesValuesUpdate) ClearFeatureValuesTypesID() *FeaturesValuesUpdate {
	fvu.mutation.ClearFeatureValuesTypesID()
	return fvu
}

// SetValue sets the "value" field.
func (fvu *FeaturesValuesUpdate) SetValue(s string) *FeaturesValuesUpdate {
	fvu.mutation.SetValue(s)
	return fvu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (fvu *FeaturesValuesUpdate) SetNillableValue(s *string) *FeaturesValuesUpdate {
	if s != nil {
		fvu.SetValue(*s)
	}
	return fvu
}

// SetFeatures sets the "features" edge to the Features entity.
func (fvu *FeaturesValuesUpdate) SetFeatures(f *Features) *FeaturesValuesUpdate {
	return fvu.SetFeaturesID(f.ID)
}

// SetFeatureUnitValues sets the "feature_unit_values" edge to the FeaturesUnitValues entity.
func (fvu *FeaturesValuesUpdate) SetFeatureUnitValues(f *FeaturesUnitValues) *FeaturesValuesUpdate {
	return fvu.SetFeatureUnitValuesID(f.ID)
}

// SetFeatureValuesTypes sets the "feature_values_types" edge to the FeaturesValuesTypes entity.
func (fvu *FeaturesValuesUpdate) SetFeatureValuesTypes(f *FeaturesValuesTypes) *FeaturesValuesUpdate {
	return fvu.SetFeatureValuesTypesID(f.ID)
}

// Mutation returns the FeaturesValuesMutation object of the builder.
func (fvu *FeaturesValuesUpdate) Mutation() *FeaturesValuesMutation {
	return fvu.mutation
}

// ClearFeatures clears the "features" edge to the Features entity.
func (fvu *FeaturesValuesUpdate) ClearFeatures() *FeaturesValuesUpdate {
	fvu.mutation.ClearFeatures()
	return fvu
}

// ClearFeatureUnitValues clears the "feature_unit_values" edge to the FeaturesUnitValues entity.
func (fvu *FeaturesValuesUpdate) ClearFeatureUnitValues() *FeaturesValuesUpdate {
	fvu.mutation.ClearFeatureUnitValues()
	return fvu
}

// ClearFeatureValuesTypes clears the "feature_values_types" edge to the FeaturesValuesTypes entity.
func (fvu *FeaturesValuesUpdate) ClearFeatureValuesTypes() *FeaturesValuesUpdate {
	fvu.mutation.ClearFeatureValuesTypes()
	return fvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fvu *FeaturesValuesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fvu.sqlSave, fvu.mutation, fvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fvu *FeaturesValuesUpdate) SaveX(ctx context.Context) int {
	affected, err := fvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fvu *FeaturesValuesUpdate) Exec(ctx context.Context) error {
	_, err := fvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvu *FeaturesValuesUpdate) ExecX(ctx context.Context) {
	if err := fvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvu *FeaturesValuesUpdate) check() error {
	if fvu.mutation.FeaturesCleared() && len(fvu.mutation.FeaturesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeaturesValues.features"`)
	}
	return nil
}

func (fvu *FeaturesValuesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(featuresvalues.Table, featuresvalues.Columns, sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt))
	if ps := fvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fvu.mutation.DeletedAt(); ok {
		_spec.SetField(featuresvalues.FieldDeletedAt, field.TypeTime, value)
	}
	if fvu.mutation.DeletedAtCleared() {
		_spec.ClearField(featuresvalues.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fvu.mutation.Value(); ok {
		_spec.SetField(featuresvalues.FieldValue, field.TypeString, value)
	}
	if fvu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeaturesTable,
			Columns: []string{featuresvalues.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeaturesTable,
			Columns: []string{featuresvalues.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvu.mutation.FeatureUnitValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureUnitValuesTable,
			Columns: []string{featuresvalues.FeatureUnitValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvu.mutation.FeatureUnitValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureUnitValuesTable,
			Columns: []string{featuresvalues.FeatureUnitValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvu.mutation.FeatureValuesTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureValuesTypesTable,
			Columns: []string{featuresvalues.FeatureValuesTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvu.mutation.FeatureValuesTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureValuesTypesTable,
			Columns: []string{featuresvalues.FeatureValuesTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuresvalues.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fvu.mutation.done = true
	return n, nil
}

// FeaturesValuesUpdateOne is the builder for updating a single FeaturesValues entity.
type FeaturesValuesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeaturesValuesMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (fvuo *FeaturesValuesUpdateOne) SetDeletedAt(t time.Time) *FeaturesValuesUpdateOne {
	fvuo.mutation.SetDeletedAt(t)
	return fvuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fvuo *FeaturesValuesUpdateOne) SetNillableDeletedAt(t *time.Time) *FeaturesValuesUpdateOne {
	if t != nil {
		fvuo.SetDeletedAt(*t)
	}
	return fvuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fvuo *FeaturesValuesUpdateOne) ClearDeletedAt() *FeaturesValuesUpdateOne {
	fvuo.mutation.ClearDeletedAt()
	return fvuo
}

// SetFeaturesID sets the "features_id" field.
func (fvuo *FeaturesValuesUpdateOne) SetFeaturesID(i int) *FeaturesValuesUpdateOne {
	fvuo.mutation.SetFeaturesID(i)
	return fvuo
}

// SetNillableFeaturesID sets the "features_id" field if the given value is not nil.
func (fvuo *FeaturesValuesUpdateOne) SetNillableFeaturesID(i *int) *FeaturesValuesUpdateOne {
	if i != nil {
		fvuo.SetFeaturesID(*i)
	}
	return fvuo
}

// SetFeatureUnitValuesID sets the "feature_unit_values_id" field.
func (fvuo *FeaturesValuesUpdateOne) SetFeatureUnitValuesID(i int) *FeaturesValuesUpdateOne {
	fvuo.mutation.SetFeatureUnitValuesID(i)
	return fvuo
}

// SetNillableFeatureUnitValuesID sets the "feature_unit_values_id" field if the given value is not nil.
func (fvuo *FeaturesValuesUpdateOne) SetNillableFeatureUnitValuesID(i *int) *FeaturesValuesUpdateOne {
	if i != nil {
		fvuo.SetFeatureUnitValuesID(*i)
	}
	return fvuo
}

// ClearFeatureUnitValuesID clears the value of the "feature_unit_values_id" field.
func (fvuo *FeaturesValuesUpdateOne) ClearFeatureUnitValuesID() *FeaturesValuesUpdateOne {
	fvuo.mutation.ClearFeatureUnitValuesID()
	return fvuo
}

// SetFeatureValuesTypesID sets the "feature_values_types_id" field.
func (fvuo *FeaturesValuesUpdateOne) SetFeatureValuesTypesID(i int) *FeaturesValuesUpdateOne {
	fvuo.mutation.SetFeatureValuesTypesID(i)
	return fvuo
}

// SetNillableFeatureValuesTypesID sets the "feature_values_types_id" field if the given value is not nil.
func (fvuo *FeaturesValuesUpdateOne) SetNillableFeatureValuesTypesID(i *int) *FeaturesValuesUpdateOne {
	if i != nil {
		fvuo.SetFeatureValuesTypesID(*i)
	}
	return fvuo
}

// ClearFeatureValuesTypesID clears the value of the "feature_values_types_id" field.
func (fvuo *FeaturesValuesUpdateOne) ClearFeatureValuesTypesID() *FeaturesValuesUpdateOne {
	fvuo.mutation.ClearFeatureValuesTypesID()
	return fvuo
}

// SetValue sets the "value" field.
func (fvuo *FeaturesValuesUpdateOne) SetValue(s string) *FeaturesValuesUpdateOne {
	fvuo.mutation.SetValue(s)
	return fvuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (fvuo *FeaturesValuesUpdateOne) SetNillableValue(s *string) *FeaturesValuesUpdateOne {
	if s != nil {
		fvuo.SetValue(*s)
	}
	return fvuo
}

// SetFeatures sets the "features" edge to the Features entity.
func (fvuo *FeaturesValuesUpdateOne) SetFeatures(f *Features) *FeaturesValuesUpdateOne {
	return fvuo.SetFeaturesID(f.ID)
}

// SetFeatureUnitValues sets the "feature_unit_values" edge to the FeaturesUnitValues entity.
func (fvuo *FeaturesValuesUpdateOne) SetFeatureUnitValues(f *FeaturesUnitValues) *FeaturesValuesUpdateOne {
	return fvuo.SetFeatureUnitValuesID(f.ID)
}

// SetFeatureValuesTypes sets the "feature_values_types" edge to the FeaturesValuesTypes entity.
func (fvuo *FeaturesValuesUpdateOne) SetFeatureValuesTypes(f *FeaturesValuesTypes) *FeaturesValuesUpdateOne {
	return fvuo.SetFeatureValuesTypesID(f.ID)
}

// Mutation returns the FeaturesValuesMutation object of the builder.
func (fvuo *FeaturesValuesUpdateOne) Mutation() *FeaturesValuesMutation {
	return fvuo.mutation
}

// ClearFeatures clears the "features" edge to the Features entity.
func (fvuo *FeaturesValuesUpdateOne) ClearFeatures() *FeaturesValuesUpdateOne {
	fvuo.mutation.ClearFeatures()
	return fvuo
}

// ClearFeatureUnitValues clears the "feature_unit_values" edge to the FeaturesUnitValues entity.
func (fvuo *FeaturesValuesUpdateOne) ClearFeatureUnitValues() *FeaturesValuesUpdateOne {
	fvuo.mutation.ClearFeatureUnitValues()
	return fvuo
}

// ClearFeatureValuesTypes clears the "feature_values_types" edge to the FeaturesValuesTypes entity.
func (fvuo *FeaturesValuesUpdateOne) ClearFeatureValuesTypes() *FeaturesValuesUpdateOne {
	fvuo.mutation.ClearFeatureValuesTypes()
	return fvuo
}

// Where appends a list predicates to the FeaturesValuesUpdate builder.
func (fvuo *FeaturesValuesUpdateOne) Where(ps ...predicate.FeaturesValues) *FeaturesValuesUpdateOne {
	fvuo.mutation.Where(ps...)
	return fvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fvuo *FeaturesValuesUpdateOne) Select(field string, fields ...string) *FeaturesValuesUpdateOne {
	fvuo.fields = append([]string{field}, fields...)
	return fvuo
}

// Save executes the query and returns the updated FeaturesValues entity.
func (fvuo *FeaturesValuesUpdateOne) Save(ctx context.Context) (*FeaturesValues, error) {
	return withHooks(ctx, fvuo.sqlSave, fvuo.mutation, fvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fvuo *FeaturesValuesUpdateOne) SaveX(ctx context.Context) *FeaturesValues {
	node, err := fvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fvuo *FeaturesValuesUpdateOne) Exec(ctx context.Context) error {
	_, err := fvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvuo *FeaturesValuesUpdateOne) ExecX(ctx context.Context) {
	if err := fvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvuo *FeaturesValuesUpdateOne) check() error {
	if fvuo.mutation.FeaturesCleared() && len(fvuo.mutation.FeaturesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FeaturesValues.features"`)
	}
	return nil
}

func (fvuo *FeaturesValuesUpdateOne) sqlSave(ctx context.Context) (_node *FeaturesValues, err error) {
	if err := fvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(featuresvalues.Table, featuresvalues.Columns, sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt))
	id, ok := fvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeaturesValues.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featuresvalues.FieldID)
		for _, f := range fields {
			if !featuresvalues.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != featuresvalues.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fvuo.mutation.DeletedAt(); ok {
		_spec.SetField(featuresvalues.FieldDeletedAt, field.TypeTime, value)
	}
	if fvuo.mutation.DeletedAtCleared() {
		_spec.ClearField(featuresvalues.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fvuo.mutation.Value(); ok {
		_spec.SetField(featuresvalues.FieldValue, field.TypeString, value)
	}
	if fvuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeaturesTable,
			Columns: []string{featuresvalues.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeaturesTable,
			Columns: []string{featuresvalues.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvuo.mutation.FeatureUnitValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureUnitValuesTable,
			Columns: []string{featuresvalues.FeatureUnitValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvuo.mutation.FeatureUnitValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureUnitValuesTable,
			Columns: []string{featuresvalues.FeatureUnitValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvuo.mutation.FeatureValuesTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureValuesTypesTable,
			Columns: []string{featuresvalues.FeatureValuesTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvuo.mutation.FeatureValuesTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureValuesTypesTable,
			Columns: []string{featuresvalues.FeatureValuesTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeaturesValues{config: fvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuresvalues.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fvuo.mutation.done = true
	return _node, nil
}
