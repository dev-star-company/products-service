// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/infotypes"
	"products-service/internal/app/ent/productinfo"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductInfo is the model entity for the ProductInfo schema.
type ProductInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// InfoTypesID holds the value of the "info_types_id" field.
	InfoTypesID *int `json:"info_types_id,omitempty"`
	// Value holds the value of the "value" field.
	Value *string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductInfoQuery when eager-loading is set.
	Edges                              ProductInfoEdges `json:"edges"`
	features_values_types_product_info *int
	selectValues                       sql.SelectValues
}

// ProductInfoEdges holds the relations/edges for other nodes in the graph.
type ProductInfoEdges struct {
	// InfoType holds the value of the info_type edge.
	InfoType *InfoTypes `json:"info_type,omitempty"`
	// Products holds the value of the products edge.
	Products []*ProductHasInfo `json:"products,omitempty"`
	// ProductHasInfo holds the value of the product_has_info edge.
	ProductHasInfo []*ProductHasInfo `json:"product_has_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// InfoTypeOrErr returns the InfoType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductInfoEdges) InfoTypeOrErr() (*InfoTypes, error) {
	if e.InfoType != nil {
		return e.InfoType, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: infotypes.Label}
	}
	return nil, &NotLoadedError{edge: "info_type"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e ProductInfoEdges) ProductsOrErr() ([]*ProductHasInfo, error) {
	if e.loadedTypes[1] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// ProductHasInfoOrErr returns the ProductHasInfo value or an error if the edge
// was not loaded in eager-loading.
func (e ProductInfoEdges) ProductHasInfoOrErr() ([]*ProductHasInfo, error) {
	if e.loadedTypes[2] {
		return e.ProductHasInfo, nil
	}
	return nil, &NotLoadedError{edge: "product_has_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productinfo.FieldID, productinfo.FieldCreatedBy, productinfo.FieldUpdatedBy, productinfo.FieldDeletedBy, productinfo.FieldInfoTypesID:
			values[i] = new(sql.NullInt64)
		case productinfo.FieldValue:
			values[i] = new(sql.NullString)
		case productinfo.FieldCreatedAt, productinfo.FieldUpdatedAt, productinfo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case productinfo.ForeignKeys[0]: // features_values_types_product_info
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductInfo fields.
func (pi *ProductInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case productinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case productinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case productinfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pi.DeletedAt = new(time.Time)
				*pi.DeletedAt = value.Time
			}
		case productinfo.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pi.CreatedBy = int(value.Int64)
			}
		case productinfo.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pi.UpdatedBy = int(value.Int64)
			}
		case productinfo.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pi.DeletedBy = new(int)
				*pi.DeletedBy = int(value.Int64)
			}
		case productinfo.FieldInfoTypesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field info_types_id", values[i])
			} else if value.Valid {
				pi.InfoTypesID = new(int)
				*pi.InfoTypesID = int(value.Int64)
			}
		case productinfo.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pi.Value = new(string)
				*pi.Value = value.String
			}
		case productinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field features_values_types_product_info", value)
			} else if value.Valid {
				pi.features_values_types_product_info = new(int)
				*pi.features_values_types_product_info = int(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the ProductInfo.
// This includes values selected through modifiers, order, etc.
func (pi *ProductInfo) GetValue(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryInfoType queries the "info_type" edge of the ProductInfo entity.
func (pi *ProductInfo) QueryInfoType() *InfoTypesQuery {
	return NewProductInfoClient(pi.config).QueryInfoType(pi)
}

// QueryProducts queries the "products" edge of the ProductInfo entity.
func (pi *ProductInfo) QueryProducts() *ProductHasInfoQuery {
	return NewProductInfoClient(pi.config).QueryProducts(pi)
}

// QueryProductHasInfo queries the "product_has_info" edge of the ProductInfo entity.
func (pi *ProductInfo) QueryProductHasInfo() *ProductHasInfoQuery {
	return NewProductInfoClient(pi.config).QueryProductHasInfo(pi)
}

// Update returns a builder for updating this ProductInfo.
// Note that you need to call ProductInfo.Unwrap() before calling this method if this ProductInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProductInfo) Update() *ProductInfoUpdateOne {
	return NewProductInfoClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProductInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProductInfo) Unwrap() *ProductInfo {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductInfo is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProductInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ProductInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pi.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pi.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pi.UpdatedBy))
	builder.WriteString(", ")
	if v := pi.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pi.InfoTypesID; v != nil {
		builder.WriteString("info_types_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pi.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProductInfos is a parsable slice of ProductInfo.
type ProductInfos []*ProductInfo
