// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasfeature"
	"products-service/internal/app/ent/products"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasFeatureUpdate is the builder for updating ProductHasFeature entities.
type ProductHasFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *ProductHasFeatureMutation
}

// Where appends a list predicates to the ProductHasFeatureUpdate builder.
func (phfu *ProductHasFeatureUpdate) Where(ps ...predicate.ProductHasFeature) *ProductHasFeatureUpdate {
	phfu.mutation.Where(ps...)
	return phfu
}

// SetDeletedAt sets the "deleted_at" field.
func (phfu *ProductHasFeatureUpdate) SetDeletedAt(t time.Time) *ProductHasFeatureUpdate {
	phfu.mutation.SetDeletedAt(t)
	return phfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phfu *ProductHasFeatureUpdate) SetNillableDeletedAt(t *time.Time) *ProductHasFeatureUpdate {
	if t != nil {
		phfu.SetDeletedAt(*t)
	}
	return phfu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phfu *ProductHasFeatureUpdate) ClearDeletedAt() *ProductHasFeatureUpdate {
	phfu.mutation.ClearDeletedAt()
	return phfu
}

// SetFeatureID sets the "feature_id" field.
func (phfu *ProductHasFeatureUpdate) SetFeatureID(i int) *ProductHasFeatureUpdate {
	phfu.mutation.SetFeatureID(i)
	return phfu
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (phfu *ProductHasFeatureUpdate) SetNillableFeatureID(i *int) *ProductHasFeatureUpdate {
	if i != nil {
		phfu.SetFeatureID(*i)
	}
	return phfu
}

// SetProductID sets the "product_id" field.
func (phfu *ProductHasFeatureUpdate) SetProductID(i int) *ProductHasFeatureUpdate {
	phfu.mutation.SetProductID(i)
	return phfu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phfu *ProductHasFeatureUpdate) SetNillableProductID(i *int) *ProductHasFeatureUpdate {
	if i != nil {
		phfu.SetProductID(*i)
	}
	return phfu
}

// ClearProductID clears the value of the "product_id" field.
func (phfu *ProductHasFeatureUpdate) ClearProductID() *ProductHasFeatureUpdate {
	phfu.mutation.ClearProductID()
	return phfu
}

// SetProductsID sets the "products" edge to the Products entity by ID.
func (phfu *ProductHasFeatureUpdate) SetProductsID(id int) *ProductHasFeatureUpdate {
	phfu.mutation.SetProductsID(id)
	return phfu
}

// SetNillableProductsID sets the "products" edge to the Products entity by ID if the given value is not nil.
func (phfu *ProductHasFeatureUpdate) SetNillableProductsID(id *int) *ProductHasFeatureUpdate {
	if id != nil {
		phfu = phfu.SetProductsID(*id)
	}
	return phfu
}

// SetProducts sets the "products" edge to the Products entity.
func (phfu *ProductHasFeatureUpdate) SetProducts(p *Products) *ProductHasFeatureUpdate {
	return phfu.SetProductsID(p.ID)
}

// SetFeaturesID sets the "features" edge to the Features entity by ID.
func (phfu *ProductHasFeatureUpdate) SetFeaturesID(id int) *ProductHasFeatureUpdate {
	phfu.mutation.SetFeaturesID(id)
	return phfu
}

// SetFeatures sets the "features" edge to the Features entity.
func (phfu *ProductHasFeatureUpdate) SetFeatures(f *Features) *ProductHasFeatureUpdate {
	return phfu.SetFeaturesID(f.ID)
}

// Mutation returns the ProductHasFeatureMutation object of the builder.
func (phfu *ProductHasFeatureUpdate) Mutation() *ProductHasFeatureMutation {
	return phfu.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (phfu *ProductHasFeatureUpdate) ClearProducts() *ProductHasFeatureUpdate {
	phfu.mutation.ClearProducts()
	return phfu
}

// ClearFeatures clears the "features" edge to the Features entity.
func (phfu *ProductHasFeatureUpdate) ClearFeatures() *ProductHasFeatureUpdate {
	phfu.mutation.ClearFeatures()
	return phfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phfu *ProductHasFeatureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, phfu.sqlSave, phfu.mutation, phfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phfu *ProductHasFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := phfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phfu *ProductHasFeatureUpdate) Exec(ctx context.Context) error {
	_, err := phfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phfu *ProductHasFeatureUpdate) ExecX(ctx context.Context) {
	if err := phfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phfu *ProductHasFeatureUpdate) check() error {
	if phfu.mutation.FeaturesCleared() && len(phfu.mutation.FeaturesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductHasFeature.features"`)
	}
	return nil
}

func (phfu *ProductHasFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(producthasfeature.Table, producthasfeature.Columns, sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt))
	if ps := phfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phfu.mutation.DeletedAt(); ok {
		_spec.SetField(producthasfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if phfu.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasfeature.FieldDeletedAt, field.TypeTime)
	}
	if phfu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.ProductsTable,
			Columns: []string{producthasfeature.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phfu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.ProductsTable,
			Columns: []string{producthasfeature.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phfu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.FeaturesTable,
			Columns: []string{producthasfeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phfu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.FeaturesTable,
			Columns: []string{producthasfeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phfu.mutation.done = true
	return n, nil
}

// ProductHasFeatureUpdateOne is the builder for updating a single ProductHasFeature entity.
type ProductHasFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductHasFeatureMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (phfuo *ProductHasFeatureUpdateOne) SetDeletedAt(t time.Time) *ProductHasFeatureUpdateOne {
	phfuo.mutation.SetDeletedAt(t)
	return phfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phfuo *ProductHasFeatureUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductHasFeatureUpdateOne {
	if t != nil {
		phfuo.SetDeletedAt(*t)
	}
	return phfuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phfuo *ProductHasFeatureUpdateOne) ClearDeletedAt() *ProductHasFeatureUpdateOne {
	phfuo.mutation.ClearDeletedAt()
	return phfuo
}

// SetFeatureID sets the "feature_id" field.
func (phfuo *ProductHasFeatureUpdateOne) SetFeatureID(i int) *ProductHasFeatureUpdateOne {
	phfuo.mutation.SetFeatureID(i)
	return phfuo
}

// SetNillableFeatureID sets the "feature_id" field if the given value is not nil.
func (phfuo *ProductHasFeatureUpdateOne) SetNillableFeatureID(i *int) *ProductHasFeatureUpdateOne {
	if i != nil {
		phfuo.SetFeatureID(*i)
	}
	return phfuo
}

// SetProductID sets the "product_id" field.
func (phfuo *ProductHasFeatureUpdateOne) SetProductID(i int) *ProductHasFeatureUpdateOne {
	phfuo.mutation.SetProductID(i)
	return phfuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phfuo *ProductHasFeatureUpdateOne) SetNillableProductID(i *int) *ProductHasFeatureUpdateOne {
	if i != nil {
		phfuo.SetProductID(*i)
	}
	return phfuo
}

// ClearProductID clears the value of the "product_id" field.
func (phfuo *ProductHasFeatureUpdateOne) ClearProductID() *ProductHasFeatureUpdateOne {
	phfuo.mutation.ClearProductID()
	return phfuo
}

// SetProductsID sets the "products" edge to the Products entity by ID.
func (phfuo *ProductHasFeatureUpdateOne) SetProductsID(id int) *ProductHasFeatureUpdateOne {
	phfuo.mutation.SetProductsID(id)
	return phfuo
}

// SetNillableProductsID sets the "products" edge to the Products entity by ID if the given value is not nil.
func (phfuo *ProductHasFeatureUpdateOne) SetNillableProductsID(id *int) *ProductHasFeatureUpdateOne {
	if id != nil {
		phfuo = phfuo.SetProductsID(*id)
	}
	return phfuo
}

// SetProducts sets the "products" edge to the Products entity.
func (phfuo *ProductHasFeatureUpdateOne) SetProducts(p *Products) *ProductHasFeatureUpdateOne {
	return phfuo.SetProductsID(p.ID)
}

// SetFeaturesID sets the "features" edge to the Features entity by ID.
func (phfuo *ProductHasFeatureUpdateOne) SetFeaturesID(id int) *ProductHasFeatureUpdateOne {
	phfuo.mutation.SetFeaturesID(id)
	return phfuo
}

// SetFeatures sets the "features" edge to the Features entity.
func (phfuo *ProductHasFeatureUpdateOne) SetFeatures(f *Features) *ProductHasFeatureUpdateOne {
	return phfuo.SetFeaturesID(f.ID)
}

// Mutation returns the ProductHasFeatureMutation object of the builder.
func (phfuo *ProductHasFeatureUpdateOne) Mutation() *ProductHasFeatureMutation {
	return phfuo.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (phfuo *ProductHasFeatureUpdateOne) ClearProducts() *ProductHasFeatureUpdateOne {
	phfuo.mutation.ClearProducts()
	return phfuo
}

// ClearFeatures clears the "features" edge to the Features entity.
func (phfuo *ProductHasFeatureUpdateOne) ClearFeatures() *ProductHasFeatureUpdateOne {
	phfuo.mutation.ClearFeatures()
	return phfuo
}

// Where appends a list predicates to the ProductHasFeatureUpdate builder.
func (phfuo *ProductHasFeatureUpdateOne) Where(ps ...predicate.ProductHasFeature) *ProductHasFeatureUpdateOne {
	phfuo.mutation.Where(ps...)
	return phfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phfuo *ProductHasFeatureUpdateOne) Select(field string, fields ...string) *ProductHasFeatureUpdateOne {
	phfuo.fields = append([]string{field}, fields...)
	return phfuo
}

// Save executes the query and returns the updated ProductHasFeature entity.
func (phfuo *ProductHasFeatureUpdateOne) Save(ctx context.Context) (*ProductHasFeature, error) {
	return withHooks(ctx, phfuo.sqlSave, phfuo.mutation, phfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phfuo *ProductHasFeatureUpdateOne) SaveX(ctx context.Context) *ProductHasFeature {
	node, err := phfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phfuo *ProductHasFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := phfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phfuo *ProductHasFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := phfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phfuo *ProductHasFeatureUpdateOne) check() error {
	if phfuo.mutation.FeaturesCleared() && len(phfuo.mutation.FeaturesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductHasFeature.features"`)
	}
	return nil
}

func (phfuo *ProductHasFeatureUpdateOne) sqlSave(ctx context.Context) (_node *ProductHasFeature, err error) {
	if err := phfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(producthasfeature.Table, producthasfeature.Columns, sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt))
	id, ok := phfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductHasFeature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producthasfeature.FieldID)
		for _, f := range fields {
			if !producthasfeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != producthasfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phfuo.mutation.DeletedAt(); ok {
		_spec.SetField(producthasfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if phfuo.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasfeature.FieldDeletedAt, field.TypeTime)
	}
	if phfuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.ProductsTable,
			Columns: []string{producthasfeature.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phfuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.ProductsTable,
			Columns: []string{producthasfeature.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phfuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.FeaturesTable,
			Columns: []string{producthasfeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phfuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.FeaturesTable,
			Columns: []string{producthasfeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductHasFeature{config: phfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phfuo.mutation.done = true
	return _node, nil
}
