// Code generated by ent, DO NOT EDIT.

package producthasinfo

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldDeletedBy, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldProductID, v))
}

// ProductInfoID applies equality check predicate on the "product_info_id" field. It's identical to ProductInfoIDEQ.
func ProductInfoID(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldProductInfoID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLTE(FieldUpdatedBy, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotNull(FieldDeletedBy))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotNull(FieldProductID))
}

// ProductInfoIDEQ applies the EQ predicate on the "product_info_id" field.
func ProductInfoIDEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldEQ(FieldProductInfoID, v))
}

// ProductInfoIDNEQ applies the NEQ predicate on the "product_info_id" field.
func ProductInfoIDNEQ(v int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNEQ(FieldProductInfoID, v))
}

// ProductInfoIDIn applies the In predicate on the "product_info_id" field.
func ProductInfoIDIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIn(FieldProductInfoID, vs...))
}

// ProductInfoIDNotIn applies the NotIn predicate on the "product_info_id" field.
func ProductInfoIDNotIn(vs ...int) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotIn(FieldProductInfoID, vs...))
}

// ProductInfoIDIsNil applies the IsNil predicate on the "product_info_id" field.
func ProductInfoIDIsNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldIsNull(FieldProductInfoID))
}

// ProductInfoIDNotNil applies the NotNil predicate on the "product_info_id" field.
func ProductInfoIDNotNil() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.FieldNotNull(FieldProductInfoID))
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Products) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductInfo applies the HasEdge predicate on the "product_info" edge.
func HasProductInfo() predicate.ProductHasInfo {
	return predicate.ProductHasInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductInfoTable, ProductInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductInfoWith applies the HasEdge predicate on the "product_info" edge with a given conditions (other predicates).
func HasProductInfoWith(preds ...predicate.ProductInfo) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(func(s *sql.Selector) {
		step := newProductInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductHasInfo) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductHasInfo) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductHasInfo) predicate.ProductHasInfo {
	return predicate.ProductHasInfo(sql.NotPredicates(p))
}
