// Code generated by ent, DO NOT EDIT.

package producthasinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the producthasinfo type in the database.
	Label = "product_has_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldProductInfoID holds the string denoting the product_info_id field in the database.
	FieldProductInfoID = "product_info_id"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeProductInfo holds the string denoting the product_info edge name in mutations.
	EdgeProductInfo = "product_info"
	// Table holds the table name of the producthasinfo in the database.
	Table = "product_has_infos"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "product_has_infos"
	// ProductsInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "product_id"
	// ProductInfoTable is the table that holds the product_info relation/edge.
	ProductInfoTable = "product_has_infos"
	// ProductInfoInverseTable is the table name for the ProductInfo entity.
	// It exists in this package in order to avoid circular dependency with the "productinfo" package.
	ProductInfoInverseTable = "product_infos"
	// ProductInfoColumn is the table column denoting the product_info relation/edge.
	ProductInfoColumn = "product_info_id"
)

// Columns holds all SQL columns for producthasinfo fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldProductID,
	FieldProductInfoID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProductHasInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByProductInfoID orders the results by the product_info_id field.
func ByProductInfoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductInfoID, opts...).ToFunc()
}

// ByProductsField orders the results by products field.
func ByProductsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductInfoField orders the results by product_info field.
func ByProductInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductInfoStep(), sql.OrderByField(field, opts...))
	}
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
	)
}
func newProductInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductInfoTable, ProductInfoColumn),
	)
}
