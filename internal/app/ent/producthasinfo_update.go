// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasinfo"
	"products-service/internal/app/ent/productinfo"
	"products-service/internal/app/ent/products"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasInfoUpdate is the builder for updating ProductHasInfo entities.
type ProductHasInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ProductHasInfoMutation
}

// Where appends a list predicates to the ProductHasInfoUpdate builder.
func (phiu *ProductHasInfoUpdate) Where(ps ...predicate.ProductHasInfo) *ProductHasInfoUpdate {
	phiu.mutation.Where(ps...)
	return phiu
}

// SetDeletedAt sets the "deleted_at" field.
func (phiu *ProductHasInfoUpdate) SetDeletedAt(t time.Time) *ProductHasInfoUpdate {
	phiu.mutation.SetDeletedAt(t)
	return phiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phiu *ProductHasInfoUpdate) SetNillableDeletedAt(t *time.Time) *ProductHasInfoUpdate {
	if t != nil {
		phiu.SetDeletedAt(*t)
	}
	return phiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phiu *ProductHasInfoUpdate) ClearDeletedAt() *ProductHasInfoUpdate {
	phiu.mutation.ClearDeletedAt()
	return phiu
}

// SetProductID sets the "product_id" field.
func (phiu *ProductHasInfoUpdate) SetProductID(i int) *ProductHasInfoUpdate {
	phiu.mutation.SetProductID(i)
	return phiu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phiu *ProductHasInfoUpdate) SetNillableProductID(i *int) *ProductHasInfoUpdate {
	if i != nil {
		phiu.SetProductID(*i)
	}
	return phiu
}

// ClearProductID clears the value of the "product_id" field.
func (phiu *ProductHasInfoUpdate) ClearProductID() *ProductHasInfoUpdate {
	phiu.mutation.ClearProductID()
	return phiu
}

// SetProductInfoID sets the "product_info_id" field.
func (phiu *ProductHasInfoUpdate) SetProductInfoID(i int) *ProductHasInfoUpdate {
	phiu.mutation.SetProductInfoID(i)
	return phiu
}

// SetNillableProductInfoID sets the "product_info_id" field if the given value is not nil.
func (phiu *ProductHasInfoUpdate) SetNillableProductInfoID(i *int) *ProductHasInfoUpdate {
	if i != nil {
		phiu.SetProductInfoID(*i)
	}
	return phiu
}

// ClearProductInfoID clears the value of the "product_info_id" field.
func (phiu *ProductHasInfoUpdate) ClearProductInfoID() *ProductHasInfoUpdate {
	phiu.mutation.ClearProductInfoID()
	return phiu
}

// SetProductsID sets the "products" edge to the Products entity by ID.
func (phiu *ProductHasInfoUpdate) SetProductsID(id int) *ProductHasInfoUpdate {
	phiu.mutation.SetProductsID(id)
	return phiu
}

// SetNillableProductsID sets the "products" edge to the Products entity by ID if the given value is not nil.
func (phiu *ProductHasInfoUpdate) SetNillableProductsID(id *int) *ProductHasInfoUpdate {
	if id != nil {
		phiu = phiu.SetProductsID(*id)
	}
	return phiu
}

// SetProducts sets the "products" edge to the Products entity.
func (phiu *ProductHasInfoUpdate) SetProducts(p *Products) *ProductHasInfoUpdate {
	return phiu.SetProductsID(p.ID)
}

// SetProductInfo sets the "product_info" edge to the ProductInfo entity.
func (phiu *ProductHasInfoUpdate) SetProductInfo(p *ProductInfo) *ProductHasInfoUpdate {
	return phiu.SetProductInfoID(p.ID)
}

// Mutation returns the ProductHasInfoMutation object of the builder.
func (phiu *ProductHasInfoUpdate) Mutation() *ProductHasInfoMutation {
	return phiu.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (phiu *ProductHasInfoUpdate) ClearProducts() *ProductHasInfoUpdate {
	phiu.mutation.ClearProducts()
	return phiu
}

// ClearProductInfo clears the "product_info" edge to the ProductInfo entity.
func (phiu *ProductHasInfoUpdate) ClearProductInfo() *ProductHasInfoUpdate {
	phiu.mutation.ClearProductInfo()
	return phiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phiu *ProductHasInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, phiu.sqlSave, phiu.mutation, phiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phiu *ProductHasInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := phiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phiu *ProductHasInfoUpdate) Exec(ctx context.Context) error {
	_, err := phiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phiu *ProductHasInfoUpdate) ExecX(ctx context.Context) {
	if err := phiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phiu *ProductHasInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(producthasinfo.Table, producthasinfo.Columns, sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt))
	if ps := phiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phiu.mutation.DeletedAt(); ok {
		_spec.SetField(producthasinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if phiu.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasinfo.FieldDeletedAt, field.TypeTime)
	}
	if phiu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductsTable,
			Columns: []string{producthasinfo.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductsTable,
			Columns: []string{producthasinfo.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phiu.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductInfoTable,
			Columns: []string{producthasinfo.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiu.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductInfoTable,
			Columns: []string{producthasinfo.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phiu.mutation.done = true
	return n, nil
}

// ProductHasInfoUpdateOne is the builder for updating a single ProductHasInfo entity.
type ProductHasInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductHasInfoMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (phiuo *ProductHasInfoUpdateOne) SetDeletedAt(t time.Time) *ProductHasInfoUpdateOne {
	phiuo.mutation.SetDeletedAt(t)
	return phiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phiuo *ProductHasInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductHasInfoUpdateOne {
	if t != nil {
		phiuo.SetDeletedAt(*t)
	}
	return phiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phiuo *ProductHasInfoUpdateOne) ClearDeletedAt() *ProductHasInfoUpdateOne {
	phiuo.mutation.ClearDeletedAt()
	return phiuo
}

// SetProductID sets the "product_id" field.
func (phiuo *ProductHasInfoUpdateOne) SetProductID(i int) *ProductHasInfoUpdateOne {
	phiuo.mutation.SetProductID(i)
	return phiuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phiuo *ProductHasInfoUpdateOne) SetNillableProductID(i *int) *ProductHasInfoUpdateOne {
	if i != nil {
		phiuo.SetProductID(*i)
	}
	return phiuo
}

// ClearProductID clears the value of the "product_id" field.
func (phiuo *ProductHasInfoUpdateOne) ClearProductID() *ProductHasInfoUpdateOne {
	phiuo.mutation.ClearProductID()
	return phiuo
}

// SetProductInfoID sets the "product_info_id" field.
func (phiuo *ProductHasInfoUpdateOne) SetProductInfoID(i int) *ProductHasInfoUpdateOne {
	phiuo.mutation.SetProductInfoID(i)
	return phiuo
}

// SetNillableProductInfoID sets the "product_info_id" field if the given value is not nil.
func (phiuo *ProductHasInfoUpdateOne) SetNillableProductInfoID(i *int) *ProductHasInfoUpdateOne {
	if i != nil {
		phiuo.SetProductInfoID(*i)
	}
	return phiuo
}

// ClearProductInfoID clears the value of the "product_info_id" field.
func (phiuo *ProductHasInfoUpdateOne) ClearProductInfoID() *ProductHasInfoUpdateOne {
	phiuo.mutation.ClearProductInfoID()
	return phiuo
}

// SetProductsID sets the "products" edge to the Products entity by ID.
func (phiuo *ProductHasInfoUpdateOne) SetProductsID(id int) *ProductHasInfoUpdateOne {
	phiuo.mutation.SetProductsID(id)
	return phiuo
}

// SetNillableProductsID sets the "products" edge to the Products entity by ID if the given value is not nil.
func (phiuo *ProductHasInfoUpdateOne) SetNillableProductsID(id *int) *ProductHasInfoUpdateOne {
	if id != nil {
		phiuo = phiuo.SetProductsID(*id)
	}
	return phiuo
}

// SetProducts sets the "products" edge to the Products entity.
func (phiuo *ProductHasInfoUpdateOne) SetProducts(p *Products) *ProductHasInfoUpdateOne {
	return phiuo.SetProductsID(p.ID)
}

// SetProductInfo sets the "product_info" edge to the ProductInfo entity.
func (phiuo *ProductHasInfoUpdateOne) SetProductInfo(p *ProductInfo) *ProductHasInfoUpdateOne {
	return phiuo.SetProductInfoID(p.ID)
}

// Mutation returns the ProductHasInfoMutation object of the builder.
func (phiuo *ProductHasInfoUpdateOne) Mutation() *ProductHasInfoMutation {
	return phiuo.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (phiuo *ProductHasInfoUpdateOne) ClearProducts() *ProductHasInfoUpdateOne {
	phiuo.mutation.ClearProducts()
	return phiuo
}

// ClearProductInfo clears the "product_info" edge to the ProductInfo entity.
func (phiuo *ProductHasInfoUpdateOne) ClearProductInfo() *ProductHasInfoUpdateOne {
	phiuo.mutation.ClearProductInfo()
	return phiuo
}

// Where appends a list predicates to the ProductHasInfoUpdate builder.
func (phiuo *ProductHasInfoUpdateOne) Where(ps ...predicate.ProductHasInfo) *ProductHasInfoUpdateOne {
	phiuo.mutation.Where(ps...)
	return phiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phiuo *ProductHasInfoUpdateOne) Select(field string, fields ...string) *ProductHasInfoUpdateOne {
	phiuo.fields = append([]string{field}, fields...)
	return phiuo
}

// Save executes the query and returns the updated ProductHasInfo entity.
func (phiuo *ProductHasInfoUpdateOne) Save(ctx context.Context) (*ProductHasInfo, error) {
	return withHooks(ctx, phiuo.sqlSave, phiuo.mutation, phiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phiuo *ProductHasInfoUpdateOne) SaveX(ctx context.Context) *ProductHasInfo {
	node, err := phiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phiuo *ProductHasInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := phiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phiuo *ProductHasInfoUpdateOne) ExecX(ctx context.Context) {
	if err := phiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phiuo *ProductHasInfoUpdateOne) sqlSave(ctx context.Context) (_node *ProductHasInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(producthasinfo.Table, producthasinfo.Columns, sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt))
	id, ok := phiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductHasInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producthasinfo.FieldID)
		for _, f := range fields {
			if !producthasinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != producthasinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phiuo.mutation.DeletedAt(); ok {
		_spec.SetField(producthasinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if phiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasinfo.FieldDeletedAt, field.TypeTime)
	}
	if phiuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductsTable,
			Columns: []string{producthasinfo.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductsTable,
			Columns: []string{producthasinfo.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phiuo.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductInfoTable,
			Columns: []string{producthasinfo.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiuo.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasinfo.ProductInfoTable,
			Columns: []string{producthasinfo.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductHasInfo{config: phiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phiuo.mutation.done = true
	return _node, nil
}
