// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/referencesources"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductReferences is the model entity for the ProductReferences schema.
type ProductReferences struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// ReferenceSourceID holds the value of the "reference_source_id" field.
	ReferenceSourceID *int `json:"reference_source_id,omitempty"`
	// Value holds the value of the "value" field.
	Value *string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductReferencesQuery when eager-loading is set.
	Edges        ProductReferencesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductReferencesEdges holds the relations/edges for other nodes in the graph.
type ProductReferencesEdges struct {
	// ReferenceSources holds the value of the reference_sources edge.
	ReferenceSources *ReferenceSources `json:"reference_sources,omitempty"`
	// Products holds the value of the products edge.
	Products []*Products `json:"products,omitempty"`
	// ProductHasProductReference holds the value of the product_has_product_reference edge.
	ProductHasProductReference []*ProductHasProductReference `json:"product_has_product_reference,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ReferenceSourcesOrErr returns the ReferenceSources value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductReferencesEdges) ReferenceSourcesOrErr() (*ReferenceSources, error) {
	if e.ReferenceSources != nil {
		return e.ReferenceSources, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: referencesources.Label}
	}
	return nil, &NotLoadedError{edge: "reference_sources"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e ProductReferencesEdges) ProductsOrErr() ([]*Products, error) {
	if e.loadedTypes[1] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// ProductHasProductReferenceOrErr returns the ProductHasProductReference value or an error if the edge
// was not loaded in eager-loading.
func (e ProductReferencesEdges) ProductHasProductReferenceOrErr() ([]*ProductHasProductReference, error) {
	if e.loadedTypes[2] {
		return e.ProductHasProductReference, nil
	}
	return nil, &NotLoadedError{edge: "product_has_product_reference"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductReferences) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productreferences.FieldID, productreferences.FieldReferenceSourceID:
			values[i] = new(sql.NullInt64)
		case productreferences.FieldValue:
			values[i] = new(sql.NullString)
		case productreferences.FieldCreatedAt, productreferences.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductReferences fields.
func (pr *ProductReferences) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productreferences.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case productreferences.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case productreferences.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = new(time.Time)
				*pr.DeletedAt = value.Time
			}
		case productreferences.FieldReferenceSourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reference_source_id", values[i])
			} else if value.Valid {
				pr.ReferenceSourceID = new(int)
				*pr.ReferenceSourceID = int(value.Int64)
			}
		case productreferences.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pr.Value = new(string)
				*pr.Value = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the ProductReferences.
// This includes values selected through modifiers, order, etc.
func (pr *ProductReferences) GetValue(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryReferenceSources queries the "reference_sources" edge of the ProductReferences entity.
func (pr *ProductReferences) QueryReferenceSources() *ReferenceSourcesQuery {
	return NewProductReferencesClient(pr.config).QueryReferenceSources(pr)
}

// QueryProducts queries the "products" edge of the ProductReferences entity.
func (pr *ProductReferences) QueryProducts() *ProductsQuery {
	return NewProductReferencesClient(pr.config).QueryProducts(pr)
}

// QueryProductHasProductReference queries the "product_has_product_reference" edge of the ProductReferences entity.
func (pr *ProductReferences) QueryProductHasProductReference() *ProductHasProductReferenceQuery {
	return NewProductReferencesClient(pr.config).QueryProductHasProductReference(pr)
}

// Update returns a builder for updating this ProductReferences.
// Note that you need to call ProductReferences.Unwrap() before calling this method if this ProductReferences
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *ProductReferences) Update() *ProductReferencesUpdateOne {
	return NewProductReferencesClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the ProductReferences entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *ProductReferences) Unwrap() *ProductReferences {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductReferences is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *ProductReferences) String() string {
	var builder strings.Builder
	builder.WriteString("ProductReferences(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.ReferenceSourceID; v != nil {
		builder.WriteString("reference_source_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProductReferencesSlice is a parsable slice of ProductReferences.
type ProductReferencesSlice []*ProductReferences
