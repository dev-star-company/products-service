// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/pricetype"
	"products-service/internal/app/ent/productprices"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PriceTypeUpdate is the builder for updating PriceType entities.
type PriceTypeUpdate struct {
	config
	hooks    []Hook
	mutation *PriceTypeMutation
}

// Where appends a list predicates to the PriceTypeUpdate builder.
func (ptu *PriceTypeUpdate) Where(ps ...predicate.PriceType) *PriceTypeUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetDeletedAt sets the "deleted_at" field.
func (ptu *PriceTypeUpdate) SetDeletedAt(t time.Time) *PriceTypeUpdate {
	ptu.mutation.SetDeletedAt(t)
	return ptu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptu *PriceTypeUpdate) SetNillableDeletedAt(t *time.Time) *PriceTypeUpdate {
	if t != nil {
		ptu.SetDeletedAt(*t)
	}
	return ptu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ptu *PriceTypeUpdate) ClearDeletedAt() *PriceTypeUpdate {
	ptu.mutation.ClearDeletedAt()
	return ptu
}

// SetName sets the "name" field.
func (ptu *PriceTypeUpdate) SetName(s string) *PriceTypeUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *PriceTypeUpdate) SetNillableName(s *string) *PriceTypeUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrices entity by IDs.
func (ptu *PriceTypeUpdate) AddProductPriceIDs(ids ...int) *PriceTypeUpdate {
	ptu.mutation.AddProductPriceIDs(ids...)
	return ptu
}

// AddProductPrices adds the "product_prices" edges to the ProductPrices entity.
func (ptu *PriceTypeUpdate) AddProductPrices(p ...*ProductPrices) *PriceTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddProductPriceIDs(ids...)
}

// Mutation returns the PriceTypeMutation object of the builder.
func (ptu *PriceTypeUpdate) Mutation() *PriceTypeMutation {
	return ptu.mutation
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrices entity.
func (ptu *PriceTypeUpdate) ClearProductPrices() *PriceTypeUpdate {
	ptu.mutation.ClearProductPrices()
	return ptu
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrices entities by IDs.
func (ptu *PriceTypeUpdate) RemoveProductPriceIDs(ids ...int) *PriceTypeUpdate {
	ptu.mutation.RemoveProductPriceIDs(ids...)
	return ptu
}

// RemoveProductPrices removes "product_prices" edges to ProductPrices entities.
func (ptu *PriceTypeUpdate) RemoveProductPrices(p ...*ProductPrices) *PriceTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemoveProductPriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PriceTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PriceTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PriceTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PriceTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptu *PriceTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pricetype.Table, pricetype.Columns, sqlgraph.NewFieldSpec(pricetype.FieldID, field.TypeInt))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.DeletedAt(); ok {
		_spec.SetField(pricetype.FieldDeletedAt, field.TypeTime, value)
	}
	if ptu.mutation.DeletedAtCleared() {
		_spec.ClearField(pricetype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(pricetype.FieldName, field.TypeString, value)
	}
	if ptu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pricetype.ProductPricesTable,
			Columns: []string{pricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !ptu.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pricetype.ProductPricesTable,
			Columns: []string{pricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pricetype.ProductPricesTable,
			Columns: []string{pricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pricetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PriceTypeUpdateOne is the builder for updating a single PriceType entity.
type PriceTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceTypeMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ptuo *PriceTypeUpdateOne) SetDeletedAt(t time.Time) *PriceTypeUpdateOne {
	ptuo.mutation.SetDeletedAt(t)
	return ptuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptuo *PriceTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *PriceTypeUpdateOne {
	if t != nil {
		ptuo.SetDeletedAt(*t)
	}
	return ptuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ptuo *PriceTypeUpdateOne) ClearDeletedAt() *PriceTypeUpdateOne {
	ptuo.mutation.ClearDeletedAt()
	return ptuo
}

// SetName sets the "name" field.
func (ptuo *PriceTypeUpdateOne) SetName(s string) *PriceTypeUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *PriceTypeUpdateOne) SetNillableName(s *string) *PriceTypeUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// AddProductPriceIDs adds the "product_prices" edge to the ProductPrices entity by IDs.
func (ptuo *PriceTypeUpdateOne) AddProductPriceIDs(ids ...int) *PriceTypeUpdateOne {
	ptuo.mutation.AddProductPriceIDs(ids...)
	return ptuo
}

// AddProductPrices adds the "product_prices" edges to the ProductPrices entity.
func (ptuo *PriceTypeUpdateOne) AddProductPrices(p ...*ProductPrices) *PriceTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddProductPriceIDs(ids...)
}

// Mutation returns the PriceTypeMutation object of the builder.
func (ptuo *PriceTypeUpdateOne) Mutation() *PriceTypeMutation {
	return ptuo.mutation
}

// ClearProductPrices clears all "product_prices" edges to the ProductPrices entity.
func (ptuo *PriceTypeUpdateOne) ClearProductPrices() *PriceTypeUpdateOne {
	ptuo.mutation.ClearProductPrices()
	return ptuo
}

// RemoveProductPriceIDs removes the "product_prices" edge to ProductPrices entities by IDs.
func (ptuo *PriceTypeUpdateOne) RemoveProductPriceIDs(ids ...int) *PriceTypeUpdateOne {
	ptuo.mutation.RemoveProductPriceIDs(ids...)
	return ptuo
}

// RemoveProductPrices removes "product_prices" edges to ProductPrices entities.
func (ptuo *PriceTypeUpdateOne) RemoveProductPrices(p ...*ProductPrices) *PriceTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemoveProductPriceIDs(ids...)
}

// Where appends a list predicates to the PriceTypeUpdate builder.
func (ptuo *PriceTypeUpdateOne) Where(ps ...predicate.PriceType) *PriceTypeUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PriceTypeUpdateOne) Select(field string, fields ...string) *PriceTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PriceType entity.
func (ptuo *PriceTypeUpdateOne) Save(ctx context.Context) (*PriceType, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PriceTypeUpdateOne) SaveX(ctx context.Context) *PriceType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PriceTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PriceTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ptuo *PriceTypeUpdateOne) sqlSave(ctx context.Context) (_node *PriceType, err error) {
	_spec := sqlgraph.NewUpdateSpec(pricetype.Table, pricetype.Columns, sqlgraph.NewFieldSpec(pricetype.FieldID, field.TypeInt))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PriceType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pricetype.FieldID)
		for _, f := range fields {
			if !pricetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pricetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.DeletedAt(); ok {
		_spec.SetField(pricetype.FieldDeletedAt, field.TypeTime, value)
	}
	if ptuo.mutation.DeletedAtCleared() {
		_spec.ClearField(pricetype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(pricetype.FieldName, field.TypeString, value)
	}
	if ptuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pricetype.ProductPricesTable,
			Columns: []string{pricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedProductPricesIDs(); len(nodes) > 0 && !ptuo.mutation.ProductPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pricetype.ProductPricesTable,
			Columns: []string{pricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ProductPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pricetype.ProductPricesTable,
			Columns: []string{pricetype.ProductPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PriceType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pricetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
