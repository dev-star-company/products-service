// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/infotypes"
	"products-service/internal/app/ent/producthasinfo"
	"products-service/internal/app/ent/productinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductInfoCreate is the builder for creating a ProductInfo entity.
type ProductInfoCreate struct {
	config
	mutation *ProductInfoMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pic *ProductInfoCreate) SetCreatedAt(t time.Time) *ProductInfoCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableCreatedAt(t *time.Time) *ProductInfoCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetDeletedAt sets the "deleted_at" field.
func (pic *ProductInfoCreate) SetDeletedAt(t time.Time) *ProductInfoCreate {
	pic.mutation.SetDeletedAt(t)
	return pic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableDeletedAt(t *time.Time) *ProductInfoCreate {
	if t != nil {
		pic.SetDeletedAt(*t)
	}
	return pic
}

// SetInfoTypesID sets the "info_types_id" field.
func (pic *ProductInfoCreate) SetInfoTypesID(i int) *ProductInfoCreate {
	pic.mutation.SetInfoTypesID(i)
	return pic
}

// SetNillableInfoTypesID sets the "info_types_id" field if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableInfoTypesID(i *int) *ProductInfoCreate {
	if i != nil {
		pic.SetInfoTypesID(*i)
	}
	return pic
}

// SetValue sets the "value" field.
func (pic *ProductInfoCreate) SetValue(s string) *ProductInfoCreate {
	pic.mutation.SetValue(s)
	return pic
}

// SetInfoTypeID sets the "info_type" edge to the InfoTypes entity by ID.
func (pic *ProductInfoCreate) SetInfoTypeID(id int) *ProductInfoCreate {
	pic.mutation.SetInfoTypeID(id)
	return pic
}

// SetNillableInfoTypeID sets the "info_type" edge to the InfoTypes entity by ID if the given value is not nil.
func (pic *ProductInfoCreate) SetNillableInfoTypeID(id *int) *ProductInfoCreate {
	if id != nil {
		pic = pic.SetInfoTypeID(*id)
	}
	return pic
}

// SetInfoType sets the "info_type" edge to the InfoTypes entity.
func (pic *ProductInfoCreate) SetInfoType(i *InfoTypes) *ProductInfoCreate {
	return pic.SetInfoTypeID(i.ID)
}

// AddProductIDs adds the "products" edge to the ProductHasInfo entity by IDs.
func (pic *ProductInfoCreate) AddProductIDs(ids ...int) *ProductInfoCreate {
	pic.mutation.AddProductIDs(ids...)
	return pic
}

// AddProducts adds the "products" edges to the ProductHasInfo entity.
func (pic *ProductInfoCreate) AddProducts(p ...*ProductHasInfo) *ProductInfoCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pic.AddProductIDs(ids...)
}

// AddProductHasInfoIDs adds the "product_has_info" edge to the ProductHasInfo entity by IDs.
func (pic *ProductInfoCreate) AddProductHasInfoIDs(ids ...int) *ProductInfoCreate {
	pic.mutation.AddProductHasInfoIDs(ids...)
	return pic
}

// AddProductHasInfo adds the "product_has_info" edges to the ProductHasInfo entity.
func (pic *ProductInfoCreate) AddProductHasInfo(p ...*ProductHasInfo) *ProductInfoCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pic.AddProductHasInfoIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (pic *ProductInfoCreate) Mutation() *ProductInfoMutation {
	return pic.mutation
}

// Save creates the ProductInfo in the database.
func (pic *ProductInfoCreate) Save(ctx context.Context) (*ProductInfo, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProductInfoCreate) SaveX(ctx context.Context) *ProductInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProductInfoCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProductInfoCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProductInfoCreate) defaults() {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := productinfo.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProductInfoCreate) check() error {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductInfo.created_at"`)}
	}
	if _, ok := pic.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "ProductInfo.value"`)}
	}
	return nil
}

func (pic *ProductInfoCreate) sqlSave(ctx context.Context) (*ProductInfo, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProductInfoCreate) createSpec() (*ProductInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductInfo{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(productinfo.Table, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt))
	)
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(productinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.DeletedAt(); ok {
		_spec.SetField(productinfo.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pic.mutation.Value(); ok {
		_spec.SetField(productinfo.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if nodes := pic.mutation.InfoTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productinfo.InfoTypeTable,
			Columns: []string{productinfo.InfoTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(infotypes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InfoTypesID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductsTable,
			Columns: []string{productinfo.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.ProductHasInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductHasInfoTable,
			Columns: []string{productinfo.ProductHasInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductInfoCreateBulk is the builder for creating many ProductInfo entities in bulk.
type ProductInfoCreateBulk struct {
	config
	err      error
	builders []*ProductInfoCreate
}

// Save creates the ProductInfo entities in the database.
func (picb *ProductInfoCreateBulk) Save(ctx context.Context) ([]*ProductInfo, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProductInfo, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProductInfoCreateBulk) SaveX(ctx context.Context) []*ProductInfo {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProductInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProductInfoCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
