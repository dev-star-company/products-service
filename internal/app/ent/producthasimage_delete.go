// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasimage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasImageDelete is the builder for deleting a ProductHasImage entity.
type ProductHasImageDelete struct {
	config
	hooks    []Hook
	mutation *ProductHasImageMutation
}

// Where appends a list predicates to the ProductHasImageDelete builder.
func (phid *ProductHasImageDelete) Where(ps ...predicate.ProductHasImage) *ProductHasImageDelete {
	phid.mutation.Where(ps...)
	return phid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (phid *ProductHasImageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, phid.sqlExec, phid.mutation, phid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (phid *ProductHasImageDelete) ExecX(ctx context.Context) int {
	n, err := phid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (phid *ProductHasImageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(producthasimage.Table, sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt))
	if ps := phid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, phid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	phid.mutation.done = true
	return affected, err
}

// ProductHasImageDeleteOne is the builder for deleting a single ProductHasImage entity.
type ProductHasImageDeleteOne struct {
	phid *ProductHasImageDelete
}

// Where appends a list predicates to the ProductHasImageDelete builder.
func (phido *ProductHasImageDeleteOne) Where(ps ...predicate.ProductHasImage) *ProductHasImageDeleteOne {
	phido.phid.mutation.Where(ps...)
	return phido
}

// Exec executes the deletion query.
func (phido *ProductHasImageDeleteOne) Exec(ctx context.Context) error {
	n, err := phido.phid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{producthasimage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (phido *ProductHasImageDeleteOne) ExecX(ctx context.Context) {
	if err := phido.Exec(ctx); err != nil {
		panic(err)
	}
}
