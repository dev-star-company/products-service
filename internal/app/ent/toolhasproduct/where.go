// Code generated by ent, DO NOT EDIT.

package toolhasproduct

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldDeletedAt, v))
}

// ProductsID applies equality check predicate on the "products_id" field. It's identical to ProductsIDEQ.
func ProductsID(v int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldProductsID, v))
}

// ToolsID applies equality check predicate on the "tools_id" field. It's identical to ToolsIDEQ.
func ToolsID(v int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldToolsID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotNull(FieldDeletedAt))
}

// ProductsIDEQ applies the EQ predicate on the "products_id" field.
func ProductsIDEQ(v int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldProductsID, v))
}

// ProductsIDNEQ applies the NEQ predicate on the "products_id" field.
func ProductsIDNEQ(v int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNEQ(FieldProductsID, v))
}

// ProductsIDIn applies the In predicate on the "products_id" field.
func ProductsIDIn(vs ...int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIn(FieldProductsID, vs...))
}

// ProductsIDNotIn applies the NotIn predicate on the "products_id" field.
func ProductsIDNotIn(vs ...int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotIn(FieldProductsID, vs...))
}

// ProductsIDIsNil applies the IsNil predicate on the "products_id" field.
func ProductsIDIsNil() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIsNull(FieldProductsID))
}

// ProductsIDNotNil applies the NotNil predicate on the "products_id" field.
func ProductsIDNotNil() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotNull(FieldProductsID))
}

// ToolsIDEQ applies the EQ predicate on the "tools_id" field.
func ToolsIDEQ(v int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldEQ(FieldToolsID, v))
}

// ToolsIDNEQ applies the NEQ predicate on the "tools_id" field.
func ToolsIDNEQ(v int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNEQ(FieldToolsID, v))
}

// ToolsIDIn applies the In predicate on the "tools_id" field.
func ToolsIDIn(vs ...int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIn(FieldToolsID, vs...))
}

// ToolsIDNotIn applies the NotIn predicate on the "tools_id" field.
func ToolsIDNotIn(vs ...int) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotIn(FieldToolsID, vs...))
}

// ToolsIDIsNil applies the IsNil predicate on the "tools_id" field.
func ToolsIDIsNil() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldIsNull(FieldToolsID))
}

// ToolsIDNotNil applies the NotNil predicate on the "tools_id" field.
func ToolsIDNotNil() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.FieldNotNull(FieldToolsID))
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Products) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTools applies the HasEdge predicate on the "tools" edge.
func HasTools() predicate.ToolHasProduct {
	return predicate.ToolHasProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToolsTable, ToolsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToolsWith applies the HasEdge predicate on the "tools" edge with a given conditions (other predicates).
func HasToolsWith(preds ...predicate.Tools) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(func(s *sql.Selector) {
		step := newToolsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ToolHasProduct) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ToolHasProduct) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ToolHasProduct) predicate.ToolHasProduct {
	return predicate.ToolHasProduct(sql.NotPredicates(p))
}
