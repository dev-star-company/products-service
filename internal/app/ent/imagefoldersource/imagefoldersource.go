// Code generated by ent, DO NOT EDIT.

package imagefoldersource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the imagefoldersource type in the database.
	Label = "image_folder_source"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBaseURL holds the string denoting the base_url field in the database.
	FieldBaseURL = "base_url"
	// FieldAccessKey holds the string denoting the access_key field in the database.
	FieldAccessKey = "access_key"
	// FieldSecretKey holds the string denoting the secret_key field in the database.
	FieldSecretKey = "secret_key"
	// EdgeImageFolderPath holds the string denoting the image_folder_path edge name in mutations.
	EdgeImageFolderPath = "image_folder_path"
	// Table holds the table name of the imagefoldersource in the database.
	Table = "image_folder_sources"
	// ImageFolderPathTable is the table that holds the image_folder_path relation/edge.
	ImageFolderPathTable = "image_folder_paths"
	// ImageFolderPathInverseTable is the table name for the ImageFolderPath entity.
	// It exists in this package in order to avoid circular dependency with the "imagefolderpath" package.
	ImageFolderPathInverseTable = "image_folder_paths"
	// ImageFolderPathColumn is the table column denoting the image_folder_path relation/edge.
	ImageFolderPathColumn = "image_folder_source_id"
)

// Columns holds all SQL columns for imagefoldersource fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldName,
	FieldBaseURL,
	FieldAccessKey,
	FieldSecretKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ImageFolderSource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBaseURL orders the results by the base_url field.
func ByBaseURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseURL, opts...).ToFunc()
}

// ByAccessKey orders the results by the access_key field.
func ByAccessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessKey, opts...).ToFunc()
}

// BySecretKey orders the results by the secret_key field.
func BySecretKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretKey, opts...).ToFunc()
}

// ByImageFolderPathCount orders the results by image_folder_path count.
func ByImageFolderPathCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImageFolderPathStep(), opts...)
	}
}

// ByImageFolderPath orders the results by image_folder_path terms.
func ByImageFolderPath(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageFolderPathStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImageFolderPathStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageFolderPathInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImageFolderPathTable, ImageFolderPathColumn),
	)
}
