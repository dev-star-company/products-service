// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/varianttype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VariantType is the model entity for the VariantType schema.
type VariantType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VariantTypeQuery when eager-loading is set.
	Edges        VariantTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VariantTypeEdges holds the relations/edges for other nodes in the graph.
type VariantTypeEdges struct {
	// Products holds the value of the products edge.
	Products []*Products `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e VariantTypeEdges) ProductsOrErr() ([]*Products, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VariantType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case varianttype.FieldID, varianttype.FieldCreatedBy, varianttype.FieldUpdatedBy, varianttype.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case varianttype.FieldName:
			values[i] = new(sql.NullString)
		case varianttype.FieldCreatedAt, varianttype.FieldUpdatedAt, varianttype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VariantType fields.
func (vt *VariantType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case varianttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vt.ID = int(value.Int64)
		case varianttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vt.CreatedAt = value.Time
			}
		case varianttype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vt.UpdatedAt = value.Time
			}
		case varianttype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vt.DeletedAt = new(time.Time)
				*vt.DeletedAt = value.Time
			}
		case varianttype.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				vt.CreatedBy = int(value.Int64)
			}
		case varianttype.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				vt.UpdatedBy = int(value.Int64)
			}
		case varianttype.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				vt.DeletedBy = new(int)
				*vt.DeletedBy = int(value.Int64)
			}
		case varianttype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				vt.Name = new(string)
				*vt.Name = value.String
			}
		default:
			vt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VariantType.
// This includes values selected through modifiers, order, etc.
func (vt *VariantType) Value(name string) (ent.Value, error) {
	return vt.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the VariantType entity.
func (vt *VariantType) QueryProducts() *ProductsQuery {
	return NewVariantTypeClient(vt.config).QueryProducts(vt)
}

// Update returns a builder for updating this VariantType.
// Note that you need to call VariantType.Unwrap() before calling this method if this VariantType
// was returned from a transaction, and the transaction was committed or rolled back.
func (vt *VariantType) Update() *VariantTypeUpdateOne {
	return NewVariantTypeClient(vt.config).UpdateOne(vt)
}

// Unwrap unwraps the VariantType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vt *VariantType) Unwrap() *VariantType {
	_tx, ok := vt.config.driver.(*txDriver)
	if !ok {
		panic("ent: VariantType is not a transactional entity")
	}
	vt.config.driver = _tx.drv
	return vt
}

// String implements the fmt.Stringer.
func (vt *VariantType) String() string {
	var builder strings.Builder
	builder.WriteString("VariantType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := vt.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", vt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", vt.UpdatedBy))
	builder.WriteString(", ")
	if v := vt.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := vt.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// VariantTypes is a parsable slice of VariantType.
type VariantTypes []*VariantType
