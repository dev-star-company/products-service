// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasinfo"
	"products-service/internal/app/ent/productinfo"
	"products-service/internal/app/ent/products"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasInfoQuery is the builder for querying ProductHasInfo entities.
type ProductHasInfoQuery struct {
	config
	ctx             *QueryContext
	order           []producthasinfo.OrderOption
	inters          []Interceptor
	predicates      []predicate.ProductHasInfo
	withProducts    *ProductsQuery
	withProductInfo *ProductInfoQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductHasInfoQuery builder.
func (phiq *ProductHasInfoQuery) Where(ps ...predicate.ProductHasInfo) *ProductHasInfoQuery {
	phiq.predicates = append(phiq.predicates, ps...)
	return phiq
}

// Limit the number of records to be returned by this query.
func (phiq *ProductHasInfoQuery) Limit(limit int) *ProductHasInfoQuery {
	phiq.ctx.Limit = &limit
	return phiq
}

// Offset to start from.
func (phiq *ProductHasInfoQuery) Offset(offset int) *ProductHasInfoQuery {
	phiq.ctx.Offset = &offset
	return phiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phiq *ProductHasInfoQuery) Unique(unique bool) *ProductHasInfoQuery {
	phiq.ctx.Unique = &unique
	return phiq
}

// Order specifies how the records should be ordered.
func (phiq *ProductHasInfoQuery) Order(o ...producthasinfo.OrderOption) *ProductHasInfoQuery {
	phiq.order = append(phiq.order, o...)
	return phiq
}

// QueryProducts chains the current query on the "products" edge.
func (phiq *ProductHasInfoQuery) QueryProducts() *ProductsQuery {
	query := (&ProductsClient{config: phiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(producthasinfo.Table, producthasinfo.FieldID, selector),
			sqlgraph.To(products.Table, products.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, producthasinfo.ProductsTable, producthasinfo.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(phiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductInfo chains the current query on the "product_info" edge.
func (phiq *ProductHasInfoQuery) QueryProductInfo() *ProductInfoQuery {
	query := (&ProductInfoClient{config: phiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(producthasinfo.Table, producthasinfo.FieldID, selector),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, producthasinfo.ProductInfoTable, producthasinfo.ProductInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(phiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductHasInfo entity from the query.
// Returns a *NotFoundError when no ProductHasInfo was found.
func (phiq *ProductHasInfoQuery) First(ctx context.Context) (*ProductHasInfo, error) {
	nodes, err := phiq.Limit(1).All(setContextOp(ctx, phiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{producthasinfo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) FirstX(ctx context.Context) *ProductHasInfo {
	node, err := phiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductHasInfo ID from the query.
// Returns a *NotFoundError when no ProductHasInfo ID was found.
func (phiq *ProductHasInfoQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phiq.Limit(1).IDs(setContextOp(ctx, phiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{producthasinfo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) FirstIDX(ctx context.Context) int {
	id, err := phiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductHasInfo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductHasInfo entity is found.
// Returns a *NotFoundError when no ProductHasInfo entities are found.
func (phiq *ProductHasInfoQuery) Only(ctx context.Context) (*ProductHasInfo, error) {
	nodes, err := phiq.Limit(2).All(setContextOp(ctx, phiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{producthasinfo.Label}
	default:
		return nil, &NotSingularError{producthasinfo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) OnlyX(ctx context.Context) *ProductHasInfo {
	node, err := phiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductHasInfo ID in the query.
// Returns a *NotSingularError when more than one ProductHasInfo ID is found.
// Returns a *NotFoundError when no entities are found.
func (phiq *ProductHasInfoQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phiq.Limit(2).IDs(setContextOp(ctx, phiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{producthasinfo.Label}
	default:
		err = &NotSingularError{producthasinfo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) OnlyIDX(ctx context.Context) int {
	id, err := phiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductHasInfos.
func (phiq *ProductHasInfoQuery) All(ctx context.Context) ([]*ProductHasInfo, error) {
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryAll)
	if err := phiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductHasInfo, *ProductHasInfoQuery]()
	return withInterceptors[[]*ProductHasInfo](ctx, phiq, qr, phiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) AllX(ctx context.Context) []*ProductHasInfo {
	nodes, err := phiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductHasInfo IDs.
func (phiq *ProductHasInfoQuery) IDs(ctx context.Context) (ids []int, err error) {
	if phiq.ctx.Unique == nil && phiq.path != nil {
		phiq.Unique(true)
	}
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryIDs)
	if err = phiq.Select(producthasinfo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) IDsX(ctx context.Context) []int {
	ids, err := phiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phiq *ProductHasInfoQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryCount)
	if err := phiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, phiq, querierCount[*ProductHasInfoQuery](), phiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) CountX(ctx context.Context) int {
	count, err := phiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phiq *ProductHasInfoQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryExist)
	switch _, err := phiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (phiq *ProductHasInfoQuery) ExistX(ctx context.Context) bool {
	exist, err := phiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductHasInfoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phiq *ProductHasInfoQuery) Clone() *ProductHasInfoQuery {
	if phiq == nil {
		return nil
	}
	return &ProductHasInfoQuery{
		config:          phiq.config,
		ctx:             phiq.ctx.Clone(),
		order:           append([]producthasinfo.OrderOption{}, phiq.order...),
		inters:          append([]Interceptor{}, phiq.inters...),
		predicates:      append([]predicate.ProductHasInfo{}, phiq.predicates...),
		withProducts:    phiq.withProducts.Clone(),
		withProductInfo: phiq.withProductInfo.Clone(),
		// clone intermediate query.
		sql:  phiq.sql.Clone(),
		path: phiq.path,
	}
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (phiq *ProductHasInfoQuery) WithProducts(opts ...func(*ProductsQuery)) *ProductHasInfoQuery {
	query := (&ProductsClient{config: phiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phiq.withProducts = query
	return phiq
}

// WithProductInfo tells the query-builder to eager-load the nodes that are connected to
// the "product_info" edge. The optional arguments are used to configure the query builder of the edge.
func (phiq *ProductHasInfoQuery) WithProductInfo(opts ...func(*ProductInfoQuery)) *ProductHasInfoQuery {
	query := (&ProductInfoClient{config: phiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phiq.withProductInfo = query
	return phiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductHasInfo.Query().
//		GroupBy(producthasinfo.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (phiq *ProductHasInfoQuery) GroupBy(field string, fields ...string) *ProductHasInfoGroupBy {
	phiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductHasInfoGroupBy{build: phiq}
	grbuild.flds = &phiq.ctx.Fields
	grbuild.label = producthasinfo.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ProductHasInfo.Query().
//		Select(producthasinfo.FieldCreatedAt).
//		Scan(ctx, &v)
func (phiq *ProductHasInfoQuery) Select(fields ...string) *ProductHasInfoSelect {
	phiq.ctx.Fields = append(phiq.ctx.Fields, fields...)
	sbuild := &ProductHasInfoSelect{ProductHasInfoQuery: phiq}
	sbuild.label = producthasinfo.Label
	sbuild.flds, sbuild.scan = &phiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductHasInfoSelect configured with the given aggregations.
func (phiq *ProductHasInfoQuery) Aggregate(fns ...AggregateFunc) *ProductHasInfoSelect {
	return phiq.Select().Aggregate(fns...)
}

func (phiq *ProductHasInfoQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range phiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, phiq); err != nil {
				return err
			}
		}
	}
	for _, f := range phiq.ctx.Fields {
		if !producthasinfo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phiq.path != nil {
		prev, err := phiq.path(ctx)
		if err != nil {
			return err
		}
		phiq.sql = prev
	}
	return nil
}

func (phiq *ProductHasInfoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductHasInfo, error) {
	var (
		nodes       = []*ProductHasInfo{}
		_spec       = phiq.querySpec()
		loadedTypes = [2]bool{
			phiq.withProducts != nil,
			phiq.withProductInfo != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductHasInfo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductHasInfo{config: phiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, phiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := phiq.withProducts; query != nil {
		if err := phiq.loadProducts(ctx, query, nodes, nil,
			func(n *ProductHasInfo, e *Products) { n.Edges.Products = e }); err != nil {
			return nil, err
		}
	}
	if query := phiq.withProductInfo; query != nil {
		if err := phiq.loadProductInfo(ctx, query, nodes, nil,
			func(n *ProductHasInfo, e *ProductInfo) { n.Edges.ProductInfo = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (phiq *ProductHasInfoQuery) loadProducts(ctx context.Context, query *ProductsQuery, nodes []*ProductHasInfo, init func(*ProductHasInfo), assign func(*ProductHasInfo, *Products)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductHasInfo)
	for i := range nodes {
		if nodes[i].ProductID == nil {
			continue
		}
		fk := *nodes[i].ProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(products.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phiq *ProductHasInfoQuery) loadProductInfo(ctx context.Context, query *ProductInfoQuery, nodes []*ProductHasInfo, init func(*ProductHasInfo), assign func(*ProductHasInfo, *ProductInfo)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductHasInfo)
	for i := range nodes {
		if nodes[i].ProductInfoID == nil {
			continue
		}
		fk := *nodes[i].ProductInfoID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(productinfo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_info_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (phiq *ProductHasInfoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phiq.querySpec()
	_spec.Node.Columns = phiq.ctx.Fields
	if len(phiq.ctx.Fields) > 0 {
		_spec.Unique = phiq.ctx.Unique != nil && *phiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, phiq.driver, _spec)
}

func (phiq *ProductHasInfoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(producthasinfo.Table, producthasinfo.Columns, sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt))
	_spec.From = phiq.sql
	if unique := phiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if phiq.path != nil {
		_spec.Unique = true
	}
	if fields := phiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producthasinfo.FieldID)
		for i := range fields {
			if fields[i] != producthasinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if phiq.withProducts != nil {
			_spec.Node.AddColumnOnce(producthasinfo.FieldProductID)
		}
		if phiq.withProductInfo != nil {
			_spec.Node.AddColumnOnce(producthasinfo.FieldProductInfoID)
		}
	}
	if ps := phiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phiq *ProductHasInfoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phiq.driver.Dialect())
	t1 := builder.Table(producthasinfo.Table)
	columns := phiq.ctx.Fields
	if len(columns) == 0 {
		columns = producthasinfo.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phiq.sql != nil {
		selector = phiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phiq.ctx.Unique != nil && *phiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range phiq.predicates {
		p(selector)
	}
	for _, p := range phiq.order {
		p(selector)
	}
	if offset := phiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductHasInfoGroupBy is the group-by builder for ProductHasInfo entities.
type ProductHasInfoGroupBy struct {
	selector
	build *ProductHasInfoQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phigb *ProductHasInfoGroupBy) Aggregate(fns ...AggregateFunc) *ProductHasInfoGroupBy {
	phigb.fns = append(phigb.fns, fns...)
	return phigb
}

// Scan applies the selector query and scans the result into the given value.
func (phigb *ProductHasInfoGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phigb.build.ctx, ent.OpQueryGroupBy)
	if err := phigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductHasInfoQuery, *ProductHasInfoGroupBy](ctx, phigb.build, phigb, phigb.build.inters, v)
}

func (phigb *ProductHasInfoGroupBy) sqlScan(ctx context.Context, root *ProductHasInfoQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(phigb.fns))
	for _, fn := range phigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*phigb.flds)+len(phigb.fns))
		for _, f := range *phigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*phigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductHasInfoSelect is the builder for selecting fields of ProductHasInfo entities.
type ProductHasInfoSelect struct {
	*ProductHasInfoQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (phis *ProductHasInfoSelect) Aggregate(fns ...AggregateFunc) *ProductHasInfoSelect {
	phis.fns = append(phis.fns, fns...)
	return phis
}

// Scan applies the selector query and scans the result into the given value.
func (phis *ProductHasInfoSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phis.ctx, ent.OpQuerySelect)
	if err := phis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductHasInfoQuery, *ProductHasInfoSelect](ctx, phis.ProductHasInfoQuery, phis, phis.inters, v)
}

func (phis *ProductHasInfoSelect) sqlScan(ctx context.Context, root *ProductHasInfoQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(phis.fns))
	for _, fn := range phis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*phis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
