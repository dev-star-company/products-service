// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesValuesCreate is the builder for creating a FeaturesValues entity.
type FeaturesValuesCreate struct {
	config
	mutation *FeaturesValuesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fvc *FeaturesValuesCreate) SetCreatedAt(t time.Time) *FeaturesValuesCreate {
	fvc.mutation.SetCreatedAt(t)
	return fvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fvc *FeaturesValuesCreate) SetNillableCreatedAt(t *time.Time) *FeaturesValuesCreate {
	if t != nil {
		fvc.SetCreatedAt(*t)
	}
	return fvc
}

// SetDeletedAt sets the "deleted_at" field.
func (fvc *FeaturesValuesCreate) SetDeletedAt(t time.Time) *FeaturesValuesCreate {
	fvc.mutation.SetDeletedAt(t)
	return fvc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fvc *FeaturesValuesCreate) SetNillableDeletedAt(t *time.Time) *FeaturesValuesCreate {
	if t != nil {
		fvc.SetDeletedAt(*t)
	}
	return fvc
}

// SetFeatureID sets the "feature_id" field.
func (fvc *FeaturesValuesCreate) SetFeatureID(i int) *FeaturesValuesCreate {
	fvc.mutation.SetFeatureID(i)
	return fvc
}

// SetFeatureUnitValuesID sets the "feature_unit_values_id" field.
func (fvc *FeaturesValuesCreate) SetFeatureUnitValuesID(i int) *FeaturesValuesCreate {
	fvc.mutation.SetFeatureUnitValuesID(i)
	return fvc
}

// SetNillableFeatureUnitValuesID sets the "feature_unit_values_id" field if the given value is not nil.
func (fvc *FeaturesValuesCreate) SetNillableFeatureUnitValuesID(i *int) *FeaturesValuesCreate {
	if i != nil {
		fvc.SetFeatureUnitValuesID(*i)
	}
	return fvc
}

// SetFeatureValuesID sets the "feature_values_id" field.
func (fvc *FeaturesValuesCreate) SetFeatureValuesID(i int) *FeaturesValuesCreate {
	fvc.mutation.SetFeatureValuesID(i)
	return fvc
}

// SetNillableFeatureValuesID sets the "feature_values_id" field if the given value is not nil.
func (fvc *FeaturesValuesCreate) SetNillableFeatureValuesID(i *int) *FeaturesValuesCreate {
	if i != nil {
		fvc.SetFeatureValuesID(*i)
	}
	return fvc
}

// SetValue sets the "value" field.
func (fvc *FeaturesValuesCreate) SetValue(s string) *FeaturesValuesCreate {
	fvc.mutation.SetValue(s)
	return fvc
}

// SetFeature sets the "feature" edge to the Features entity.
func (fvc *FeaturesValuesCreate) SetFeature(f *Features) *FeaturesValuesCreate {
	return fvc.SetFeatureID(f.ID)
}

// SetFeatureUnitValues sets the "feature_unit_values" edge to the FeaturesUnitValues entity.
func (fvc *FeaturesValuesCreate) SetFeatureUnitValues(f *FeaturesUnitValues) *FeaturesValuesCreate {
	return fvc.SetFeatureUnitValuesID(f.ID)
}

// Mutation returns the FeaturesValuesMutation object of the builder.
func (fvc *FeaturesValuesCreate) Mutation() *FeaturesValuesMutation {
	return fvc.mutation
}

// Save creates the FeaturesValues in the database.
func (fvc *FeaturesValuesCreate) Save(ctx context.Context) (*FeaturesValues, error) {
	fvc.defaults()
	return withHooks(ctx, fvc.sqlSave, fvc.mutation, fvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fvc *FeaturesValuesCreate) SaveX(ctx context.Context) *FeaturesValues {
	v, err := fvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fvc *FeaturesValuesCreate) Exec(ctx context.Context) error {
	_, err := fvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvc *FeaturesValuesCreate) ExecX(ctx context.Context) {
	if err := fvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fvc *FeaturesValuesCreate) defaults() {
	if _, ok := fvc.mutation.CreatedAt(); !ok {
		v := featuresvalues.DefaultCreatedAt()
		fvc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvc *FeaturesValuesCreate) check() error {
	if _, ok := fvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeaturesValues.created_at"`)}
	}
	if _, ok := fvc.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`ent: missing required field "FeaturesValues.feature_id"`)}
	}
	if _, ok := fvc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "FeaturesValues.value"`)}
	}
	if len(fvc.mutation.FeatureIDs()) == 0 {
		return &ValidationError{Name: "feature", err: errors.New(`ent: missing required edge "FeaturesValues.feature"`)}
	}
	return nil
}

func (fvc *FeaturesValuesCreate) sqlSave(ctx context.Context) (*FeaturesValues, error) {
	if err := fvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fvc.mutation.id = &_node.ID
	fvc.mutation.done = true
	return _node, nil
}

func (fvc *FeaturesValuesCreate) createSpec() (*FeaturesValues, *sqlgraph.CreateSpec) {
	var (
		_node = &FeaturesValues{config: fvc.config}
		_spec = sqlgraph.NewCreateSpec(featuresvalues.Table, sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt))
	)
	if value, ok := fvc.mutation.CreatedAt(); ok {
		_spec.SetField(featuresvalues.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fvc.mutation.DeletedAt(); ok {
		_spec.SetField(featuresvalues.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fvc.mutation.FeatureValuesID(); ok {
		_spec.SetField(featuresvalues.FieldFeatureValuesID, field.TypeInt, value)
		_node.FeatureValuesID = &value
	}
	if value, ok := fvc.mutation.Value(); ok {
		_spec.SetField(featuresvalues.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if nodes := fvc.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureTable,
			Columns: []string{featuresvalues.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fvc.mutation.FeatureUnitValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   featuresvalues.FeatureUnitValuesTable,
			Columns: []string{featuresvalues.FeatureUnitValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureUnitValuesID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeaturesValuesCreateBulk is the builder for creating many FeaturesValues entities in bulk.
type FeaturesValuesCreateBulk struct {
	config
	err      error
	builders []*FeaturesValuesCreate
}

// Save creates the FeaturesValues entities in the database.
func (fvcb *FeaturesValuesCreateBulk) Save(ctx context.Context) ([]*FeaturesValues, error) {
	if fvcb.err != nil {
		return nil, fvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fvcb.builders))
	nodes := make([]*FeaturesValues, len(fvcb.builders))
	mutators := make([]Mutator, len(fvcb.builders))
	for i := range fvcb.builders {
		func(i int, root context.Context) {
			builder := fvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeaturesValuesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fvcb *FeaturesValuesCreateBulk) SaveX(ctx context.Context) []*FeaturesValues {
	v, err := fvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fvcb *FeaturesValuesCreateBulk) Exec(ctx context.Context) error {
	_, err := fvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvcb *FeaturesValuesCreateBulk) ExecX(ctx context.Context) {
	if err := fvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
