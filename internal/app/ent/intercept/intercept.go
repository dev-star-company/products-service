// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"products-service/internal/app/ent"
	"products-service/internal/app/ent/brand"
	"products-service/internal/app/ent/category"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/featuresvaluestypes"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/imagefoldersource"
	"products-service/internal/app/ent/images"
	"products-service/internal/app/ent/infotypes"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/pricetype"
	"products-service/internal/app/ent/producthasfeature"
	"products-service/internal/app/ent/producthasimage"
	"products-service/internal/app/ent/producthasinfo"
	"products-service/internal/app/ent/producthasproductreference"
	"products-service/internal/app/ent/productinfo"
	"products-service/internal/app/ent/productprices"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"
	"products-service/internal/app/ent/referencesources"
	"products-service/internal/app/ent/toolhasproduct"
	"products-service/internal/app/ent/tools"
	"products-service/internal/app/ent/user"
	"products-service/internal/app/ent/varianttype"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The BrandFunc type is an adapter to allow the use of ordinary function as a Querier.
type BrandFunc func(context.Context, *ent.BrandQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BrandFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BrandQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BrandQuery", q)
}

// The TraverseBrand type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBrand func(context.Context, *ent.BrandQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBrand) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBrand) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BrandQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BrandQuery", q)
}

// The CategoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type CategoryFunc func(context.Context, *ent.CategoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CategoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CategoryQuery", q)
}

// The TraverseCategory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCategory func(context.Context, *ent.CategoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCategory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCategory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CategoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CategoryQuery", q)
}

// The FeaturesFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeaturesFunc func(context.Context, *ent.FeaturesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FeaturesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FeaturesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FeaturesQuery", q)
}

// The TraverseFeatures type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeatures func(context.Context, *ent.FeaturesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeatures) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeatures) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeaturesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FeaturesQuery", q)
}

// The FeaturesUnitValuesFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeaturesUnitValuesFunc func(context.Context, *ent.FeaturesUnitValuesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FeaturesUnitValuesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FeaturesUnitValuesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FeaturesUnitValuesQuery", q)
}

// The TraverseFeaturesUnitValues type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeaturesUnitValues func(context.Context, *ent.FeaturesUnitValuesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeaturesUnitValues) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeaturesUnitValues) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeaturesUnitValuesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FeaturesUnitValuesQuery", q)
}

// The FeaturesValuesFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeaturesValuesFunc func(context.Context, *ent.FeaturesValuesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FeaturesValuesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FeaturesValuesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FeaturesValuesQuery", q)
}

// The TraverseFeaturesValues type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeaturesValues func(context.Context, *ent.FeaturesValuesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeaturesValues) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeaturesValues) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeaturesValuesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FeaturesValuesQuery", q)
}

// The FeaturesValuesTypesFunc type is an adapter to allow the use of ordinary function as a Querier.
type FeaturesValuesTypesFunc func(context.Context, *ent.FeaturesValuesTypesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FeaturesValuesTypesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FeaturesValuesTypesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FeaturesValuesTypesQuery", q)
}

// The TraverseFeaturesValuesTypes type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFeaturesValuesTypes func(context.Context, *ent.FeaturesValuesTypesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFeaturesValuesTypes) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFeaturesValuesTypes) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeaturesValuesTypesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FeaturesValuesTypesQuery", q)
}

// The ImageFolderPathFunc type is an adapter to allow the use of ordinary function as a Querier.
type ImageFolderPathFunc func(context.Context, *ent.ImageFolderPathQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ImageFolderPathFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ImageFolderPathQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ImageFolderPathQuery", q)
}

// The TraverseImageFolderPath type is an adapter to allow the use of ordinary function as Traverser.
type TraverseImageFolderPath func(context.Context, *ent.ImageFolderPathQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseImageFolderPath) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseImageFolderPath) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ImageFolderPathQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ImageFolderPathQuery", q)
}

// The ImageFolderSourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type ImageFolderSourceFunc func(context.Context, *ent.ImageFolderSourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ImageFolderSourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ImageFolderSourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ImageFolderSourceQuery", q)
}

// The TraverseImageFolderSource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseImageFolderSource func(context.Context, *ent.ImageFolderSourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseImageFolderSource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseImageFolderSource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ImageFolderSourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ImageFolderSourceQuery", q)
}

// The ImagesFunc type is an adapter to allow the use of ordinary function as a Querier.
type ImagesFunc func(context.Context, *ent.ImagesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ImagesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ImagesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ImagesQuery", q)
}

// The TraverseImages type is an adapter to allow the use of ordinary function as Traverser.
type TraverseImages func(context.Context, *ent.ImagesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseImages) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseImages) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ImagesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ImagesQuery", q)
}

// The InfoTypesFunc type is an adapter to allow the use of ordinary function as a Querier.
type InfoTypesFunc func(context.Context, *ent.InfoTypesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InfoTypesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InfoTypesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InfoTypesQuery", q)
}

// The TraverseInfoTypes type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInfoTypes func(context.Context, *ent.InfoTypesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInfoTypes) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInfoTypes) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InfoTypesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InfoTypesQuery", q)
}

// The PriceTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type PriceTypeFunc func(context.Context, *ent.PriceTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PriceTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PriceTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PriceTypeQuery", q)
}

// The TraversePriceType type is an adapter to allow the use of ordinary function as Traverser.
type TraversePriceType func(context.Context, *ent.PriceTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePriceType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePriceType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PriceTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PriceTypeQuery", q)
}

// The ProductHasFeatureFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductHasFeatureFunc func(context.Context, *ent.ProductHasFeatureQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductHasFeatureFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductHasFeatureQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductHasFeatureQuery", q)
}

// The TraverseProductHasFeature type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductHasFeature func(context.Context, *ent.ProductHasFeatureQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductHasFeature) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductHasFeature) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductHasFeatureQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductHasFeatureQuery", q)
}

// The ProductHasImageFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductHasImageFunc func(context.Context, *ent.ProductHasImageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductHasImageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductHasImageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductHasImageQuery", q)
}

// The TraverseProductHasImage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductHasImage func(context.Context, *ent.ProductHasImageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductHasImage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductHasImage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductHasImageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductHasImageQuery", q)
}

// The ProductHasInfoFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductHasInfoFunc func(context.Context, *ent.ProductHasInfoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductHasInfoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductHasInfoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductHasInfoQuery", q)
}

// The TraverseProductHasInfo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductHasInfo func(context.Context, *ent.ProductHasInfoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductHasInfo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductHasInfo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductHasInfoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductHasInfoQuery", q)
}

// The ProductHasProductReferenceFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductHasProductReferenceFunc func(context.Context, *ent.ProductHasProductReferenceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductHasProductReferenceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductHasProductReferenceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductHasProductReferenceQuery", q)
}

// The TraverseProductHasProductReference type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductHasProductReference func(context.Context, *ent.ProductHasProductReferenceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductHasProductReference) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductHasProductReference) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductHasProductReferenceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductHasProductReferenceQuery", q)
}

// The ProductInfoFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductInfoFunc func(context.Context, *ent.ProductInfoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductInfoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductInfoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductInfoQuery", q)
}

// The TraverseProductInfo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductInfo func(context.Context, *ent.ProductInfoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductInfo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductInfo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductInfoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductInfoQuery", q)
}

// The ProductPricesFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductPricesFunc func(context.Context, *ent.ProductPricesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductPricesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductPricesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductPricesQuery", q)
}

// The TraverseProductPrices type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductPrices func(context.Context, *ent.ProductPricesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductPrices) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductPrices) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductPricesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductPricesQuery", q)
}

// The ProductReferencesFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductReferencesFunc func(context.Context, *ent.ProductReferencesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductReferencesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductReferencesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductReferencesQuery", q)
}

// The TraverseProductReferences type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductReferences func(context.Context, *ent.ProductReferencesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductReferences) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductReferences) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductReferencesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductReferencesQuery", q)
}

// The ProductsFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductsFunc func(context.Context, *ent.ProductsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductsQuery", q)
}

// The TraverseProducts type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProducts func(context.Context, *ent.ProductsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProducts) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProducts) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductsQuery", q)
}

// The PromotionHasProductFunc type is an adapter to allow the use of ordinary function as a Querier.
type PromotionHasProductFunc func(context.Context, *ent.PromotionHasProductQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PromotionHasProductFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PromotionHasProductQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PromotionHasProductQuery", q)
}

// The TraversePromotionHasProduct type is an adapter to allow the use of ordinary function as Traverser.
type TraversePromotionHasProduct func(context.Context, *ent.PromotionHasProductQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePromotionHasProduct) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePromotionHasProduct) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PromotionHasProductQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PromotionHasProductQuery", q)
}

// The PromotionsFunc type is an adapter to allow the use of ordinary function as a Querier.
type PromotionsFunc func(context.Context, *ent.PromotionsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PromotionsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PromotionsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PromotionsQuery", q)
}

// The TraversePromotions type is an adapter to allow the use of ordinary function as Traverser.
type TraversePromotions func(context.Context, *ent.PromotionsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePromotions) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePromotions) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PromotionsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PromotionsQuery", q)
}

// The ReferenceSourcesFunc type is an adapter to allow the use of ordinary function as a Querier.
type ReferenceSourcesFunc func(context.Context, *ent.ReferenceSourcesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ReferenceSourcesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ReferenceSourcesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ReferenceSourcesQuery", q)
}

// The TraverseReferenceSources type is an adapter to allow the use of ordinary function as Traverser.
type TraverseReferenceSources func(context.Context, *ent.ReferenceSourcesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseReferenceSources) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseReferenceSources) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReferenceSourcesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ReferenceSourcesQuery", q)
}

// The ToolHasProductFunc type is an adapter to allow the use of ordinary function as a Querier.
type ToolHasProductFunc func(context.Context, *ent.ToolHasProductQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ToolHasProductFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ToolHasProductQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ToolHasProductQuery", q)
}

// The TraverseToolHasProduct type is an adapter to allow the use of ordinary function as Traverser.
type TraverseToolHasProduct func(context.Context, *ent.ToolHasProductQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseToolHasProduct) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseToolHasProduct) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ToolHasProductQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ToolHasProductQuery", q)
}

// The ToolsFunc type is an adapter to allow the use of ordinary function as a Querier.
type ToolsFunc func(context.Context, *ent.ToolsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ToolsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ToolsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ToolsQuery", q)
}

// The TraverseTools type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTools func(context.Context, *ent.ToolsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTools) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTools) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ToolsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ToolsQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The VariantTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type VariantTypeFunc func(context.Context, *ent.VariantTypeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VariantTypeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VariantTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VariantTypeQuery", q)
}

// The TraverseVariantType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVariantType func(context.Context, *ent.VariantTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVariantType) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVariantType) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VariantTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VariantTypeQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.BrandQuery:
		return &query[*ent.BrandQuery, predicate.Brand, brand.OrderOption]{typ: ent.TypeBrand, tq: q}, nil
	case *ent.CategoryQuery:
		return &query[*ent.CategoryQuery, predicate.Category, category.OrderOption]{typ: ent.TypeCategory, tq: q}, nil
	case *ent.FeaturesQuery:
		return &query[*ent.FeaturesQuery, predicate.Features, features.OrderOption]{typ: ent.TypeFeatures, tq: q}, nil
	case *ent.FeaturesUnitValuesQuery:
		return &query[*ent.FeaturesUnitValuesQuery, predicate.FeaturesUnitValues, featuresunitvalues.OrderOption]{typ: ent.TypeFeaturesUnitValues, tq: q}, nil
	case *ent.FeaturesValuesQuery:
		return &query[*ent.FeaturesValuesQuery, predicate.FeaturesValues, featuresvalues.OrderOption]{typ: ent.TypeFeaturesValues, tq: q}, nil
	case *ent.FeaturesValuesTypesQuery:
		return &query[*ent.FeaturesValuesTypesQuery, predicate.FeaturesValuesTypes, featuresvaluestypes.OrderOption]{typ: ent.TypeFeaturesValuesTypes, tq: q}, nil
	case *ent.ImageFolderPathQuery:
		return &query[*ent.ImageFolderPathQuery, predicate.ImageFolderPath, imagefolderpath.OrderOption]{typ: ent.TypeImageFolderPath, tq: q}, nil
	case *ent.ImageFolderSourceQuery:
		return &query[*ent.ImageFolderSourceQuery, predicate.ImageFolderSource, imagefoldersource.OrderOption]{typ: ent.TypeImageFolderSource, tq: q}, nil
	case *ent.ImagesQuery:
		return &query[*ent.ImagesQuery, predicate.Images, images.OrderOption]{typ: ent.TypeImages, tq: q}, nil
	case *ent.InfoTypesQuery:
		return &query[*ent.InfoTypesQuery, predicate.InfoTypes, infotypes.OrderOption]{typ: ent.TypeInfoTypes, tq: q}, nil
	case *ent.PriceTypeQuery:
		return &query[*ent.PriceTypeQuery, predicate.PriceType, pricetype.OrderOption]{typ: ent.TypePriceType, tq: q}, nil
	case *ent.ProductHasFeatureQuery:
		return &query[*ent.ProductHasFeatureQuery, predicate.ProductHasFeature, producthasfeature.OrderOption]{typ: ent.TypeProductHasFeature, tq: q}, nil
	case *ent.ProductHasImageQuery:
		return &query[*ent.ProductHasImageQuery, predicate.ProductHasImage, producthasimage.OrderOption]{typ: ent.TypeProductHasImage, tq: q}, nil
	case *ent.ProductHasInfoQuery:
		return &query[*ent.ProductHasInfoQuery, predicate.ProductHasInfo, producthasinfo.OrderOption]{typ: ent.TypeProductHasInfo, tq: q}, nil
	case *ent.ProductHasProductReferenceQuery:
		return &query[*ent.ProductHasProductReferenceQuery, predicate.ProductHasProductReference, producthasproductreference.OrderOption]{typ: ent.TypeProductHasProductReference, tq: q}, nil
	case *ent.ProductInfoQuery:
		return &query[*ent.ProductInfoQuery, predicate.ProductInfo, productinfo.OrderOption]{typ: ent.TypeProductInfo, tq: q}, nil
	case *ent.ProductPricesQuery:
		return &query[*ent.ProductPricesQuery, predicate.ProductPrices, productprices.OrderOption]{typ: ent.TypeProductPrices, tq: q}, nil
	case *ent.ProductReferencesQuery:
		return &query[*ent.ProductReferencesQuery, predicate.ProductReferences, productreferences.OrderOption]{typ: ent.TypeProductReferences, tq: q}, nil
	case *ent.ProductsQuery:
		return &query[*ent.ProductsQuery, predicate.Products, products.OrderOption]{typ: ent.TypeProducts, tq: q}, nil
	case *ent.PromotionHasProductQuery:
		return &query[*ent.PromotionHasProductQuery, predicate.PromotionHasProduct, promotionhasproduct.OrderOption]{typ: ent.TypePromotionHasProduct, tq: q}, nil
	case *ent.PromotionsQuery:
		return &query[*ent.PromotionsQuery, predicate.Promotions, promotions.OrderOption]{typ: ent.TypePromotions, tq: q}, nil
	case *ent.ReferenceSourcesQuery:
		return &query[*ent.ReferenceSourcesQuery, predicate.ReferenceSources, referencesources.OrderOption]{typ: ent.TypeReferenceSources, tq: q}, nil
	case *ent.ToolHasProductQuery:
		return &query[*ent.ToolHasProductQuery, predicate.ToolHasProduct, toolhasproduct.OrderOption]{typ: ent.TypeToolHasProduct, tq: q}, nil
	case *ent.ToolsQuery:
		return &query[*ent.ToolsQuery, predicate.Tools, tools.OrderOption]{typ: ent.TypeTools, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.VariantTypeQuery:
		return &query[*ent.VariantTypeQuery, predicate.VariantType, varianttype.OrderOption]{typ: ent.TypeVariantType, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
