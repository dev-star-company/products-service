// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/tools"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tools is the model entity for the Tools schema.
type Tools struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ToolsQuery when eager-loading is set.
	Edges        ToolsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ToolsEdges holds the relations/edges for other nodes in the graph.
type ToolsEdges struct {
	// ToolHasProduct holds the value of the tool_has_product edge.
	ToolHasProduct []*ToolHasProduct `json:"tool_has_product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ToolHasProductOrErr returns the ToolHasProduct value or an error if the edge
// was not loaded in eager-loading.
func (e ToolsEdges) ToolHasProductOrErr() ([]*ToolHasProduct, error) {
	if e.loadedTypes[0] {
		return e.ToolHasProduct, nil
	}
	return nil, &NotLoadedError{edge: "tool_has_product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tools) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tools.FieldID:
			values[i] = new(sql.NullInt64)
		case tools.FieldName:
			values[i] = new(sql.NullString)
		case tools.FieldCreatedAt, tools.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tools fields.
func (t *Tools) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tools.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tools.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tools.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = new(time.Time)
				*t.DeletedAt = value.Time
			}
		case tools.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = new(string)
				*t.Name = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tools.
// This includes values selected through modifiers, order, etc.
func (t *Tools) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryToolHasProduct queries the "tool_has_product" edge of the Tools entity.
func (t *Tools) QueryToolHasProduct() *ToolHasProductQuery {
	return NewToolsClient(t.config).QueryToolHasProduct(t)
}

// Update returns a builder for updating this Tools.
// Note that you need to call Tools.Unwrap() before calling this method if this Tools
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tools) Update() *ToolsUpdateOne {
	return NewToolsClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tools entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tools) Unwrap() *Tools {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tools is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tools) String() string {
	var builder strings.Builder
	builder.WriteString("Tools(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ToolsSlice is a parsable slice of Tools.
type ToolsSlice []*Tools
