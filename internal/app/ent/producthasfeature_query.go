// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasfeature"
	"products-service/internal/app/ent/products"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasFeatureQuery is the builder for querying ProductHasFeature entities.
type ProductHasFeatureQuery struct {
	config
	ctx          *QueryContext
	order        []producthasfeature.OrderOption
	inters       []Interceptor
	predicates   []predicate.ProductHasFeature
	withProducts *ProductsQuery
	withFeatures *FeaturesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductHasFeatureQuery builder.
func (phfq *ProductHasFeatureQuery) Where(ps ...predicate.ProductHasFeature) *ProductHasFeatureQuery {
	phfq.predicates = append(phfq.predicates, ps...)
	return phfq
}

// Limit the number of records to be returned by this query.
func (phfq *ProductHasFeatureQuery) Limit(limit int) *ProductHasFeatureQuery {
	phfq.ctx.Limit = &limit
	return phfq
}

// Offset to start from.
func (phfq *ProductHasFeatureQuery) Offset(offset int) *ProductHasFeatureQuery {
	phfq.ctx.Offset = &offset
	return phfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phfq *ProductHasFeatureQuery) Unique(unique bool) *ProductHasFeatureQuery {
	phfq.ctx.Unique = &unique
	return phfq
}

// Order specifies how the records should be ordered.
func (phfq *ProductHasFeatureQuery) Order(o ...producthasfeature.OrderOption) *ProductHasFeatureQuery {
	phfq.order = append(phfq.order, o...)
	return phfq
}

// QueryProducts chains the current query on the "products" edge.
func (phfq *ProductHasFeatureQuery) QueryProducts() *ProductsQuery {
	query := (&ProductsClient{config: phfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(producthasfeature.Table, producthasfeature.FieldID, selector),
			sqlgraph.To(products.Table, products.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, producthasfeature.ProductsTable, producthasfeature.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(phfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeatures chains the current query on the "features" edge.
func (phfq *ProductHasFeatureQuery) QueryFeatures() *FeaturesQuery {
	query := (&FeaturesClient{config: phfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(producthasfeature.Table, producthasfeature.FieldID, selector),
			sqlgraph.To(features.Table, features.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, producthasfeature.FeaturesTable, producthasfeature.FeaturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(phfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductHasFeature entity from the query.
// Returns a *NotFoundError when no ProductHasFeature was found.
func (phfq *ProductHasFeatureQuery) First(ctx context.Context) (*ProductHasFeature, error) {
	nodes, err := phfq.Limit(1).All(setContextOp(ctx, phfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{producthasfeature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) FirstX(ctx context.Context) *ProductHasFeature {
	node, err := phfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductHasFeature ID from the query.
// Returns a *NotFoundError when no ProductHasFeature ID was found.
func (phfq *ProductHasFeatureQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phfq.Limit(1).IDs(setContextOp(ctx, phfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{producthasfeature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) FirstIDX(ctx context.Context) int {
	id, err := phfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductHasFeature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductHasFeature entity is found.
// Returns a *NotFoundError when no ProductHasFeature entities are found.
func (phfq *ProductHasFeatureQuery) Only(ctx context.Context) (*ProductHasFeature, error) {
	nodes, err := phfq.Limit(2).All(setContextOp(ctx, phfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{producthasfeature.Label}
	default:
		return nil, &NotSingularError{producthasfeature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) OnlyX(ctx context.Context) *ProductHasFeature {
	node, err := phfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductHasFeature ID in the query.
// Returns a *NotSingularError when more than one ProductHasFeature ID is found.
// Returns a *NotFoundError when no entities are found.
func (phfq *ProductHasFeatureQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phfq.Limit(2).IDs(setContextOp(ctx, phfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{producthasfeature.Label}
	default:
		err = &NotSingularError{producthasfeature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) OnlyIDX(ctx context.Context) int {
	id, err := phfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductHasFeatures.
func (phfq *ProductHasFeatureQuery) All(ctx context.Context) ([]*ProductHasFeature, error) {
	ctx = setContextOp(ctx, phfq.ctx, ent.OpQueryAll)
	if err := phfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductHasFeature, *ProductHasFeatureQuery]()
	return withInterceptors[[]*ProductHasFeature](ctx, phfq, qr, phfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) AllX(ctx context.Context) []*ProductHasFeature {
	nodes, err := phfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductHasFeature IDs.
func (phfq *ProductHasFeatureQuery) IDs(ctx context.Context) (ids []int, err error) {
	if phfq.ctx.Unique == nil && phfq.path != nil {
		phfq.Unique(true)
	}
	ctx = setContextOp(ctx, phfq.ctx, ent.OpQueryIDs)
	if err = phfq.Select(producthasfeature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) IDsX(ctx context.Context) []int {
	ids, err := phfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phfq *ProductHasFeatureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, phfq.ctx, ent.OpQueryCount)
	if err := phfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, phfq, querierCount[*ProductHasFeatureQuery](), phfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) CountX(ctx context.Context) int {
	count, err := phfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phfq *ProductHasFeatureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, phfq.ctx, ent.OpQueryExist)
	switch _, err := phfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (phfq *ProductHasFeatureQuery) ExistX(ctx context.Context) bool {
	exist, err := phfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductHasFeatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phfq *ProductHasFeatureQuery) Clone() *ProductHasFeatureQuery {
	if phfq == nil {
		return nil
	}
	return &ProductHasFeatureQuery{
		config:       phfq.config,
		ctx:          phfq.ctx.Clone(),
		order:        append([]producthasfeature.OrderOption{}, phfq.order...),
		inters:       append([]Interceptor{}, phfq.inters...),
		predicates:   append([]predicate.ProductHasFeature{}, phfq.predicates...),
		withProducts: phfq.withProducts.Clone(),
		withFeatures: phfq.withFeatures.Clone(),
		// clone intermediate query.
		sql:  phfq.sql.Clone(),
		path: phfq.path,
	}
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (phfq *ProductHasFeatureQuery) WithProducts(opts ...func(*ProductsQuery)) *ProductHasFeatureQuery {
	query := (&ProductsClient{config: phfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phfq.withProducts = query
	return phfq
}

// WithFeatures tells the query-builder to eager-load the nodes that are connected to
// the "features" edge. The optional arguments are used to configure the query builder of the edge.
func (phfq *ProductHasFeatureQuery) WithFeatures(opts ...func(*FeaturesQuery)) *ProductHasFeatureQuery {
	query := (&FeaturesClient{config: phfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phfq.withFeatures = query
	return phfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductHasFeature.Query().
//		GroupBy(producthasfeature.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (phfq *ProductHasFeatureQuery) GroupBy(field string, fields ...string) *ProductHasFeatureGroupBy {
	phfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductHasFeatureGroupBy{build: phfq}
	grbuild.flds = &phfq.ctx.Fields
	grbuild.label = producthasfeature.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ProductHasFeature.Query().
//		Select(producthasfeature.FieldCreatedAt).
//		Scan(ctx, &v)
func (phfq *ProductHasFeatureQuery) Select(fields ...string) *ProductHasFeatureSelect {
	phfq.ctx.Fields = append(phfq.ctx.Fields, fields...)
	sbuild := &ProductHasFeatureSelect{ProductHasFeatureQuery: phfq}
	sbuild.label = producthasfeature.Label
	sbuild.flds, sbuild.scan = &phfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductHasFeatureSelect configured with the given aggregations.
func (phfq *ProductHasFeatureQuery) Aggregate(fns ...AggregateFunc) *ProductHasFeatureSelect {
	return phfq.Select().Aggregate(fns...)
}

func (phfq *ProductHasFeatureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range phfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, phfq); err != nil {
				return err
			}
		}
	}
	for _, f := range phfq.ctx.Fields {
		if !producthasfeature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phfq.path != nil {
		prev, err := phfq.path(ctx)
		if err != nil {
			return err
		}
		phfq.sql = prev
	}
	return nil
}

func (phfq *ProductHasFeatureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductHasFeature, error) {
	var (
		nodes       = []*ProductHasFeature{}
		_spec       = phfq.querySpec()
		loadedTypes = [2]bool{
			phfq.withProducts != nil,
			phfq.withFeatures != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductHasFeature).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductHasFeature{config: phfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, phfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := phfq.withProducts; query != nil {
		if err := phfq.loadProducts(ctx, query, nodes, nil,
			func(n *ProductHasFeature, e *Products) { n.Edges.Products = e }); err != nil {
			return nil, err
		}
	}
	if query := phfq.withFeatures; query != nil {
		if err := phfq.loadFeatures(ctx, query, nodes, nil,
			func(n *ProductHasFeature, e *Features) { n.Edges.Features = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (phfq *ProductHasFeatureQuery) loadProducts(ctx context.Context, query *ProductsQuery, nodes []*ProductHasFeature, init func(*ProductHasFeature), assign func(*ProductHasFeature, *Products)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductHasFeature)
	for i := range nodes {
		if nodes[i].ProductID == nil {
			continue
		}
		fk := *nodes[i].ProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(products.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phfq *ProductHasFeatureQuery) loadFeatures(ctx context.Context, query *FeaturesQuery, nodes []*ProductHasFeature, init func(*ProductHasFeature), assign func(*ProductHasFeature, *Features)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductHasFeature)
	for i := range nodes {
		if nodes[i].FeatureID == nil {
			continue
		}
		fk := *nodes[i].FeatureID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(features.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (phfq *ProductHasFeatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phfq.querySpec()
	_spec.Node.Columns = phfq.ctx.Fields
	if len(phfq.ctx.Fields) > 0 {
		_spec.Unique = phfq.ctx.Unique != nil && *phfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, phfq.driver, _spec)
}

func (phfq *ProductHasFeatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(producthasfeature.Table, producthasfeature.Columns, sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt))
	_spec.From = phfq.sql
	if unique := phfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if phfq.path != nil {
		_spec.Unique = true
	}
	if fields := phfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producthasfeature.FieldID)
		for i := range fields {
			if fields[i] != producthasfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if phfq.withProducts != nil {
			_spec.Node.AddColumnOnce(producthasfeature.FieldProductID)
		}
		if phfq.withFeatures != nil {
			_spec.Node.AddColumnOnce(producthasfeature.FieldFeatureID)
		}
	}
	if ps := phfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phfq *ProductHasFeatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phfq.driver.Dialect())
	t1 := builder.Table(producthasfeature.Table)
	columns := phfq.ctx.Fields
	if len(columns) == 0 {
		columns = producthasfeature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phfq.sql != nil {
		selector = phfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phfq.ctx.Unique != nil && *phfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range phfq.predicates {
		p(selector)
	}
	for _, p := range phfq.order {
		p(selector)
	}
	if offset := phfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductHasFeatureGroupBy is the group-by builder for ProductHasFeature entities.
type ProductHasFeatureGroupBy struct {
	selector
	build *ProductHasFeatureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phfgb *ProductHasFeatureGroupBy) Aggregate(fns ...AggregateFunc) *ProductHasFeatureGroupBy {
	phfgb.fns = append(phfgb.fns, fns...)
	return phfgb
}

// Scan applies the selector query and scans the result into the given value.
func (phfgb *ProductHasFeatureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phfgb.build.ctx, ent.OpQueryGroupBy)
	if err := phfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductHasFeatureQuery, *ProductHasFeatureGroupBy](ctx, phfgb.build, phfgb, phfgb.build.inters, v)
}

func (phfgb *ProductHasFeatureGroupBy) sqlScan(ctx context.Context, root *ProductHasFeatureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(phfgb.fns))
	for _, fn := range phfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*phfgb.flds)+len(phfgb.fns))
		for _, f := range *phfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*phfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductHasFeatureSelect is the builder for selecting fields of ProductHasFeature entities.
type ProductHasFeatureSelect struct {
	*ProductHasFeatureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (phfs *ProductHasFeatureSelect) Aggregate(fns ...AggregateFunc) *ProductHasFeatureSelect {
	phfs.fns = append(phfs.fns, fns...)
	return phfs
}

// Scan applies the selector query and scans the result into the given value.
func (phfs *ProductHasFeatureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phfs.ctx, ent.OpQuerySelect)
	if err := phfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductHasFeatureQuery, *ProductHasFeatureSelect](ctx, phfs.ProductHasFeatureQuery, phfs, phfs.inters, v)
}

func (phfs *ProductHasFeatureSelect) sqlScan(ctx context.Context, root *ProductHasFeatureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(phfs.fns))
	for _, fn := range phfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*phfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
