// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/producthasfeature"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesCreate is the builder for creating a Features entity.
type FeaturesCreate struct {
	config
	mutation *FeaturesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeaturesCreate) SetCreatedAt(t time.Time) *FeaturesCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FeaturesCreate) SetNillableCreatedAt(t *time.Time) *FeaturesCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeaturesCreate) SetUpdatedAt(t time.Time) *FeaturesCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FeaturesCreate) SetNillableUpdatedAt(t *time.Time) *FeaturesCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FeaturesCreate) SetDeletedAt(t time.Time) *FeaturesCreate {
	fc.mutation.SetDeletedAt(t)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FeaturesCreate) SetNillableDeletedAt(t *time.Time) *FeaturesCreate {
	if t != nil {
		fc.SetDeletedAt(*t)
	}
	return fc
}

// SetCreatedBy sets the "created_by" field.
func (fc *FeaturesCreate) SetCreatedBy(i int) *FeaturesCreate {
	fc.mutation.SetCreatedBy(i)
	return fc
}

// SetUpdatedBy sets the "updated_by" field.
func (fc *FeaturesCreate) SetUpdatedBy(i int) *FeaturesCreate {
	fc.mutation.SetUpdatedBy(i)
	return fc
}

// SetDeletedBy sets the "deleted_by" field.
func (fc *FeaturesCreate) SetDeletedBy(i int) *FeaturesCreate {
	fc.mutation.SetDeletedBy(i)
	return fc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fc *FeaturesCreate) SetNillableDeletedBy(i *int) *FeaturesCreate {
	if i != nil {
		fc.SetDeletedBy(*i)
	}
	return fc
}

// SetFeatureValueID sets the "feature_value_id" field.
func (fc *FeaturesCreate) SetFeatureValueID(i int) *FeaturesCreate {
	fc.mutation.SetFeatureValueID(i)
	return fc
}

// SetName sets the "name" field.
func (fc *FeaturesCreate) SetName(s string) *FeaturesCreate {
	fc.mutation.SetName(s)
	return fc
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fc *FeaturesCreate) AddFeatureValueIDs(ids ...int) *FeaturesCreate {
	fc.mutation.AddFeatureValueIDs(ids...)
	return fc
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fc *FeaturesCreate) AddFeatureValues(f ...*FeaturesValues) *FeaturesCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFeatureValueIDs(ids...)
}

// AddProductHasFeatureIDs adds the "product_has_feature" edge to the ProductHasFeature entity by IDs.
func (fc *FeaturesCreate) AddProductHasFeatureIDs(ids ...int) *FeaturesCreate {
	fc.mutation.AddProductHasFeatureIDs(ids...)
	return fc
}

// AddProductHasFeature adds the "product_has_feature" edges to the ProductHasFeature entity.
func (fc *FeaturesCreate) AddProductHasFeature(p ...*ProductHasFeature) *FeaturesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fc.AddProductHasFeatureIDs(ids...)
}

// Mutation returns the FeaturesMutation object of the builder.
func (fc *FeaturesCreate) Mutation() *FeaturesMutation {
	return fc.mutation
}

// Save creates the Features in the database.
func (fc *FeaturesCreate) Save(ctx context.Context) (*Features, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeaturesCreate) SaveX(ctx context.Context) *Features {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeaturesCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeaturesCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeaturesCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := features.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := features.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeaturesCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Features.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Features.updated_at"`)}
	}
	if _, ok := fc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Features.created_by"`)}
	}
	if v, ok := fc.mutation.CreatedBy(); ok {
		if err := features.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Features.created_by": %w`, err)}
		}
	}
	if _, ok := fc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Features.updated_by"`)}
	}
	if v, ok := fc.mutation.UpdatedBy(); ok {
		if err := features.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Features.updated_by": %w`, err)}
		}
	}
	if _, ok := fc.mutation.FeatureValueID(); !ok {
		return &ValidationError{Name: "feature_value_id", err: errors.New(`ent: missing required field "Features.feature_value_id"`)}
	}
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Features.name"`)}
	}
	return nil
}

func (fc *FeaturesCreate) sqlSave(ctx context.Context) (*Features, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FeaturesCreate) createSpec() (*Features, *sqlgraph.CreateSpec) {
	var (
		_node = &Features{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(features.Table, sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(features.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(features.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.SetField(features.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fc.mutation.CreatedBy(); ok {
		_spec.SetField(features.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := fc.mutation.UpdatedBy(); ok {
		_spec.SetField(features.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := fc.mutation.DeletedBy(); ok {
		_spec.SetField(features.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if value, ok := fc.mutation.FeatureValueID(); ok {
		_spec.SetField(features.FieldFeatureValueID, field.TypeInt, value)
		_node.FeatureValueID = &value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(features.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if nodes := fc.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.FeatureValuesTable,
			Columns: []string{features.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ProductHasFeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.ProductHasFeatureTable,
			Columns: []string{features.ProductHasFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeaturesCreateBulk is the builder for creating many Features entities in bulk.
type FeaturesCreateBulk struct {
	config
	err      error
	builders []*FeaturesCreate
}

// Save creates the Features entities in the database.
func (fcb *FeaturesCreateBulk) Save(ctx context.Context) ([]*Features, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Features, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeaturesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeaturesCreateBulk) SaveX(ctx context.Context) []*Features {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeaturesCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeaturesCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
