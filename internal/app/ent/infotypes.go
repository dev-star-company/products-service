// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/infotypes"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InfoTypes is the model entity for the InfoTypes schema.
type InfoTypes struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InfoTypesQuery when eager-loading is set.
	Edges        InfoTypesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InfoTypesEdges holds the relations/edges for other nodes in the graph.
type InfoTypesEdges struct {
	// ProductInfo holds the value of the product_info edge.
	ProductInfo []*ProductInfo `json:"product_info,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductInfoOrErr returns the ProductInfo value or an error if the edge
// was not loaded in eager-loading.
func (e InfoTypesEdges) ProductInfoOrErr() ([]*ProductInfo, error) {
	if e.loadedTypes[0] {
		return e.ProductInfo, nil
	}
	return nil, &NotLoadedError{edge: "product_info"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InfoTypes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case infotypes.FieldID, infotypes.FieldCreatedBy, infotypes.FieldUpdatedBy, infotypes.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case infotypes.FieldName:
			values[i] = new(sql.NullString)
		case infotypes.FieldCreatedAt, infotypes.FieldUpdatedAt, infotypes.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InfoTypes fields.
func (it *InfoTypes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case infotypes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			it.ID = int(value.Int64)
		case infotypes.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				it.CreatedAt = value.Time
			}
		case infotypes.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				it.UpdatedAt = value.Time
			}
		case infotypes.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				it.DeletedAt = new(time.Time)
				*it.DeletedAt = value.Time
			}
		case infotypes.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				it.CreatedBy = int(value.Int64)
			}
		case infotypes.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				it.UpdatedBy = int(value.Int64)
			}
		case infotypes.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				it.DeletedBy = new(int)
				*it.DeletedBy = int(value.Int64)
			}
		case infotypes.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				it.Name = new(string)
				*it.Name = value.String
			}
		default:
			it.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InfoTypes.
// This includes values selected through modifiers, order, etc.
func (it *InfoTypes) Value(name string) (ent.Value, error) {
	return it.selectValues.Get(name)
}

// QueryProductInfo queries the "product_info" edge of the InfoTypes entity.
func (it *InfoTypes) QueryProductInfo() *ProductInfoQuery {
	return NewInfoTypesClient(it.config).QueryProductInfo(it)
}

// Update returns a builder for updating this InfoTypes.
// Note that you need to call InfoTypes.Unwrap() before calling this method if this InfoTypes
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *InfoTypes) Update() *InfoTypesUpdateOne {
	return NewInfoTypesClient(it.config).UpdateOne(it)
}

// Unwrap unwraps the InfoTypes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *InfoTypes) Unwrap() *InfoTypes {
	_tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: InfoTypes is not a transactional entity")
	}
	it.config.driver = _tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *InfoTypes) String() string {
	var builder strings.Builder
	builder.WriteString("InfoTypes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", it.ID))
	builder.WriteString("created_at=")
	builder.WriteString(it.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(it.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := it.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", it.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", it.UpdatedBy))
	builder.WriteString(", ")
	if v := it.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := it.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// InfoTypesSlice is a parsable slice of InfoTypes.
type InfoTypesSlice []*InfoTypes
