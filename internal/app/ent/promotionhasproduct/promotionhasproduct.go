// Code generated by ent, DO NOT EDIT.

package promotionhasproduct

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotionhasproduct type in the database.
	Label = "promotion_has_product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldProductsID holds the string denoting the products_id field in the database.
	FieldProductsID = "products_id"
	// FieldPromotionsID holds the string denoting the promotions_id field in the database.
	FieldPromotionsID = "promotions_id"
	// FieldPromocionalPrice holds the string denoting the promocional_price field in the database.
	FieldPromocionalPrice = "promocional_price"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgePromotions holds the string denoting the promotions edge name in mutations.
	EdgePromotions = "promotions"
	// Table holds the table name of the promotionhasproduct in the database.
	Table = "promotion_has_products"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "promotion_has_products"
	// ProductsInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	ProductsInverseTable = "products"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "products_id"
	// PromotionsTable is the table that holds the promotions relation/edge.
	PromotionsTable = "promotion_has_products"
	// PromotionsInverseTable is the table name for the Promotions entity.
	// It exists in this package in order to avoid circular dependency with the "promotions" package.
	PromotionsInverseTable = "promotions"
	// PromotionsColumn is the table column denoting the promotions relation/edge.
	PromotionsColumn = "promotions_id"
)

// Columns holds all SQL columns for promotionhasproduct fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldProductsID,
	FieldPromotionsID,
	FieldPromocionalPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the PromotionHasProduct queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByProductsID orders the results by the products_id field.
func ByProductsID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductsID, opts...).ToFunc()
}

// ByPromotionsID orders the results by the promotions_id field.
func ByPromotionsID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromotionsID, opts...).ToFunc()
}

// ByPromocionalPrice orders the results by the promocional_price field.
func ByPromocionalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromocionalPrice, opts...).ToFunc()
}

// ByProductsField orders the results by products field.
func ByProductsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), sql.OrderByField(field, opts...))
	}
}

// ByPromotionsField orders the results by promotions field.
func ByPromotionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromotionsStep(), sql.OrderByField(field, opts...))
	}
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
	)
}
func newPromotionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromotionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PromotionsTable, PromotionsColumn),
	)
}
