// Code generated by ent, DO NOT EDIT.

package promotionhasproduct

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldDeletedAt, v))
}

// ProductsID applies equality check predicate on the "products_id" field. It's identical to ProductsIDEQ.
func ProductsID(v int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldProductsID, v))
}

// PromotionsID applies equality check predicate on the "promotions_id" field. It's identical to PromotionsIDEQ.
func PromotionsID(v int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldPromotionsID, v))
}

// PromocionalPrice applies equality check predicate on the "promocional_price" field. It's identical to PromocionalPriceEQ.
func PromocionalPrice(v float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldPromocionalPrice, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotNull(FieldDeletedAt))
}

// ProductsIDEQ applies the EQ predicate on the "products_id" field.
func ProductsIDEQ(v int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldProductsID, v))
}

// ProductsIDNEQ applies the NEQ predicate on the "products_id" field.
func ProductsIDNEQ(v int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNEQ(FieldProductsID, v))
}

// ProductsIDIn applies the In predicate on the "products_id" field.
func ProductsIDIn(vs ...int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIn(FieldProductsID, vs...))
}

// ProductsIDNotIn applies the NotIn predicate on the "products_id" field.
func ProductsIDNotIn(vs ...int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotIn(FieldProductsID, vs...))
}

// ProductsIDIsNil applies the IsNil predicate on the "products_id" field.
func ProductsIDIsNil() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIsNull(FieldProductsID))
}

// ProductsIDNotNil applies the NotNil predicate on the "products_id" field.
func ProductsIDNotNil() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotNull(FieldProductsID))
}

// PromotionsIDEQ applies the EQ predicate on the "promotions_id" field.
func PromotionsIDEQ(v int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldPromotionsID, v))
}

// PromotionsIDNEQ applies the NEQ predicate on the "promotions_id" field.
func PromotionsIDNEQ(v int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNEQ(FieldPromotionsID, v))
}

// PromotionsIDIn applies the In predicate on the "promotions_id" field.
func PromotionsIDIn(vs ...int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIn(FieldPromotionsID, vs...))
}

// PromotionsIDNotIn applies the NotIn predicate on the "promotions_id" field.
func PromotionsIDNotIn(vs ...int) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotIn(FieldPromotionsID, vs...))
}

// PromotionsIDIsNil applies the IsNil predicate on the "promotions_id" field.
func PromotionsIDIsNil() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIsNull(FieldPromotionsID))
}

// PromotionsIDNotNil applies the NotNil predicate on the "promotions_id" field.
func PromotionsIDNotNil() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotNull(FieldPromotionsID))
}

// PromocionalPriceEQ applies the EQ predicate on the "promocional_price" field.
func PromocionalPriceEQ(v float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldEQ(FieldPromocionalPrice, v))
}

// PromocionalPriceNEQ applies the NEQ predicate on the "promocional_price" field.
func PromocionalPriceNEQ(v float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNEQ(FieldPromocionalPrice, v))
}

// PromocionalPriceIn applies the In predicate on the "promocional_price" field.
func PromocionalPriceIn(vs ...float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldIn(FieldPromocionalPrice, vs...))
}

// PromocionalPriceNotIn applies the NotIn predicate on the "promocional_price" field.
func PromocionalPriceNotIn(vs ...float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldNotIn(FieldPromocionalPrice, vs...))
}

// PromocionalPriceGT applies the GT predicate on the "promocional_price" field.
func PromocionalPriceGT(v float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGT(FieldPromocionalPrice, v))
}

// PromocionalPriceGTE applies the GTE predicate on the "promocional_price" field.
func PromocionalPriceGTE(v float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldGTE(FieldPromocionalPrice, v))
}

// PromocionalPriceLT applies the LT predicate on the "promocional_price" field.
func PromocionalPriceLT(v float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLT(FieldPromocionalPrice, v))
}

// PromocionalPriceLTE applies the LTE predicate on the "promocional_price" field.
func PromocionalPriceLTE(v float64) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.FieldLTE(FieldPromocionalPrice, v))
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Products) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPromotions applies the HasEdge predicate on the "promotions" edge.
func HasPromotions() predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PromotionsTable, PromotionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromotionsWith applies the HasEdge predicate on the "promotions" edge with a given conditions (other predicates).
func HasPromotionsWith(preds ...predicate.Promotions) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(func(s *sql.Selector) {
		step := newPromotionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PromotionHasProduct) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PromotionHasProduct) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PromotionHasProduct) predicate.PromotionHasProduct {
	return predicate.PromotionHasProduct(sql.NotPredicates(p))
}
