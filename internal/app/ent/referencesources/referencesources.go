// Code generated by ent, DO NOT EDIT.

package referencesources

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the referencesources type in the database.
	Label = "reference_sources"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeProductReferences holds the string denoting the product_references edge name in mutations.
	EdgeProductReferences = "product_references"
	// Table holds the table name of the referencesources in the database.
	Table = "reference_sources"
	// ProductReferencesTable is the table that holds the product_references relation/edge.
	ProductReferencesTable = "product_references"
	// ProductReferencesInverseTable is the table name for the ProductReferences entity.
	// It exists in this package in order to avoid circular dependency with the "productreferences" package.
	ProductReferencesInverseTable = "product_references"
	// ProductReferencesColumn is the table column denoting the product_references relation/edge.
	ProductReferencesColumn = "reference_source_id"
)

// Columns holds all SQL columns for referencesources fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ReferenceSources queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProductReferencesCount orders the results by product_references count.
func ByProductReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductReferencesStep(), opts...)
	}
}

// ByProductReferences orders the results by product_references terms.
func ByProductReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductReferencesTable, ProductReferencesColumn),
	)
}
