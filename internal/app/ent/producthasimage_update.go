// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/images"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasimage"
	"products-service/internal/app/ent/products"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasImageUpdate is the builder for updating ProductHasImage entities.
type ProductHasImageUpdate struct {
	config
	hooks    []Hook
	mutation *ProductHasImageMutation
}

// Where appends a list predicates to the ProductHasImageUpdate builder.
func (phiu *ProductHasImageUpdate) Where(ps ...predicate.ProductHasImage) *ProductHasImageUpdate {
	phiu.mutation.Where(ps...)
	return phiu
}

// SetUpdatedAt sets the "updated_at" field.
func (phiu *ProductHasImageUpdate) SetUpdatedAt(t time.Time) *ProductHasImageUpdate {
	phiu.mutation.SetUpdatedAt(t)
	return phiu
}

// SetDeletedAt sets the "deleted_at" field.
func (phiu *ProductHasImageUpdate) SetDeletedAt(t time.Time) *ProductHasImageUpdate {
	phiu.mutation.SetDeletedAt(t)
	return phiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phiu *ProductHasImageUpdate) SetNillableDeletedAt(t *time.Time) *ProductHasImageUpdate {
	if t != nil {
		phiu.SetDeletedAt(*t)
	}
	return phiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phiu *ProductHasImageUpdate) ClearDeletedAt() *ProductHasImageUpdate {
	phiu.mutation.ClearDeletedAt()
	return phiu
}

// SetUpdatedBy sets the "updated_by" field.
func (phiu *ProductHasImageUpdate) SetUpdatedBy(i int) *ProductHasImageUpdate {
	phiu.mutation.ResetUpdatedBy()
	phiu.mutation.SetUpdatedBy(i)
	return phiu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phiu *ProductHasImageUpdate) SetNillableUpdatedBy(i *int) *ProductHasImageUpdate {
	if i != nil {
		phiu.SetUpdatedBy(*i)
	}
	return phiu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (phiu *ProductHasImageUpdate) AddUpdatedBy(i int) *ProductHasImageUpdate {
	phiu.mutation.AddUpdatedBy(i)
	return phiu
}

// SetDeletedBy sets the "deleted_by" field.
func (phiu *ProductHasImageUpdate) SetDeletedBy(i int) *ProductHasImageUpdate {
	phiu.mutation.ResetDeletedBy()
	phiu.mutation.SetDeletedBy(i)
	return phiu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phiu *ProductHasImageUpdate) SetNillableDeletedBy(i *int) *ProductHasImageUpdate {
	if i != nil {
		phiu.SetDeletedBy(*i)
	}
	return phiu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (phiu *ProductHasImageUpdate) AddDeletedBy(i int) *ProductHasImageUpdate {
	phiu.mutation.AddDeletedBy(i)
	return phiu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phiu *ProductHasImageUpdate) ClearDeletedBy() *ProductHasImageUpdate {
	phiu.mutation.ClearDeletedBy()
	return phiu
}

// SetImageID sets the "image_id" field.
func (phiu *ProductHasImageUpdate) SetImageID(i int) *ProductHasImageUpdate {
	phiu.mutation.SetImageID(i)
	return phiu
}

// SetNillableImageID sets the "image_id" field if the given value is not nil.
func (phiu *ProductHasImageUpdate) SetNillableImageID(i *int) *ProductHasImageUpdate {
	if i != nil {
		phiu.SetImageID(*i)
	}
	return phiu
}

// SetProductID sets the "product_id" field.
func (phiu *ProductHasImageUpdate) SetProductID(i int) *ProductHasImageUpdate {
	phiu.mutation.SetProductID(i)
	return phiu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phiu *ProductHasImageUpdate) SetNillableProductID(i *int) *ProductHasImageUpdate {
	if i != nil {
		phiu.SetProductID(*i)
	}
	return phiu
}

// ClearProductID clears the value of the "product_id" field.
func (phiu *ProductHasImageUpdate) ClearProductID() *ProductHasImageUpdate {
	phiu.mutation.ClearProductID()
	return phiu
}

// SetPriority sets the "priority" field.
func (phiu *ProductHasImageUpdate) SetPriority(i int) *ProductHasImageUpdate {
	phiu.mutation.ResetPriority()
	phiu.mutation.SetPriority(i)
	return phiu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (phiu *ProductHasImageUpdate) SetNillablePriority(i *int) *ProductHasImageUpdate {
	if i != nil {
		phiu.SetPriority(*i)
	}
	return phiu
}

// AddPriority adds i to the "priority" field.
func (phiu *ProductHasImageUpdate) AddPriority(i int) *ProductHasImageUpdate {
	phiu.mutation.AddPriority(i)
	return phiu
}

// SetProduct sets the "product" edge to the Products entity.
func (phiu *ProductHasImageUpdate) SetProduct(p *Products) *ProductHasImageUpdate {
	return phiu.SetProductID(p.ID)
}

// SetImage sets the "image" edge to the Images entity.
func (phiu *ProductHasImageUpdate) SetImage(i *Images) *ProductHasImageUpdate {
	return phiu.SetImageID(i.ID)
}

// Mutation returns the ProductHasImageMutation object of the builder.
func (phiu *ProductHasImageUpdate) Mutation() *ProductHasImageMutation {
	return phiu.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (phiu *ProductHasImageUpdate) ClearProduct() *ProductHasImageUpdate {
	phiu.mutation.ClearProduct()
	return phiu
}

// ClearImage clears the "image" edge to the Images entity.
func (phiu *ProductHasImageUpdate) ClearImage() *ProductHasImageUpdate {
	phiu.mutation.ClearImage()
	return phiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phiu *ProductHasImageUpdate) Save(ctx context.Context) (int, error) {
	phiu.defaults()
	return withHooks(ctx, phiu.sqlSave, phiu.mutation, phiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phiu *ProductHasImageUpdate) SaveX(ctx context.Context) int {
	affected, err := phiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phiu *ProductHasImageUpdate) Exec(ctx context.Context) error {
	_, err := phiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phiu *ProductHasImageUpdate) ExecX(ctx context.Context) {
	if err := phiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phiu *ProductHasImageUpdate) defaults() {
	if _, ok := phiu.mutation.UpdatedAt(); !ok {
		v := producthasimage.UpdateDefaultUpdatedAt()
		phiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phiu *ProductHasImageUpdate) check() error {
	if v, ok := phiu.mutation.UpdatedBy(); ok {
		if err := producthasimage.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProductHasImage.updated_by": %w`, err)}
		}
	}
	if phiu.mutation.ImageCleared() && len(phiu.mutation.ImageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductHasImage.image"`)
	}
	return nil
}

func (phiu *ProductHasImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(producthasimage.Table, producthasimage.Columns, sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt))
	if ps := phiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phiu.mutation.UpdatedAt(); ok {
		_spec.SetField(producthasimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := phiu.mutation.DeletedAt(); ok {
		_spec.SetField(producthasimage.FieldDeletedAt, field.TypeTime, value)
	}
	if phiu.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasimage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phiu.mutation.UpdatedBy(); ok {
		_spec.SetField(producthasimage.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phiu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(producthasimage.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phiu.mutation.DeletedBy(); ok {
		_spec.SetField(producthasimage.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := phiu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(producthasimage.FieldDeletedBy, field.TypeInt, value)
	}
	if phiu.mutation.DeletedByCleared() {
		_spec.ClearField(producthasimage.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := phiu.mutation.Priority(); ok {
		_spec.SetField(producthasimage.FieldPriority, field.TypeInt, value)
	}
	if value, ok := phiu.mutation.AddedPriority(); ok {
		_spec.AddField(producthasimage.FieldPriority, field.TypeInt, value)
	}
	if phiu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ProductTable,
			Columns: []string{producthasimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ProductTable,
			Columns: []string{producthasimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phiu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ImageTable,
			Columns: []string{producthasimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ImageTable,
			Columns: []string{producthasimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phiu.mutation.done = true
	return n, nil
}

// ProductHasImageUpdateOne is the builder for updating a single ProductHasImage entity.
type ProductHasImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductHasImageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (phiuo *ProductHasImageUpdateOne) SetUpdatedAt(t time.Time) *ProductHasImageUpdateOne {
	phiuo.mutation.SetUpdatedAt(t)
	return phiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (phiuo *ProductHasImageUpdateOne) SetDeletedAt(t time.Time) *ProductHasImageUpdateOne {
	phiuo.mutation.SetDeletedAt(t)
	return phiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phiuo *ProductHasImageUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductHasImageUpdateOne {
	if t != nil {
		phiuo.SetDeletedAt(*t)
	}
	return phiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phiuo *ProductHasImageUpdateOne) ClearDeletedAt() *ProductHasImageUpdateOne {
	phiuo.mutation.ClearDeletedAt()
	return phiuo
}

// SetUpdatedBy sets the "updated_by" field.
func (phiuo *ProductHasImageUpdateOne) SetUpdatedBy(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.ResetUpdatedBy()
	phiuo.mutation.SetUpdatedBy(i)
	return phiuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phiuo *ProductHasImageUpdateOne) SetNillableUpdatedBy(i *int) *ProductHasImageUpdateOne {
	if i != nil {
		phiuo.SetUpdatedBy(*i)
	}
	return phiuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (phiuo *ProductHasImageUpdateOne) AddUpdatedBy(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.AddUpdatedBy(i)
	return phiuo
}

// SetDeletedBy sets the "deleted_by" field.
func (phiuo *ProductHasImageUpdateOne) SetDeletedBy(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.ResetDeletedBy()
	phiuo.mutation.SetDeletedBy(i)
	return phiuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phiuo *ProductHasImageUpdateOne) SetNillableDeletedBy(i *int) *ProductHasImageUpdateOne {
	if i != nil {
		phiuo.SetDeletedBy(*i)
	}
	return phiuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (phiuo *ProductHasImageUpdateOne) AddDeletedBy(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.AddDeletedBy(i)
	return phiuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phiuo *ProductHasImageUpdateOne) ClearDeletedBy() *ProductHasImageUpdateOne {
	phiuo.mutation.ClearDeletedBy()
	return phiuo
}

// SetImageID sets the "image_id" field.
func (phiuo *ProductHasImageUpdateOne) SetImageID(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.SetImageID(i)
	return phiuo
}

// SetNillableImageID sets the "image_id" field if the given value is not nil.
func (phiuo *ProductHasImageUpdateOne) SetNillableImageID(i *int) *ProductHasImageUpdateOne {
	if i != nil {
		phiuo.SetImageID(*i)
	}
	return phiuo
}

// SetProductID sets the "product_id" field.
func (phiuo *ProductHasImageUpdateOne) SetProductID(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.SetProductID(i)
	return phiuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phiuo *ProductHasImageUpdateOne) SetNillableProductID(i *int) *ProductHasImageUpdateOne {
	if i != nil {
		phiuo.SetProductID(*i)
	}
	return phiuo
}

// ClearProductID clears the value of the "product_id" field.
func (phiuo *ProductHasImageUpdateOne) ClearProductID() *ProductHasImageUpdateOne {
	phiuo.mutation.ClearProductID()
	return phiuo
}

// SetPriority sets the "priority" field.
func (phiuo *ProductHasImageUpdateOne) SetPriority(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.ResetPriority()
	phiuo.mutation.SetPriority(i)
	return phiuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (phiuo *ProductHasImageUpdateOne) SetNillablePriority(i *int) *ProductHasImageUpdateOne {
	if i != nil {
		phiuo.SetPriority(*i)
	}
	return phiuo
}

// AddPriority adds i to the "priority" field.
func (phiuo *ProductHasImageUpdateOne) AddPriority(i int) *ProductHasImageUpdateOne {
	phiuo.mutation.AddPriority(i)
	return phiuo
}

// SetProduct sets the "product" edge to the Products entity.
func (phiuo *ProductHasImageUpdateOne) SetProduct(p *Products) *ProductHasImageUpdateOne {
	return phiuo.SetProductID(p.ID)
}

// SetImage sets the "image" edge to the Images entity.
func (phiuo *ProductHasImageUpdateOne) SetImage(i *Images) *ProductHasImageUpdateOne {
	return phiuo.SetImageID(i.ID)
}

// Mutation returns the ProductHasImageMutation object of the builder.
func (phiuo *ProductHasImageUpdateOne) Mutation() *ProductHasImageMutation {
	return phiuo.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (phiuo *ProductHasImageUpdateOne) ClearProduct() *ProductHasImageUpdateOne {
	phiuo.mutation.ClearProduct()
	return phiuo
}

// ClearImage clears the "image" edge to the Images entity.
func (phiuo *ProductHasImageUpdateOne) ClearImage() *ProductHasImageUpdateOne {
	phiuo.mutation.ClearImage()
	return phiuo
}

// Where appends a list predicates to the ProductHasImageUpdate builder.
func (phiuo *ProductHasImageUpdateOne) Where(ps ...predicate.ProductHasImage) *ProductHasImageUpdateOne {
	phiuo.mutation.Where(ps...)
	return phiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phiuo *ProductHasImageUpdateOne) Select(field string, fields ...string) *ProductHasImageUpdateOne {
	phiuo.fields = append([]string{field}, fields...)
	return phiuo
}

// Save executes the query and returns the updated ProductHasImage entity.
func (phiuo *ProductHasImageUpdateOne) Save(ctx context.Context) (*ProductHasImage, error) {
	phiuo.defaults()
	return withHooks(ctx, phiuo.sqlSave, phiuo.mutation, phiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phiuo *ProductHasImageUpdateOne) SaveX(ctx context.Context) *ProductHasImage {
	node, err := phiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phiuo *ProductHasImageUpdateOne) Exec(ctx context.Context) error {
	_, err := phiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phiuo *ProductHasImageUpdateOne) ExecX(ctx context.Context) {
	if err := phiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phiuo *ProductHasImageUpdateOne) defaults() {
	if _, ok := phiuo.mutation.UpdatedAt(); !ok {
		v := producthasimage.UpdateDefaultUpdatedAt()
		phiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phiuo *ProductHasImageUpdateOne) check() error {
	if v, ok := phiuo.mutation.UpdatedBy(); ok {
		if err := producthasimage.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProductHasImage.updated_by": %w`, err)}
		}
	}
	if phiuo.mutation.ImageCleared() && len(phiuo.mutation.ImageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductHasImage.image"`)
	}
	return nil
}

func (phiuo *ProductHasImageUpdateOne) sqlSave(ctx context.Context) (_node *ProductHasImage, err error) {
	if err := phiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(producthasimage.Table, producthasimage.Columns, sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt))
	id, ok := phiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductHasImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producthasimage.FieldID)
		for _, f := range fields {
			if !producthasimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != producthasimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(producthasimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := phiuo.mutation.DeletedAt(); ok {
		_spec.SetField(producthasimage.FieldDeletedAt, field.TypeTime, value)
	}
	if phiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasimage.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phiuo.mutation.UpdatedBy(); ok {
		_spec.SetField(producthasimage.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phiuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(producthasimage.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phiuo.mutation.DeletedBy(); ok {
		_spec.SetField(producthasimage.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := phiuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(producthasimage.FieldDeletedBy, field.TypeInt, value)
	}
	if phiuo.mutation.DeletedByCleared() {
		_spec.ClearField(producthasimage.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := phiuo.mutation.Priority(); ok {
		_spec.SetField(producthasimage.FieldPriority, field.TypeInt, value)
	}
	if value, ok := phiuo.mutation.AddedPriority(); ok {
		_spec.AddField(producthasimage.FieldPriority, field.TypeInt, value)
	}
	if phiuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ProductTable,
			Columns: []string{producthasimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ProductTable,
			Columns: []string{producthasimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phiuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ImageTable,
			Columns: []string{producthasimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phiuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasimage.ImageTable,
			Columns: []string{producthasimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductHasImage{config: phiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phiuo.mutation.done = true
	return _node, nil
}
