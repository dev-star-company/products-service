// Code generated by ent, DO NOT EDIT.

package imagefolderpath

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the imagefolderpath type in the database.
	Label = "image_folder_path"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldImageFolderSourceID holds the string denoting the image_folder_source_id field in the database.
	FieldImageFolderSourceID = "image_folder_source_id"
	// EdgeImageFolderSource holds the string denoting the image_folder_source edge name in mutations.
	EdgeImageFolderSource = "image_folder_source"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// Table holds the table name of the imagefolderpath in the database.
	Table = "image_folder_paths"
	// ImageFolderSourceTable is the table that holds the image_folder_source relation/edge.
	ImageFolderSourceTable = "image_folder_paths"
	// ImageFolderSourceInverseTable is the table name for the ImageFolderSource entity.
	// It exists in this package in order to avoid circular dependency with the "imagefoldersource" package.
	ImageFolderSourceInverseTable = "image_folder_sources"
	// ImageFolderSourceColumn is the table column denoting the image_folder_source relation/edge.
	ImageFolderSourceColumn = "image_folder_source_id"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "images"
	// ImagesInverseTable is the table name for the Images entity.
	// It exists in this package in order to avoid circular dependency with the "images" package.
	ImagesInverseTable = "images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "image_folder_path_images"
)

// Columns holds all SQL columns for imagefolderpath fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldImageFolderSourceID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ImageFolderPath queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByImageFolderSourceID orders the results by the image_folder_source_id field.
func ByImageFolderSourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageFolderSourceID, opts...).ToFunc()
}

// ByImageFolderSourceField orders the results by image_folder_source field.
func ByImageFolderSourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageFolderSourceStep(), sql.OrderByField(field, opts...))
	}
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImageFolderSourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageFolderSourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ImageFolderSourceTable, ImageFolderSourceColumn),
	)
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
	)
}
