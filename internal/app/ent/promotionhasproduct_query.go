// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionHasProductQuery is the builder for querying PromotionHasProduct entities.
type PromotionHasProductQuery struct {
	config
	ctx            *QueryContext
	order          []promotionhasproduct.OrderOption
	inters         []Interceptor
	predicates     []predicate.PromotionHasProduct
	withProducts   *ProductsQuery
	withPromotions *PromotionsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionHasProductQuery builder.
func (phpq *PromotionHasProductQuery) Where(ps ...predicate.PromotionHasProduct) *PromotionHasProductQuery {
	phpq.predicates = append(phpq.predicates, ps...)
	return phpq
}

// Limit the number of records to be returned by this query.
func (phpq *PromotionHasProductQuery) Limit(limit int) *PromotionHasProductQuery {
	phpq.ctx.Limit = &limit
	return phpq
}

// Offset to start from.
func (phpq *PromotionHasProductQuery) Offset(offset int) *PromotionHasProductQuery {
	phpq.ctx.Offset = &offset
	return phpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phpq *PromotionHasProductQuery) Unique(unique bool) *PromotionHasProductQuery {
	phpq.ctx.Unique = &unique
	return phpq
}

// Order specifies how the records should be ordered.
func (phpq *PromotionHasProductQuery) Order(o ...promotionhasproduct.OrderOption) *PromotionHasProductQuery {
	phpq.order = append(phpq.order, o...)
	return phpq
}

// QueryProducts chains the current query on the "products" edge.
func (phpq *PromotionHasProductQuery) QueryProducts() *ProductsQuery {
	query := (&ProductsClient{config: phpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionhasproduct.Table, promotionhasproduct.FieldID, selector),
			sqlgraph.To(products.Table, products.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionhasproduct.ProductsTable, promotionhasproduct.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(phpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPromotions chains the current query on the "promotions" edge.
func (phpq *PromotionHasProductQuery) QueryPromotions() *PromotionsQuery {
	query := (&PromotionsClient{config: phpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionhasproduct.Table, promotionhasproduct.FieldID, selector),
			sqlgraph.To(promotions.Table, promotions.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionhasproduct.PromotionsTable, promotionhasproduct.PromotionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(phpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PromotionHasProduct entity from the query.
// Returns a *NotFoundError when no PromotionHasProduct was found.
func (phpq *PromotionHasProductQuery) First(ctx context.Context) (*PromotionHasProduct, error) {
	nodes, err := phpq.Limit(1).All(setContextOp(ctx, phpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotionhasproduct.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) FirstX(ctx context.Context) *PromotionHasProduct {
	node, err := phpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionHasProduct ID from the query.
// Returns a *NotFoundError when no PromotionHasProduct ID was found.
func (phpq *PromotionHasProductQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phpq.Limit(1).IDs(setContextOp(ctx, phpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotionhasproduct.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) FirstIDX(ctx context.Context) int {
	id, err := phpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionHasProduct entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionHasProduct entity is found.
// Returns a *NotFoundError when no PromotionHasProduct entities are found.
func (phpq *PromotionHasProductQuery) Only(ctx context.Context) (*PromotionHasProduct, error) {
	nodes, err := phpq.Limit(2).All(setContextOp(ctx, phpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotionhasproduct.Label}
	default:
		return nil, &NotSingularError{promotionhasproduct.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) OnlyX(ctx context.Context) *PromotionHasProduct {
	node, err := phpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionHasProduct ID in the query.
// Returns a *NotSingularError when more than one PromotionHasProduct ID is found.
// Returns a *NotFoundError when no entities are found.
func (phpq *PromotionHasProductQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phpq.Limit(2).IDs(setContextOp(ctx, phpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotionhasproduct.Label}
	default:
		err = &NotSingularError{promotionhasproduct.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) OnlyIDX(ctx context.Context) int {
	id, err := phpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionHasProducts.
func (phpq *PromotionHasProductQuery) All(ctx context.Context) ([]*PromotionHasProduct, error) {
	ctx = setContextOp(ctx, phpq.ctx, ent.OpQueryAll)
	if err := phpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionHasProduct, *PromotionHasProductQuery]()
	return withInterceptors[[]*PromotionHasProduct](ctx, phpq, qr, phpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) AllX(ctx context.Context) []*PromotionHasProduct {
	nodes, err := phpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionHasProduct IDs.
func (phpq *PromotionHasProductQuery) IDs(ctx context.Context) (ids []int, err error) {
	if phpq.ctx.Unique == nil && phpq.path != nil {
		phpq.Unique(true)
	}
	ctx = setContextOp(ctx, phpq.ctx, ent.OpQueryIDs)
	if err = phpq.Select(promotionhasproduct.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) IDsX(ctx context.Context) []int {
	ids, err := phpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phpq *PromotionHasProductQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, phpq.ctx, ent.OpQueryCount)
	if err := phpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, phpq, querierCount[*PromotionHasProductQuery](), phpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) CountX(ctx context.Context) int {
	count, err := phpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phpq *PromotionHasProductQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, phpq.ctx, ent.OpQueryExist)
	switch _, err := phpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (phpq *PromotionHasProductQuery) ExistX(ctx context.Context) bool {
	exist, err := phpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionHasProductQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phpq *PromotionHasProductQuery) Clone() *PromotionHasProductQuery {
	if phpq == nil {
		return nil
	}
	return &PromotionHasProductQuery{
		config:         phpq.config,
		ctx:            phpq.ctx.Clone(),
		order:          append([]promotionhasproduct.OrderOption{}, phpq.order...),
		inters:         append([]Interceptor{}, phpq.inters...),
		predicates:     append([]predicate.PromotionHasProduct{}, phpq.predicates...),
		withProducts:   phpq.withProducts.Clone(),
		withPromotions: phpq.withPromotions.Clone(),
		// clone intermediate query.
		sql:  phpq.sql.Clone(),
		path: phpq.path,
	}
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (phpq *PromotionHasProductQuery) WithProducts(opts ...func(*ProductsQuery)) *PromotionHasProductQuery {
	query := (&ProductsClient{config: phpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phpq.withProducts = query
	return phpq
}

// WithPromotions tells the query-builder to eager-load the nodes that are connected to
// the "promotions" edge. The optional arguments are used to configure the query builder of the edge.
func (phpq *PromotionHasProductQuery) WithPromotions(opts ...func(*PromotionsQuery)) *PromotionHasProductQuery {
	query := (&PromotionsClient{config: phpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phpq.withPromotions = query
	return phpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionHasProduct.Query().
//		GroupBy(promotionhasproduct.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (phpq *PromotionHasProductQuery) GroupBy(field string, fields ...string) *PromotionHasProductGroupBy {
	phpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionHasProductGroupBy{build: phpq}
	grbuild.flds = &phpq.ctx.Fields
	grbuild.label = promotionhasproduct.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionHasProduct.Query().
//		Select(promotionhasproduct.FieldCreatedAt).
//		Scan(ctx, &v)
func (phpq *PromotionHasProductQuery) Select(fields ...string) *PromotionHasProductSelect {
	phpq.ctx.Fields = append(phpq.ctx.Fields, fields...)
	sbuild := &PromotionHasProductSelect{PromotionHasProductQuery: phpq}
	sbuild.label = promotionhasproduct.Label
	sbuild.flds, sbuild.scan = &phpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionHasProductSelect configured with the given aggregations.
func (phpq *PromotionHasProductQuery) Aggregate(fns ...AggregateFunc) *PromotionHasProductSelect {
	return phpq.Select().Aggregate(fns...)
}

func (phpq *PromotionHasProductQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range phpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, phpq); err != nil {
				return err
			}
		}
	}
	for _, f := range phpq.ctx.Fields {
		if !promotionhasproduct.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phpq.path != nil {
		prev, err := phpq.path(ctx)
		if err != nil {
			return err
		}
		phpq.sql = prev
	}
	return nil
}

func (phpq *PromotionHasProductQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionHasProduct, error) {
	var (
		nodes       = []*PromotionHasProduct{}
		_spec       = phpq.querySpec()
		loadedTypes = [2]bool{
			phpq.withProducts != nil,
			phpq.withPromotions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionHasProduct).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionHasProduct{config: phpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, phpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := phpq.withProducts; query != nil {
		if err := phpq.loadProducts(ctx, query, nodes, nil,
			func(n *PromotionHasProduct, e *Products) { n.Edges.Products = e }); err != nil {
			return nil, err
		}
	}
	if query := phpq.withPromotions; query != nil {
		if err := phpq.loadPromotions(ctx, query, nodes, nil,
			func(n *PromotionHasProduct, e *Promotions) { n.Edges.Promotions = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (phpq *PromotionHasProductQuery) loadProducts(ctx context.Context, query *ProductsQuery, nodes []*PromotionHasProduct, init func(*PromotionHasProduct), assign func(*PromotionHasProduct, *Products)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PromotionHasProduct)
	for i := range nodes {
		if nodes[i].ProductsID == nil {
			continue
		}
		fk := *nodes[i].ProductsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(products.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "products_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phpq *PromotionHasProductQuery) loadPromotions(ctx context.Context, query *PromotionsQuery, nodes []*PromotionHasProduct, init func(*PromotionHasProduct), assign func(*PromotionHasProduct, *Promotions)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*PromotionHasProduct)
	for i := range nodes {
		if nodes[i].PromotionsID == nil {
			continue
		}
		fk := *nodes[i].PromotionsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(promotions.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "promotions_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (phpq *PromotionHasProductQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phpq.querySpec()
	_spec.Node.Columns = phpq.ctx.Fields
	if len(phpq.ctx.Fields) > 0 {
		_spec.Unique = phpq.ctx.Unique != nil && *phpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, phpq.driver, _spec)
}

func (phpq *PromotionHasProductQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotionhasproduct.Table, promotionhasproduct.Columns, sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt))
	_spec.From = phpq.sql
	if unique := phpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if phpq.path != nil {
		_spec.Unique = true
	}
	if fields := phpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionhasproduct.FieldID)
		for i := range fields {
			if fields[i] != promotionhasproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if phpq.withProducts != nil {
			_spec.Node.AddColumnOnce(promotionhasproduct.FieldProductsID)
		}
		if phpq.withPromotions != nil {
			_spec.Node.AddColumnOnce(promotionhasproduct.FieldPromotionsID)
		}
	}
	if ps := phpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phpq *PromotionHasProductQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phpq.driver.Dialect())
	t1 := builder.Table(promotionhasproduct.Table)
	columns := phpq.ctx.Fields
	if len(columns) == 0 {
		columns = promotionhasproduct.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phpq.sql != nil {
		selector = phpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phpq.ctx.Unique != nil && *phpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range phpq.predicates {
		p(selector)
	}
	for _, p := range phpq.order {
		p(selector)
	}
	if offset := phpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PromotionHasProductGroupBy is the group-by builder for PromotionHasProduct entities.
type PromotionHasProductGroupBy struct {
	selector
	build *PromotionHasProductQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phpgb *PromotionHasProductGroupBy) Aggregate(fns ...AggregateFunc) *PromotionHasProductGroupBy {
	phpgb.fns = append(phpgb.fns, fns...)
	return phpgb
}

// Scan applies the selector query and scans the result into the given value.
func (phpgb *PromotionHasProductGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phpgb.build.ctx, ent.OpQueryGroupBy)
	if err := phpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionHasProductQuery, *PromotionHasProductGroupBy](ctx, phpgb.build, phpgb, phpgb.build.inters, v)
}

func (phpgb *PromotionHasProductGroupBy) sqlScan(ctx context.Context, root *PromotionHasProductQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(phpgb.fns))
	for _, fn := range phpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*phpgb.flds)+len(phpgb.fns))
		for _, f := range *phpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*phpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionHasProductSelect is the builder for selecting fields of PromotionHasProduct entities.
type PromotionHasProductSelect struct {
	*PromotionHasProductQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (phps *PromotionHasProductSelect) Aggregate(fns ...AggregateFunc) *PromotionHasProductSelect {
	phps.fns = append(phps.fns, fns...)
	return phps
}

// Scan applies the selector query and scans the result into the given value.
func (phps *PromotionHasProductSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phps.ctx, ent.OpQuerySelect)
	if err := phps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionHasProductQuery, *PromotionHasProductSelect](ctx, phps.PromotionHasProductQuery, phps, phps.inters, v)
}

func (phps *PromotionHasProductSelect) sqlScan(ctx context.Context, root *PromotionHasProductQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(phps.fns))
	for _, fn := range phps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*phps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
