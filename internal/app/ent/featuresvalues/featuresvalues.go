// Code generated by ent, DO NOT EDIT.

package featuresvalues

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the featuresvalues type in the database.
	Label = "features_values"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldFeatureID holds the string denoting the feature_id field in the database.
	FieldFeatureID = "feature_id"
	// FieldFeatureUnitValuesID holds the string denoting the feature_unit_values_id field in the database.
	FieldFeatureUnitValuesID = "feature_unit_values_id"
	// FieldFeatureValuesID holds the string denoting the feature_values_id field in the database.
	FieldFeatureValuesID = "feature_values_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeFeature holds the string denoting the feature edge name in mutations.
	EdgeFeature = "feature"
	// EdgeFeatureUnitValues holds the string denoting the feature_unit_values edge name in mutations.
	EdgeFeatureUnitValues = "feature_unit_values"
	// Table holds the table name of the featuresvalues in the database.
	Table = "features_values"
	// FeatureTable is the table that holds the feature relation/edge.
	FeatureTable = "features_values"
	// FeatureInverseTable is the table name for the Features entity.
	// It exists in this package in order to avoid circular dependency with the "features" package.
	FeatureInverseTable = "features"
	// FeatureColumn is the table column denoting the feature relation/edge.
	FeatureColumn = "feature_id"
	// FeatureUnitValuesTable is the table that holds the feature_unit_values relation/edge.
	FeatureUnitValuesTable = "features_values"
	// FeatureUnitValuesInverseTable is the table name for the FeaturesUnitValues entity.
	// It exists in this package in order to avoid circular dependency with the "featuresunitvalues" package.
	FeatureUnitValuesInverseTable = "features_unit_values"
	// FeatureUnitValuesColumn is the table column denoting the feature_unit_values relation/edge.
	FeatureUnitValuesColumn = "feature_unit_values_id"
)

// Columns holds all SQL columns for featuresvalues fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedBy,
	FieldFeatureID,
	FieldFeatureUnitValuesID,
	FieldFeatureValuesID,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "features_values"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"features_values_types_feature_values",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
)

// OrderOption defines the ordering options for the FeaturesValues queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByFeatureID orders the results by the feature_id field.
func ByFeatureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureID, opts...).ToFunc()
}

// ByFeatureUnitValuesID orders the results by the feature_unit_values_id field.
func ByFeatureUnitValuesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureUnitValuesID, opts...).ToFunc()
}

// ByFeatureValuesID orders the results by the feature_values_id field.
func ByFeatureValuesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureValuesID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByFeatureField orders the results by feature field.
func ByFeatureField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeatureUnitValuesField orders the results by feature_unit_values field.
func ByFeatureUnitValuesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureUnitValuesStep(), sql.OrderByField(field, opts...))
	}
}
func newFeatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeatureTable, FeatureColumn),
	)
}
func newFeatureUnitValuesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureUnitValuesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeatureUnitValuesTable, FeatureUnitValuesColumn),
	)
}
