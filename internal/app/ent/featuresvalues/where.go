// Code generated by ent, DO NOT EDIT.

package featuresvalues

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldDeletedAt, v))
}

// FeatureID applies equality check predicate on the "feature_id" field. It's identical to FeatureIDEQ.
func FeatureID(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldFeatureID, v))
}

// FeatureUnitValuesID applies equality check predicate on the "feature_unit_values_id" field. It's identical to FeatureUnitValuesIDEQ.
func FeatureUnitValuesID(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldFeatureUnitValuesID, v))
}

// FeatureValuesID applies equality check predicate on the "feature_values_id" field. It's identical to FeatureValuesIDEQ.
func FeatureValuesID(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldFeatureValuesID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotNull(FieldDeletedAt))
}

// FeatureIDEQ applies the EQ predicate on the "feature_id" field.
func FeatureIDEQ(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldFeatureID, v))
}

// FeatureIDNEQ applies the NEQ predicate on the "feature_id" field.
func FeatureIDNEQ(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNEQ(FieldFeatureID, v))
}

// FeatureIDIn applies the In predicate on the "feature_id" field.
func FeatureIDIn(vs ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIn(FieldFeatureID, vs...))
}

// FeatureIDNotIn applies the NotIn predicate on the "feature_id" field.
func FeatureIDNotIn(vs ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotIn(FieldFeatureID, vs...))
}

// FeatureUnitValuesIDEQ applies the EQ predicate on the "feature_unit_values_id" field.
func FeatureUnitValuesIDEQ(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldFeatureUnitValuesID, v))
}

// FeatureUnitValuesIDNEQ applies the NEQ predicate on the "feature_unit_values_id" field.
func FeatureUnitValuesIDNEQ(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNEQ(FieldFeatureUnitValuesID, v))
}

// FeatureUnitValuesIDIn applies the In predicate on the "feature_unit_values_id" field.
func FeatureUnitValuesIDIn(vs ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIn(FieldFeatureUnitValuesID, vs...))
}

// FeatureUnitValuesIDNotIn applies the NotIn predicate on the "feature_unit_values_id" field.
func FeatureUnitValuesIDNotIn(vs ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotIn(FieldFeatureUnitValuesID, vs...))
}

// FeatureUnitValuesIDIsNil applies the IsNil predicate on the "feature_unit_values_id" field.
func FeatureUnitValuesIDIsNil() predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIsNull(FieldFeatureUnitValuesID))
}

// FeatureUnitValuesIDNotNil applies the NotNil predicate on the "feature_unit_values_id" field.
func FeatureUnitValuesIDNotNil() predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotNull(FieldFeatureUnitValuesID))
}

// FeatureValuesIDEQ applies the EQ predicate on the "feature_values_id" field.
func FeatureValuesIDEQ(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldFeatureValuesID, v))
}

// FeatureValuesIDNEQ applies the NEQ predicate on the "feature_values_id" field.
func FeatureValuesIDNEQ(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNEQ(FieldFeatureValuesID, v))
}

// FeatureValuesIDIn applies the In predicate on the "feature_values_id" field.
func FeatureValuesIDIn(vs ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIn(FieldFeatureValuesID, vs...))
}

// FeatureValuesIDNotIn applies the NotIn predicate on the "feature_values_id" field.
func FeatureValuesIDNotIn(vs ...int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotIn(FieldFeatureValuesID, vs...))
}

// FeatureValuesIDGT applies the GT predicate on the "feature_values_id" field.
func FeatureValuesIDGT(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGT(FieldFeatureValuesID, v))
}

// FeatureValuesIDGTE applies the GTE predicate on the "feature_values_id" field.
func FeatureValuesIDGTE(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGTE(FieldFeatureValuesID, v))
}

// FeatureValuesIDLT applies the LT predicate on the "feature_values_id" field.
func FeatureValuesIDLT(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLT(FieldFeatureValuesID, v))
}

// FeatureValuesIDLTE applies the LTE predicate on the "feature_values_id" field.
func FeatureValuesIDLTE(v int) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLTE(FieldFeatureValuesID, v))
}

// FeatureValuesIDIsNil applies the IsNil predicate on the "feature_values_id" field.
func FeatureValuesIDIsNil() predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIsNull(FieldFeatureValuesID))
}

// FeatureValuesIDNotNil applies the NotNil predicate on the "feature_values_id" field.
func FeatureValuesIDNotNil() predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotNull(FieldFeatureValuesID))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.FieldContainsFold(FieldValue, v))
}

// HasFeature applies the HasEdge predicate on the "feature" edge.
func HasFeature() predicate.FeaturesValues {
	return predicate.FeaturesValues(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeatureTable, FeatureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureWith applies the HasEdge predicate on the "feature" edge with a given conditions (other predicates).
func HasFeatureWith(preds ...predicate.Features) predicate.FeaturesValues {
	return predicate.FeaturesValues(func(s *sql.Selector) {
		step := newFeatureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeatureUnitValues applies the HasEdge predicate on the "feature_unit_values" edge.
func HasFeatureUnitValues() predicate.FeaturesValues {
	return predicate.FeaturesValues(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FeatureUnitValuesTable, FeatureUnitValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureUnitValuesWith applies the HasEdge predicate on the "feature_unit_values" edge with a given conditions (other predicates).
func HasFeatureUnitValuesWith(preds ...predicate.FeaturesUnitValues) predicate.FeaturesValues {
	return predicate.FeaturesValues(func(s *sql.Selector) {
		step := newFeatureUnitValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeaturesValues) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeaturesValues) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeaturesValues) predicate.FeaturesValues {
	return predicate.FeaturesValues(sql.NotPredicates(p))
}
