// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/producthasfeature"
	"products-service/internal/app/ent/products"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductHasFeature is the model entity for the ProductHasFeature schema.
type ProductHasFeature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// FeatureID holds the value of the "feature_id" field.
	FeatureID *int `json:"feature_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID *int `json:"product_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductHasFeatureQuery when eager-loading is set.
	Edges        ProductHasFeatureEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductHasFeatureEdges holds the relations/edges for other nodes in the graph.
type ProductHasFeatureEdges struct {
	// Products holds the value of the products edge.
	Products *Products `json:"products,omitempty"`
	// Features holds the value of the features edge.
	Features *Features `json:"features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductHasFeatureEdges) ProductsOrErr() (*Products, error) {
	if e.Products != nil {
		return e.Products, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: products.Label}
	}
	return nil, &NotLoadedError{edge: "products"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductHasFeatureEdges) FeaturesOrErr() (*Features, error) {
	if e.Features != nil {
		return e.Features, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: features.Label}
	}
	return nil, &NotLoadedError{edge: "features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductHasFeature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case producthasfeature.FieldID, producthasfeature.FieldCreatedBy, producthasfeature.FieldUpdatedBy, producthasfeature.FieldDeletedBy, producthasfeature.FieldFeatureID, producthasfeature.FieldProductID:
			values[i] = new(sql.NullInt64)
		case producthasfeature.FieldCreatedAt, producthasfeature.FieldUpdatedAt, producthasfeature.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductHasFeature fields.
func (phf *ProductHasFeature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case producthasfeature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			phf.ID = int(value.Int64)
		case producthasfeature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				phf.CreatedAt = value.Time
			}
		case producthasfeature.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				phf.UpdatedAt = value.Time
			}
		case producthasfeature.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				phf.DeletedAt = new(time.Time)
				*phf.DeletedAt = value.Time
			}
		case producthasfeature.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				phf.CreatedBy = int(value.Int64)
			}
		case producthasfeature.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				phf.UpdatedBy = int(value.Int64)
			}
		case producthasfeature.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				phf.DeletedBy = new(int)
				*phf.DeletedBy = int(value.Int64)
			}
		case producthasfeature.FieldFeatureID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature_id", values[i])
			} else if value.Valid {
				phf.FeatureID = new(int)
				*phf.FeatureID = int(value.Int64)
			}
		case producthasfeature.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				phf.ProductID = new(int)
				*phf.ProductID = int(value.Int64)
			}
		default:
			phf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductHasFeature.
// This includes values selected through modifiers, order, etc.
func (phf *ProductHasFeature) Value(name string) (ent.Value, error) {
	return phf.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the ProductHasFeature entity.
func (phf *ProductHasFeature) QueryProducts() *ProductsQuery {
	return NewProductHasFeatureClient(phf.config).QueryProducts(phf)
}

// QueryFeatures queries the "features" edge of the ProductHasFeature entity.
func (phf *ProductHasFeature) QueryFeatures() *FeaturesQuery {
	return NewProductHasFeatureClient(phf.config).QueryFeatures(phf)
}

// Update returns a builder for updating this ProductHasFeature.
// Note that you need to call ProductHasFeature.Unwrap() before calling this method if this ProductHasFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (phf *ProductHasFeature) Update() *ProductHasFeatureUpdateOne {
	return NewProductHasFeatureClient(phf.config).UpdateOne(phf)
}

// Unwrap unwraps the ProductHasFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (phf *ProductHasFeature) Unwrap() *ProductHasFeature {
	_tx, ok := phf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductHasFeature is not a transactional entity")
	}
	phf.config.driver = _tx.drv
	return phf
}

// String implements the fmt.Stringer.
func (phf *ProductHasFeature) String() string {
	var builder strings.Builder
	builder.WriteString("ProductHasFeature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", phf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(phf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(phf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := phf.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", phf.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", phf.UpdatedBy))
	builder.WriteString(", ")
	if v := phf.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := phf.FeatureID; v != nil {
		builder.WriteString("feature_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := phf.ProductID; v != nil {
		builder.WriteString("product_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProductHasFeatures is a parsable slice of ProductHasFeature.
type ProductHasFeatures []*ProductHasFeature
