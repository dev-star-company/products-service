// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/imagefoldersource"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ImageFolderSource is the model entity for the ImageFolderSource schema.
type ImageFolderSource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// BaseURL holds the value of the "base_url" field.
	BaseURL *string `json:"base_url,omitempty"`
	// AccessKey holds the value of the "access_key" field.
	AccessKey *string `json:"access_key,omitempty"`
	// SecretKey holds the value of the "secret_key" field.
	SecretKey *string `json:"secret_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageFolderSourceQuery when eager-loading is set.
	Edges        ImageFolderSourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ImageFolderSourceEdges holds the relations/edges for other nodes in the graph.
type ImageFolderSourceEdges struct {
	// ImageFolderPath holds the value of the image_folder_path edge.
	ImageFolderPath []*ImageFolderPath `json:"image_folder_path,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ImageFolderPathOrErr returns the ImageFolderPath value or an error if the edge
// was not loaded in eager-loading.
func (e ImageFolderSourceEdges) ImageFolderPathOrErr() ([]*ImageFolderPath, error) {
	if e.loadedTypes[0] {
		return e.ImageFolderPath, nil
	}
	return nil, &NotLoadedError{edge: "image_folder_path"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImageFolderSource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imagefoldersource.FieldID, imagefoldersource.FieldCreatedBy, imagefoldersource.FieldUpdatedBy, imagefoldersource.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case imagefoldersource.FieldName, imagefoldersource.FieldBaseURL, imagefoldersource.FieldAccessKey, imagefoldersource.FieldSecretKey:
			values[i] = new(sql.NullString)
		case imagefoldersource.FieldCreatedAt, imagefoldersource.FieldUpdatedAt, imagefoldersource.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImageFolderSource fields.
func (ifs *ImageFolderSource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case imagefoldersource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ifs.ID = int(value.Int64)
		case imagefoldersource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ifs.CreatedAt = value.Time
			}
		case imagefoldersource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ifs.UpdatedAt = value.Time
			}
		case imagefoldersource.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ifs.DeletedAt = new(time.Time)
				*ifs.DeletedAt = value.Time
			}
		case imagefoldersource.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ifs.CreatedBy = int(value.Int64)
			}
		case imagefoldersource.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ifs.UpdatedBy = int(value.Int64)
			}
		case imagefoldersource.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ifs.DeletedBy = new(int)
				*ifs.DeletedBy = int(value.Int64)
			}
		case imagefoldersource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ifs.Name = new(string)
				*ifs.Name = value.String
			}
		case imagefoldersource.FieldBaseURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_url", values[i])
			} else if value.Valid {
				ifs.BaseURL = new(string)
				*ifs.BaseURL = value.String
			}
		case imagefoldersource.FieldAccessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_key", values[i])
			} else if value.Valid {
				ifs.AccessKey = new(string)
				*ifs.AccessKey = value.String
			}
		case imagefoldersource.FieldSecretKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_key", values[i])
			} else if value.Valid {
				ifs.SecretKey = new(string)
				*ifs.SecretKey = value.String
			}
		default:
			ifs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImageFolderSource.
// This includes values selected through modifiers, order, etc.
func (ifs *ImageFolderSource) Value(name string) (ent.Value, error) {
	return ifs.selectValues.Get(name)
}

// QueryImageFolderPath queries the "image_folder_path" edge of the ImageFolderSource entity.
func (ifs *ImageFolderSource) QueryImageFolderPath() *ImageFolderPathQuery {
	return NewImageFolderSourceClient(ifs.config).QueryImageFolderPath(ifs)
}

// Update returns a builder for updating this ImageFolderSource.
// Note that you need to call ImageFolderSource.Unwrap() before calling this method if this ImageFolderSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ifs *ImageFolderSource) Update() *ImageFolderSourceUpdateOne {
	return NewImageFolderSourceClient(ifs.config).UpdateOne(ifs)
}

// Unwrap unwraps the ImageFolderSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ifs *ImageFolderSource) Unwrap() *ImageFolderSource {
	_tx, ok := ifs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImageFolderSource is not a transactional entity")
	}
	ifs.config.driver = _tx.drv
	return ifs
}

// String implements the fmt.Stringer.
func (ifs *ImageFolderSource) String() string {
	var builder strings.Builder
	builder.WriteString("ImageFolderSource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ifs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ifs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ifs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ifs.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ifs.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ifs.UpdatedBy))
	builder.WriteString(", ")
	if v := ifs.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ifs.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ifs.BaseURL; v != nil {
		builder.WriteString("base_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ifs.AccessKey; v != nil {
		builder.WriteString("access_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ifs.SecretKey; v != nil {
		builder.WriteString("secret_key=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ImageFolderSources is a parsable slice of ImageFolderSource.
type ImageFolderSources []*ImageFolderSource
