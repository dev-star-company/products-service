// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/varianttype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VariantTypeDelete is the builder for deleting a VariantType entity.
type VariantTypeDelete struct {
	config
	hooks    []Hook
	mutation *VariantTypeMutation
}

// Where appends a list predicates to the VariantTypeDelete builder.
func (vtd *VariantTypeDelete) Where(ps ...predicate.VariantType) *VariantTypeDelete {
	vtd.mutation.Where(ps...)
	return vtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vtd *VariantTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vtd.sqlExec, vtd.mutation, vtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vtd *VariantTypeDelete) ExecX(ctx context.Context) int {
	n, err := vtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vtd *VariantTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(varianttype.Table, sqlgraph.NewFieldSpec(varianttype.FieldID, field.TypeInt))
	if ps := vtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vtd.mutation.done = true
	return affected, err
}

// VariantTypeDeleteOne is the builder for deleting a single VariantType entity.
type VariantTypeDeleteOne struct {
	vtd *VariantTypeDelete
}

// Where appends a list predicates to the VariantTypeDelete builder.
func (vtdo *VariantTypeDeleteOne) Where(ps ...predicate.VariantType) *VariantTypeDeleteOne {
	vtdo.vtd.mutation.Where(ps...)
	return vtdo
}

// Exec executes the deletion query.
func (vtdo *VariantTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := vtdo.vtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{varianttype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vtdo *VariantTypeDeleteOne) ExecX(ctx context.Context) {
	if err := vtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
