// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/imagefoldersource"
	"products-service/internal/app/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderSourceQuery is the builder for querying ImageFolderSource entities.
type ImageFolderSourceQuery struct {
	config
	ctx                 *QueryContext
	order               []imagefoldersource.OrderOption
	inters              []Interceptor
	predicates          []predicate.ImageFolderSource
	withImageFolderPath *ImageFolderPathQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ImageFolderSourceQuery builder.
func (ifsq *ImageFolderSourceQuery) Where(ps ...predicate.ImageFolderSource) *ImageFolderSourceQuery {
	ifsq.predicates = append(ifsq.predicates, ps...)
	return ifsq
}

// Limit the number of records to be returned by this query.
func (ifsq *ImageFolderSourceQuery) Limit(limit int) *ImageFolderSourceQuery {
	ifsq.ctx.Limit = &limit
	return ifsq
}

// Offset to start from.
func (ifsq *ImageFolderSourceQuery) Offset(offset int) *ImageFolderSourceQuery {
	ifsq.ctx.Offset = &offset
	return ifsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ifsq *ImageFolderSourceQuery) Unique(unique bool) *ImageFolderSourceQuery {
	ifsq.ctx.Unique = &unique
	return ifsq
}

// Order specifies how the records should be ordered.
func (ifsq *ImageFolderSourceQuery) Order(o ...imagefoldersource.OrderOption) *ImageFolderSourceQuery {
	ifsq.order = append(ifsq.order, o...)
	return ifsq
}

// QueryImageFolderPath chains the current query on the "image_folder_path" edge.
func (ifsq *ImageFolderSourceQuery) QueryImageFolderPath() *ImageFolderPathQuery {
	query := (&ImageFolderPathClient{config: ifsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ifsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ifsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagefoldersource.Table, imagefoldersource.FieldID, selector),
			sqlgraph.To(imagefolderpath.Table, imagefolderpath.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, imagefoldersource.ImageFolderPathTable, imagefoldersource.ImageFolderPathColumn),
		)
		fromU = sqlgraph.SetNeighbors(ifsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ImageFolderSource entity from the query.
// Returns a *NotFoundError when no ImageFolderSource was found.
func (ifsq *ImageFolderSourceQuery) First(ctx context.Context) (*ImageFolderSource, error) {
	nodes, err := ifsq.Limit(1).All(setContextOp(ctx, ifsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{imagefoldersource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) FirstX(ctx context.Context) *ImageFolderSource {
	node, err := ifsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ImageFolderSource ID from the query.
// Returns a *NotFoundError when no ImageFolderSource ID was found.
func (ifsq *ImageFolderSourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifsq.Limit(1).IDs(setContextOp(ctx, ifsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{imagefoldersource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) FirstIDX(ctx context.Context) int {
	id, err := ifsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ImageFolderSource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ImageFolderSource entity is found.
// Returns a *NotFoundError when no ImageFolderSource entities are found.
func (ifsq *ImageFolderSourceQuery) Only(ctx context.Context) (*ImageFolderSource, error) {
	nodes, err := ifsq.Limit(2).All(setContextOp(ctx, ifsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{imagefoldersource.Label}
	default:
		return nil, &NotSingularError{imagefoldersource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) OnlyX(ctx context.Context) *ImageFolderSource {
	node, err := ifsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ImageFolderSource ID in the query.
// Returns a *NotSingularError when more than one ImageFolderSource ID is found.
// Returns a *NotFoundError when no entities are found.
func (ifsq *ImageFolderSourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifsq.Limit(2).IDs(setContextOp(ctx, ifsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{imagefoldersource.Label}
	default:
		err = &NotSingularError{imagefoldersource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := ifsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ImageFolderSources.
func (ifsq *ImageFolderSourceQuery) All(ctx context.Context) ([]*ImageFolderSource, error) {
	ctx = setContextOp(ctx, ifsq.ctx, ent.OpQueryAll)
	if err := ifsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ImageFolderSource, *ImageFolderSourceQuery]()
	return withInterceptors[[]*ImageFolderSource](ctx, ifsq, qr, ifsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) AllX(ctx context.Context) []*ImageFolderSource {
	nodes, err := ifsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ImageFolderSource IDs.
func (ifsq *ImageFolderSourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ifsq.ctx.Unique == nil && ifsq.path != nil {
		ifsq.Unique(true)
	}
	ctx = setContextOp(ctx, ifsq.ctx, ent.OpQueryIDs)
	if err = ifsq.Select(imagefoldersource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) IDsX(ctx context.Context) []int {
	ids, err := ifsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ifsq *ImageFolderSourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ifsq.ctx, ent.OpQueryCount)
	if err := ifsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ifsq, querierCount[*ImageFolderSourceQuery](), ifsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) CountX(ctx context.Context) int {
	count, err := ifsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ifsq *ImageFolderSourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ifsq.ctx, ent.OpQueryExist)
	switch _, err := ifsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ifsq *ImageFolderSourceQuery) ExistX(ctx context.Context) bool {
	exist, err := ifsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ImageFolderSourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ifsq *ImageFolderSourceQuery) Clone() *ImageFolderSourceQuery {
	if ifsq == nil {
		return nil
	}
	return &ImageFolderSourceQuery{
		config:              ifsq.config,
		ctx:                 ifsq.ctx.Clone(),
		order:               append([]imagefoldersource.OrderOption{}, ifsq.order...),
		inters:              append([]Interceptor{}, ifsq.inters...),
		predicates:          append([]predicate.ImageFolderSource{}, ifsq.predicates...),
		withImageFolderPath: ifsq.withImageFolderPath.Clone(),
		// clone intermediate query.
		sql:  ifsq.sql.Clone(),
		path: ifsq.path,
	}
}

// WithImageFolderPath tells the query-builder to eager-load the nodes that are connected to
// the "image_folder_path" edge. The optional arguments are used to configure the query builder of the edge.
func (ifsq *ImageFolderSourceQuery) WithImageFolderPath(opts ...func(*ImageFolderPathQuery)) *ImageFolderSourceQuery {
	query := (&ImageFolderPathClient{config: ifsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ifsq.withImageFolderPath = query
	return ifsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ImageFolderSource.Query().
//		GroupBy(imagefoldersource.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ifsq *ImageFolderSourceQuery) GroupBy(field string, fields ...string) *ImageFolderSourceGroupBy {
	ifsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ImageFolderSourceGroupBy{build: ifsq}
	grbuild.flds = &ifsq.ctx.Fields
	grbuild.label = imagefoldersource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ImageFolderSource.Query().
//		Select(imagefoldersource.FieldCreatedAt).
//		Scan(ctx, &v)
func (ifsq *ImageFolderSourceQuery) Select(fields ...string) *ImageFolderSourceSelect {
	ifsq.ctx.Fields = append(ifsq.ctx.Fields, fields...)
	sbuild := &ImageFolderSourceSelect{ImageFolderSourceQuery: ifsq}
	sbuild.label = imagefoldersource.Label
	sbuild.flds, sbuild.scan = &ifsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ImageFolderSourceSelect configured with the given aggregations.
func (ifsq *ImageFolderSourceQuery) Aggregate(fns ...AggregateFunc) *ImageFolderSourceSelect {
	return ifsq.Select().Aggregate(fns...)
}

func (ifsq *ImageFolderSourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ifsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ifsq); err != nil {
				return err
			}
		}
	}
	for _, f := range ifsq.ctx.Fields {
		if !imagefoldersource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ifsq.path != nil {
		prev, err := ifsq.path(ctx)
		if err != nil {
			return err
		}
		ifsq.sql = prev
	}
	return nil
}

func (ifsq *ImageFolderSourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ImageFolderSource, error) {
	var (
		nodes       = []*ImageFolderSource{}
		_spec       = ifsq.querySpec()
		loadedTypes = [1]bool{
			ifsq.withImageFolderPath != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ImageFolderSource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ImageFolderSource{config: ifsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ifsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ifsq.withImageFolderPath; query != nil {
		if err := ifsq.loadImageFolderPath(ctx, query, nodes,
			func(n *ImageFolderSource) { n.Edges.ImageFolderPath = []*ImageFolderPath{} },
			func(n *ImageFolderSource, e *ImageFolderPath) {
				n.Edges.ImageFolderPath = append(n.Edges.ImageFolderPath, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ifsq *ImageFolderSourceQuery) loadImageFolderPath(ctx context.Context, query *ImageFolderPathQuery, nodes []*ImageFolderSource, init func(*ImageFolderSource), assign func(*ImageFolderSource, *ImageFolderPath)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ImageFolderSource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(imagefolderpath.FieldImageFolderSourceID)
	}
	query.Where(predicate.ImageFolderPath(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(imagefoldersource.ImageFolderPathColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ImageFolderSourceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "image_folder_source_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "image_folder_source_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ifsq *ImageFolderSourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ifsq.querySpec()
	_spec.Node.Columns = ifsq.ctx.Fields
	if len(ifsq.ctx.Fields) > 0 {
		_spec.Unique = ifsq.ctx.Unique != nil && *ifsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ifsq.driver, _spec)
}

func (ifsq *ImageFolderSourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(imagefoldersource.Table, imagefoldersource.Columns, sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt))
	_spec.From = ifsq.sql
	if unique := ifsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ifsq.path != nil {
		_spec.Unique = true
	}
	if fields := ifsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagefoldersource.FieldID)
		for i := range fields {
			if fields[i] != imagefoldersource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ifsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ifsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ifsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ifsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ifsq *ImageFolderSourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ifsq.driver.Dialect())
	t1 := builder.Table(imagefoldersource.Table)
	columns := ifsq.ctx.Fields
	if len(columns) == 0 {
		columns = imagefoldersource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ifsq.sql != nil {
		selector = ifsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ifsq.ctx.Unique != nil && *ifsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ifsq.predicates {
		p(selector)
	}
	for _, p := range ifsq.order {
		p(selector)
	}
	if offset := ifsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ifsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ImageFolderSourceGroupBy is the group-by builder for ImageFolderSource entities.
type ImageFolderSourceGroupBy struct {
	selector
	build *ImageFolderSourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ifsgb *ImageFolderSourceGroupBy) Aggregate(fns ...AggregateFunc) *ImageFolderSourceGroupBy {
	ifsgb.fns = append(ifsgb.fns, fns...)
	return ifsgb
}

// Scan applies the selector query and scans the result into the given value.
func (ifsgb *ImageFolderSourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifsgb.build.ctx, ent.OpQueryGroupBy)
	if err := ifsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageFolderSourceQuery, *ImageFolderSourceGroupBy](ctx, ifsgb.build, ifsgb, ifsgb.build.inters, v)
}

func (ifsgb *ImageFolderSourceGroupBy) sqlScan(ctx context.Context, root *ImageFolderSourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ifsgb.fns))
	for _, fn := range ifsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ifsgb.flds)+len(ifsgb.fns))
		for _, f := range *ifsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ifsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ImageFolderSourceSelect is the builder for selecting fields of ImageFolderSource entities.
type ImageFolderSourceSelect struct {
	*ImageFolderSourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ifss *ImageFolderSourceSelect) Aggregate(fns ...AggregateFunc) *ImageFolderSourceSelect {
	ifss.fns = append(ifss.fns, fns...)
	return ifss
}

// Scan applies the selector query and scans the result into the given value.
func (ifss *ImageFolderSourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifss.ctx, ent.OpQuerySelect)
	if err := ifss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageFolderSourceQuery, *ImageFolderSourceSelect](ctx, ifss.ImageFolderSourceQuery, ifss, ifss.inters, v)
}

func (ifss *ImageFolderSourceSelect) sqlScan(ctx context.Context, root *ImageFolderSourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ifss.fns))
	for _, fn := range ifss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ifss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
