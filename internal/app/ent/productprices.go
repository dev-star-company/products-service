// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/pricetype"
	"products-service/internal/app/ent/productprices"
	"products-service/internal/app/ent/products"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductPrices is the model entity for the ProductPrices schema.
type ProductPrices struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// PriceTypeID holds the value of the "price_type_id" field.
	PriceTypeID *int `json:"price_type_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID *int `json:"product_id,omitempty"`
	// DefaultValue holds the value of the "default_value" field.
	DefaultValue *float64 `json:"default_value,omitempty"`
	// MinValue holds the value of the "min_value" field.
	MinValue *float64 `json:"min_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductPricesQuery when eager-loading is set.
	Edges        ProductPricesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductPricesEdges holds the relations/edges for other nodes in the graph.
type ProductPricesEdges struct {
	// Product holds the value of the product edge.
	Product *Products `json:"product,omitempty"`
	// PriceType holds the value of the price_type edge.
	PriceType *PriceType `json:"price_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPricesEdges) ProductOrErr() (*Products, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: products.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// PriceTypeOrErr returns the PriceType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPricesEdges) PriceTypeOrErr() (*PriceType, error) {
	if e.PriceType != nil {
		return e.PriceType, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: pricetype.Label}
	}
	return nil, &NotLoadedError{edge: "price_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductPrices) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productprices.FieldDefaultValue, productprices.FieldMinValue:
			values[i] = new(sql.NullFloat64)
		case productprices.FieldID, productprices.FieldCreatedBy, productprices.FieldUpdatedBy, productprices.FieldDeletedBy, productprices.FieldPriceTypeID, productprices.FieldProductID:
			values[i] = new(sql.NullInt64)
		case productprices.FieldCreatedAt, productprices.FieldUpdatedAt, productprices.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductPrices fields.
func (pp *ProductPrices) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productprices.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case productprices.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pp.CreatedAt = value.Time
			}
		case productprices.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pp.UpdatedAt = value.Time
			}
		case productprices.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pp.DeletedAt = new(time.Time)
				*pp.DeletedAt = value.Time
			}
		case productprices.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pp.CreatedBy = int(value.Int64)
			}
		case productprices.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pp.UpdatedBy = int(value.Int64)
			}
		case productprices.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pp.DeletedBy = new(int)
				*pp.DeletedBy = int(value.Int64)
			}
		case productprices.FieldPriceTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_type_id", values[i])
			} else if value.Valid {
				pp.PriceTypeID = new(int)
				*pp.PriceTypeID = int(value.Int64)
			}
		case productprices.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pp.ProductID = new(int)
				*pp.ProductID = int(value.Int64)
			}
		case productprices.FieldDefaultValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field default_value", values[i])
			} else if value.Valid {
				pp.DefaultValue = new(float64)
				*pp.DefaultValue = value.Float64
			}
		case productprices.FieldMinValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min_value", values[i])
			} else if value.Valid {
				pp.MinValue = new(float64)
				*pp.MinValue = value.Float64
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductPrices.
// This includes values selected through modifiers, order, etc.
func (pp *ProductPrices) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ProductPrices entity.
func (pp *ProductPrices) QueryProduct() *ProductsQuery {
	return NewProductPricesClient(pp.config).QueryProduct(pp)
}

// QueryPriceType queries the "price_type" edge of the ProductPrices entity.
func (pp *ProductPrices) QueryPriceType() *PriceTypeQuery {
	return NewProductPricesClient(pp.config).QueryPriceType(pp)
}

// Update returns a builder for updating this ProductPrices.
// Note that you need to call ProductPrices.Unwrap() before calling this method if this ProductPrices
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *ProductPrices) Update() *ProductPricesUpdateOne {
	return NewProductPricesClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the ProductPrices entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *ProductPrices) Unwrap() *ProductPrices {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductPrices is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *ProductPrices) String() string {
	var builder strings.Builder
	builder.WriteString("ProductPrices(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pp.UpdatedBy))
	builder.WriteString(", ")
	if v := pp.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pp.PriceTypeID; v != nil {
		builder.WriteString("price_type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pp.ProductID; v != nil {
		builder.WriteString("product_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pp.DefaultValue; v != nil {
		builder.WriteString("default_value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pp.MinValue; v != nil {
		builder.WriteString("min_value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProductPricesSlice is a parsable slice of ProductPrices.
type ProductPricesSlice []*ProductPrices
