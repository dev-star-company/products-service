// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"products-service/internal/app/ent/brand"
	"products-service/internal/app/ent/category"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasfeature"
	"products-service/internal/app/ent/producthasimage"
	"products-service/internal/app/ent/producthasinfo"
	"products-service/internal/app/ent/producthasproductreference"
	"products-service/internal/app/ent/productprices"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/toolhasproduct"
	"products-service/internal/app/ent/varianttype"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductsQuery is the builder for querying Products entities.
type ProductsQuery struct {
	config
	ctx                            *QueryContext
	order                          []products.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.Products
	withCategory                   *CategoryQuery
	withBrand                      *BrandQuery
	withVariantType                *VariantTypeQuery
	withProductReferences          *ProductReferencesQuery
	withProductHasImage            *ProductHasImageQuery
	withPromotionHasProduct        *PromotionHasProductQuery
	withToolHasProduct             *ToolHasProductQuery
	withProductHasFeature          *ProductHasFeatureQuery
	withProductHasInfo             *ProductHasInfoQuery
	withProductHasProductReference *ProductHasProductReferenceQuery
	withProductPrices              *ProductPricesQuery
	withFKs                        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductsQuery builder.
func (pq *ProductsQuery) Where(ps ...predicate.Products) *ProductsQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ProductsQuery) Limit(limit int) *ProductsQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ProductsQuery) Offset(offset int) *ProductsQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProductsQuery) Unique(unique bool) *ProductsQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ProductsQuery) Order(o ...products.OrderOption) *ProductsQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryCategory chains the current query on the "category" edge.
func (pq *ProductsQuery) QueryCategory() *CategoryQuery {
	query := (&CategoryClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, products.CategoryTable, products.CategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBrand chains the current query on the "brand" edge.
func (pq *ProductsQuery) QueryBrand() *BrandQuery {
	query := (&BrandClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(brand.Table, brand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, products.BrandTable, products.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVariantType chains the current query on the "variant_type" edge.
func (pq *ProductsQuery) QueryVariantType() *VariantTypeQuery {
	query := (&VariantTypeClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(varianttype.Table, varianttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, products.VariantTypeTable, products.VariantTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductReferences chains the current query on the "product_references" edge.
func (pq *ProductsQuery) QueryProductReferences() *ProductReferencesQuery {
	query := (&ProductReferencesClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(productreferences.Table, productreferences.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, products.ProductReferencesTable, products.ProductReferencesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductHasImage chains the current query on the "product_has_image" edge.
func (pq *ProductsQuery) QueryProductHasImage() *ProductHasImageQuery {
	query := (&ProductHasImageClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(producthasimage.Table, producthasimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, products.ProductHasImageTable, products.ProductHasImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPromotionHasProduct chains the current query on the "promotion_has_product" edge.
func (pq *ProductsQuery) QueryPromotionHasProduct() *PromotionHasProductQuery {
	query := (&PromotionHasProductClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(promotionhasproduct.Table, promotionhasproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, products.PromotionHasProductTable, products.PromotionHasProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToolHasProduct chains the current query on the "tool_has_product" edge.
func (pq *ProductsQuery) QueryToolHasProduct() *ToolHasProductQuery {
	query := (&ToolHasProductClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(toolhasproduct.Table, toolhasproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, products.ToolHasProductTable, products.ToolHasProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductHasFeature chains the current query on the "product_has_feature" edge.
func (pq *ProductsQuery) QueryProductHasFeature() *ProductHasFeatureQuery {
	query := (&ProductHasFeatureClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(producthasfeature.Table, producthasfeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, products.ProductHasFeatureTable, products.ProductHasFeatureColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductHasInfo chains the current query on the "product_has_info" edge.
func (pq *ProductsQuery) QueryProductHasInfo() *ProductHasInfoQuery {
	query := (&ProductHasInfoClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(producthasinfo.Table, producthasinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, products.ProductHasInfoTable, products.ProductHasInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductHasProductReference chains the current query on the "product_has_product_reference" edge.
func (pq *ProductsQuery) QueryProductHasProductReference() *ProductHasProductReferenceQuery {
	query := (&ProductHasProductReferenceClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(producthasproductreference.Table, producthasproductreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, products.ProductHasProductReferenceTable, products.ProductHasProductReferenceColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductPrices chains the current query on the "product_prices" edge.
func (pq *ProductsQuery) QueryProductPrices() *ProductPricesQuery {
	query := (&ProductPricesClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(products.Table, products.FieldID, selector),
			sqlgraph.To(productprices.Table, productprices.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, products.ProductPricesTable, products.ProductPricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Products entity from the query.
// Returns a *NotFoundError when no Products was found.
func (pq *ProductsQuery) First(ctx context.Context) (*Products, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{products.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProductsQuery) FirstX(ctx context.Context) *Products {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Products ID from the query.
// Returns a *NotFoundError when no Products ID was found.
func (pq *ProductsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{products.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProductsQuery) FirstIDX(ctx context.Context) int {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Products entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Products entity is found.
// Returns a *NotFoundError when no Products entities are found.
func (pq *ProductsQuery) Only(ctx context.Context) (*Products, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{products.Label}
	default:
		return nil, &NotSingularError{products.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProductsQuery) OnlyX(ctx context.Context) *Products {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Products ID in the query.
// Returns a *NotSingularError when more than one Products ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProductsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{products.Label}
	default:
		err = &NotSingularError{products.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProductsQuery) OnlyIDX(ctx context.Context) int {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductsSlice.
func (pq *ProductsQuery) All(ctx context.Context) ([]*Products, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryAll)
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Products, *ProductsQuery]()
	return withInterceptors[[]*Products](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProductsQuery) AllX(ctx context.Context) []*Products {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Products IDs.
func (pq *ProductsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryIDs)
	if err = pq.Select(products.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProductsQuery) IDsX(ctx context.Context) []int {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProductsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryCount)
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ProductsQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProductsQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProductsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryExist)
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProductsQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProductsQuery) Clone() *ProductsQuery {
	if pq == nil {
		return nil
	}
	return &ProductsQuery{
		config:                         pq.config,
		ctx:                            pq.ctx.Clone(),
		order:                          append([]products.OrderOption{}, pq.order...),
		inters:                         append([]Interceptor{}, pq.inters...),
		predicates:                     append([]predicate.Products{}, pq.predicates...),
		withCategory:                   pq.withCategory.Clone(),
		withBrand:                      pq.withBrand.Clone(),
		withVariantType:                pq.withVariantType.Clone(),
		withProductReferences:          pq.withProductReferences.Clone(),
		withProductHasImage:            pq.withProductHasImage.Clone(),
		withPromotionHasProduct:        pq.withPromotionHasProduct.Clone(),
		withToolHasProduct:             pq.withToolHasProduct.Clone(),
		withProductHasFeature:          pq.withProductHasFeature.Clone(),
		withProductHasInfo:             pq.withProductHasInfo.Clone(),
		withProductHasProductReference: pq.withProductHasProductReference.Clone(),
		withProductPrices:              pq.withProductPrices.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithCategory tells the query-builder to eager-load the nodes that are connected to
// the "category" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithCategory(opts ...func(*CategoryQuery)) *ProductsQuery {
	query := (&CategoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCategory = query
	return pq
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithBrand(opts ...func(*BrandQuery)) *ProductsQuery {
	query := (&BrandClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBrand = query
	return pq
}

// WithVariantType tells the query-builder to eager-load the nodes that are connected to
// the "variant_type" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithVariantType(opts ...func(*VariantTypeQuery)) *ProductsQuery {
	query := (&VariantTypeClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withVariantType = query
	return pq
}

// WithProductReferences tells the query-builder to eager-load the nodes that are connected to
// the "product_references" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithProductReferences(opts ...func(*ProductReferencesQuery)) *ProductsQuery {
	query := (&ProductReferencesClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductReferences = query
	return pq
}

// WithProductHasImage tells the query-builder to eager-load the nodes that are connected to
// the "product_has_image" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithProductHasImage(opts ...func(*ProductHasImageQuery)) *ProductsQuery {
	query := (&ProductHasImageClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductHasImage = query
	return pq
}

// WithPromotionHasProduct tells the query-builder to eager-load the nodes that are connected to
// the "promotion_has_product" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithPromotionHasProduct(opts ...func(*PromotionHasProductQuery)) *ProductsQuery {
	query := (&PromotionHasProductClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPromotionHasProduct = query
	return pq
}

// WithToolHasProduct tells the query-builder to eager-load the nodes that are connected to
// the "tool_has_product" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithToolHasProduct(opts ...func(*ToolHasProductQuery)) *ProductsQuery {
	query := (&ToolHasProductClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withToolHasProduct = query
	return pq
}

// WithProductHasFeature tells the query-builder to eager-load the nodes that are connected to
// the "product_has_feature" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithProductHasFeature(opts ...func(*ProductHasFeatureQuery)) *ProductsQuery {
	query := (&ProductHasFeatureClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductHasFeature = query
	return pq
}

// WithProductHasInfo tells the query-builder to eager-load the nodes that are connected to
// the "product_has_info" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithProductHasInfo(opts ...func(*ProductHasInfoQuery)) *ProductsQuery {
	query := (&ProductHasInfoClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductHasInfo = query
	return pq
}

// WithProductHasProductReference tells the query-builder to eager-load the nodes that are connected to
// the "product_has_product_reference" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithProductHasProductReference(opts ...func(*ProductHasProductReferenceQuery)) *ProductsQuery {
	query := (&ProductHasProductReferenceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductHasProductReference = query
	return pq
}

// WithProductPrices tells the query-builder to eager-load the nodes that are connected to
// the "product_prices" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProductsQuery) WithProductPrices(opts ...func(*ProductPricesQuery)) *ProductsQuery {
	query := (&ProductPricesClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withProductPrices = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Products.Query().
//		GroupBy(products.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *ProductsQuery) GroupBy(field string, fields ...string) *ProductsGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductsGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = products.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Products.Query().
//		Select(products.FieldCreatedAt).
//		Scan(ctx, &v)
func (pq *ProductsQuery) Select(fields ...string) *ProductsSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ProductsSelect{ProductsQuery: pq}
	sbuild.label = products.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductsSelect configured with the given aggregations.
func (pq *ProductsQuery) Aggregate(fns ...AggregateFunc) *ProductsSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ProductsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !products.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProductsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Products, error) {
	var (
		nodes       = []*Products{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [11]bool{
			pq.withCategory != nil,
			pq.withBrand != nil,
			pq.withVariantType != nil,
			pq.withProductReferences != nil,
			pq.withProductHasImage != nil,
			pq.withPromotionHasProduct != nil,
			pq.withToolHasProduct != nil,
			pq.withProductHasFeature != nil,
			pq.withProductHasInfo != nil,
			pq.withProductHasProductReference != nil,
			pq.withProductPrices != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, products.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Products).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Products{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withCategory; query != nil {
		if err := pq.loadCategory(ctx, query, nodes, nil,
			func(n *Products, e *Category) { n.Edges.Category = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withBrand; query != nil {
		if err := pq.loadBrand(ctx, query, nodes, nil,
			func(n *Products, e *Brand) { n.Edges.Brand = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withVariantType; query != nil {
		if err := pq.loadVariantType(ctx, query, nodes, nil,
			func(n *Products, e *VariantType) { n.Edges.VariantType = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductReferences; query != nil {
		if err := pq.loadProductReferences(ctx, query, nodes, nil,
			func(n *Products, e *ProductReferences) { n.Edges.ProductReferences = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductHasImage; query != nil {
		if err := pq.loadProductHasImage(ctx, query, nodes,
			func(n *Products) { n.Edges.ProductHasImage = []*ProductHasImage{} },
			func(n *Products, e *ProductHasImage) { n.Edges.ProductHasImage = append(n.Edges.ProductHasImage, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPromotionHasProduct; query != nil {
		if err := pq.loadPromotionHasProduct(ctx, query, nodes,
			func(n *Products) { n.Edges.PromotionHasProduct = []*PromotionHasProduct{} },
			func(n *Products, e *PromotionHasProduct) {
				n.Edges.PromotionHasProduct = append(n.Edges.PromotionHasProduct, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withToolHasProduct; query != nil {
		if err := pq.loadToolHasProduct(ctx, query, nodes,
			func(n *Products) { n.Edges.ToolHasProduct = []*ToolHasProduct{} },
			func(n *Products, e *ToolHasProduct) { n.Edges.ToolHasProduct = append(n.Edges.ToolHasProduct, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductHasFeature; query != nil {
		if err := pq.loadProductHasFeature(ctx, query, nodes,
			func(n *Products) { n.Edges.ProductHasFeature = []*ProductHasFeature{} },
			func(n *Products, e *ProductHasFeature) {
				n.Edges.ProductHasFeature = append(n.Edges.ProductHasFeature, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductHasInfo; query != nil {
		if err := pq.loadProductHasInfo(ctx, query, nodes,
			func(n *Products) { n.Edges.ProductHasInfo = []*ProductHasInfo{} },
			func(n *Products, e *ProductHasInfo) { n.Edges.ProductHasInfo = append(n.Edges.ProductHasInfo, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductHasProductReference; query != nil {
		if err := pq.loadProductHasProductReference(ctx, query, nodes,
			func(n *Products) { n.Edges.ProductHasProductReference = []*ProductHasProductReference{} },
			func(n *Products, e *ProductHasProductReference) {
				n.Edges.ProductHasProductReference = append(n.Edges.ProductHasProductReference, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withProductPrices; query != nil {
		if err := pq.loadProductPrices(ctx, query, nodes,
			func(n *Products) { n.Edges.ProductPrices = []*ProductPrices{} },
			func(n *Products, e *ProductPrices) { n.Edges.ProductPrices = append(n.Edges.ProductPrices, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProductsQuery) loadCategory(ctx context.Context, query *CategoryQuery, nodes []*Products, init func(*Products), assign func(*Products, *Category)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Products)
	for i := range nodes {
		if nodes[i].CategoryID == nil {
			continue
		}
		fk := *nodes[i].CategoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(category.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "category_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProductsQuery) loadBrand(ctx context.Context, query *BrandQuery, nodes []*Products, init func(*Products), assign func(*Products, *Brand)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Products)
	for i := range nodes {
		if nodes[i].BrandID == nil {
			continue
		}
		fk := *nodes[i].BrandID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(brand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "brand_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProductsQuery) loadVariantType(ctx context.Context, query *VariantTypeQuery, nodes []*Products, init func(*Products), assign func(*Products, *VariantType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Products)
	for i := range nodes {
		if nodes[i].VariantTypeID == nil {
			continue
		}
		fk := *nodes[i].VariantTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(varianttype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "variant_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProductsQuery) loadProductReferences(ctx context.Context, query *ProductReferencesQuery, nodes []*Products, init func(*Products), assign func(*Products, *ProductReferences)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Products)
	for i := range nodes {
		if nodes[i].ProductReferencesID == nil {
			continue
		}
		fk := *nodes[i].ProductReferencesID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(productreferences.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_references_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProductsQuery) loadProductHasImage(ctx context.Context, query *ProductHasImageQuery, nodes []*Products, init func(*Products), assign func(*Products, *ProductHasImage)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Products)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(producthasimage.FieldProductID)
	}
	query.Where(predicate.ProductHasImage(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(products.ProductHasImageColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductID
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductsQuery) loadPromotionHasProduct(ctx context.Context, query *PromotionHasProductQuery, nodes []*Products, init func(*Products), assign func(*Products, *PromotionHasProduct)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Products)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(promotionhasproduct.FieldProductsID)
	}
	query.Where(predicate.PromotionHasProduct(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(products.PromotionHasProductColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductsID
		if fk == nil {
			return fmt.Errorf(`foreign-key "products_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "products_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductsQuery) loadToolHasProduct(ctx context.Context, query *ToolHasProductQuery, nodes []*Products, init func(*Products), assign func(*Products, *ToolHasProduct)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Products)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(toolhasproduct.FieldProductsID)
	}
	query.Where(predicate.ToolHasProduct(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(products.ToolHasProductColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductsID
		if fk == nil {
			return fmt.Errorf(`foreign-key "products_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "products_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductsQuery) loadProductHasFeature(ctx context.Context, query *ProductHasFeatureQuery, nodes []*Products, init func(*Products), assign func(*Products, *ProductHasFeature)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Products)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(producthasfeature.FieldProductID)
	}
	query.Where(predicate.ProductHasFeature(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(products.ProductHasFeatureColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductID
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductsQuery) loadProductHasInfo(ctx context.Context, query *ProductHasInfoQuery, nodes []*Products, init func(*Products), assign func(*Products, *ProductHasInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Products)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(producthasinfo.FieldProductID)
	}
	query.Where(predicate.ProductHasInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(products.ProductHasInfoColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductID
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductsQuery) loadProductHasProductReference(ctx context.Context, query *ProductHasProductReferenceQuery, nodes []*Products, init func(*Products), assign func(*Products, *ProductHasProductReference)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Products)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(producthasproductreference.FieldProductID)
	}
	query.Where(predicate.ProductHasProductReference(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(products.ProductHasProductReferenceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductID
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProductsQuery) loadProductPrices(ctx context.Context, query *ProductPricesQuery, nodes []*Products, init func(*Products), assign func(*Products, *ProductPrices)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Products)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(productprices.FieldProductID)
	}
	query.Where(predicate.ProductPrices(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(products.ProductPricesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductID
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *ProductsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProductsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(products.Table, products.Columns, sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, products.FieldID)
		for i := range fields {
			if fields[i] != products.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pq.withCategory != nil {
			_spec.Node.AddColumnOnce(products.FieldCategoryID)
		}
		if pq.withBrand != nil {
			_spec.Node.AddColumnOnce(products.FieldBrandID)
		}
		if pq.withVariantType != nil {
			_spec.Node.AddColumnOnce(products.FieldVariantTypeID)
		}
		if pq.withProductReferences != nil {
			_spec.Node.AddColumnOnce(products.FieldProductReferencesID)
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProductsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(products.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = products.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductsGroupBy is the group-by builder for Products entities.
type ProductsGroupBy struct {
	selector
	build *ProductsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProductsGroupBy) Aggregate(fns ...AggregateFunc) *ProductsGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ProductsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, ent.OpQueryGroupBy)
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductsQuery, *ProductsGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ProductsGroupBy) sqlScan(ctx context.Context, root *ProductsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductsSelect is the builder for selecting fields of Products entities.
type ProductsSelect struct {
	*ProductsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ProductsSelect) Aggregate(fns ...AggregateFunc) *ProductsSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProductsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, ent.OpQuerySelect)
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductsQuery, *ProductsSelect](ctx, ps.ProductsQuery, ps, ps.inters, v)
}

func (ps *ProductsSelect) sqlScan(ctx context.Context, root *ProductsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
