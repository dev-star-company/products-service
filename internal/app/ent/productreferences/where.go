// Code generated by ent, DO NOT EDIT.

package productreferences

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldDeletedAt, v))
}

// ReferenceSourceID applies equality check predicate on the "reference_source_id" field. It's identical to ReferenceSourceIDEQ.
func ReferenceSourceID(v int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldReferenceSourceID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNotNull(FieldDeletedAt))
}

// ReferenceSourceIDEQ applies the EQ predicate on the "reference_source_id" field.
func ReferenceSourceIDEQ(v int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldReferenceSourceID, v))
}

// ReferenceSourceIDNEQ applies the NEQ predicate on the "reference_source_id" field.
func ReferenceSourceIDNEQ(v int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNEQ(FieldReferenceSourceID, v))
}

// ReferenceSourceIDIn applies the In predicate on the "reference_source_id" field.
func ReferenceSourceIDIn(vs ...int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldIn(FieldReferenceSourceID, vs...))
}

// ReferenceSourceIDNotIn applies the NotIn predicate on the "reference_source_id" field.
func ReferenceSourceIDNotIn(vs ...int) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNotIn(FieldReferenceSourceID, vs...))
}

// ReferenceSourceIDIsNil applies the IsNil predicate on the "reference_source_id" field.
func ReferenceSourceIDIsNil() predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldIsNull(FieldReferenceSourceID))
}

// ReferenceSourceIDNotNil applies the NotNil predicate on the "reference_source_id" field.
func ReferenceSourceIDNotNil() predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNotNull(FieldReferenceSourceID))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.ProductReferences {
	return predicate.ProductReferences(sql.FieldContainsFold(FieldValue, v))
}

// HasReferenceSources applies the HasEdge predicate on the "reference_sources" edge.
func HasReferenceSources() predicate.ProductReferences {
	return predicate.ProductReferences(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReferenceSourcesTable, ReferenceSourcesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferenceSourcesWith applies the HasEdge predicate on the "reference_sources" edge with a given conditions (other predicates).
func HasReferenceSourcesWith(preds ...predicate.ReferenceSources) predicate.ProductReferences {
	return predicate.ProductReferences(func(s *sql.Selector) {
		step := newReferenceSourcesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.ProductReferences {
	return predicate.ProductReferences(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Products) predicate.ProductReferences {
	return predicate.ProductReferences(func(s *sql.Selector) {
		step := newProductsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductHasProductReference applies the HasEdge predicate on the "product_has_product_reference" edge.
func HasProductHasProductReference() predicate.ProductReferences {
	return predicate.ProductReferences(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductHasProductReferenceTable, ProductHasProductReferenceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductHasProductReferenceWith applies the HasEdge predicate on the "product_has_product_reference" edge with a given conditions (other predicates).
func HasProductHasProductReferenceWith(preds ...predicate.ProductHasProductReference) predicate.ProductReferences {
	return predicate.ProductReferences(func(s *sql.Selector) {
		step := newProductHasProductReferenceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductReferences) predicate.ProductReferences {
	return predicate.ProductReferences(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductReferences) predicate.ProductReferences {
	return predicate.ProductReferences(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductReferences) predicate.ProductReferences {
	return predicate.ProductReferences(sql.NotPredicates(p))
}
