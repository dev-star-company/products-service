// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionHasProductUpdate is the builder for updating PromotionHasProduct entities.
type PromotionHasProductUpdate struct {
	config
	hooks    []Hook
	mutation *PromotionHasProductMutation
}

// Where appends a list predicates to the PromotionHasProductUpdate builder.
func (phpu *PromotionHasProductUpdate) Where(ps ...predicate.PromotionHasProduct) *PromotionHasProductUpdate {
	phpu.mutation.Where(ps...)
	return phpu
}

// SetDeletedAt sets the "deleted_at" field.
func (phpu *PromotionHasProductUpdate) SetDeletedAt(t time.Time) *PromotionHasProductUpdate {
	phpu.mutation.SetDeletedAt(t)
	return phpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillableDeletedAt(t *time.Time) *PromotionHasProductUpdate {
	if t != nil {
		phpu.SetDeletedAt(*t)
	}
	return phpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phpu *PromotionHasProductUpdate) ClearDeletedAt() *PromotionHasProductUpdate {
	phpu.mutation.ClearDeletedAt()
	return phpu
}

// SetProductsID sets the "products_id" field.
func (phpu *PromotionHasProductUpdate) SetProductsID(i int) *PromotionHasProductUpdate {
	phpu.mutation.SetProductsID(i)
	return phpu
}

// SetNillableProductsID sets the "products_id" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillableProductsID(i *int) *PromotionHasProductUpdate {
	if i != nil {
		phpu.SetProductsID(*i)
	}
	return phpu
}

// ClearProductsID clears the value of the "products_id" field.
func (phpu *PromotionHasProductUpdate) ClearProductsID() *PromotionHasProductUpdate {
	phpu.mutation.ClearProductsID()
	return phpu
}

// SetPromotionsID sets the "promotions_id" field.
func (phpu *PromotionHasProductUpdate) SetPromotionsID(i int) *PromotionHasProductUpdate {
	phpu.mutation.SetPromotionsID(i)
	return phpu
}

// SetNillablePromotionsID sets the "promotions_id" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillablePromotionsID(i *int) *PromotionHasProductUpdate {
	if i != nil {
		phpu.SetPromotionsID(*i)
	}
	return phpu
}

// ClearPromotionsID clears the value of the "promotions_id" field.
func (phpu *PromotionHasProductUpdate) ClearPromotionsID() *PromotionHasProductUpdate {
	phpu.mutation.ClearPromotionsID()
	return phpu
}

// SetPromocionalPrice sets the "promocional_price" field.
func (phpu *PromotionHasProductUpdate) SetPromocionalPrice(f float64) *PromotionHasProductUpdate {
	phpu.mutation.ResetPromocionalPrice()
	phpu.mutation.SetPromocionalPrice(f)
	return phpu
}

// SetNillablePromocionalPrice sets the "promocional_price" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillablePromocionalPrice(f *float64) *PromotionHasProductUpdate {
	if f != nil {
		phpu.SetPromocionalPrice(*f)
	}
	return phpu
}

// AddPromocionalPrice adds f to the "promocional_price" field.
func (phpu *PromotionHasProductUpdate) AddPromocionalPrice(f float64) *PromotionHasProductUpdate {
	phpu.mutation.AddPromocionalPrice(f)
	return phpu
}

// SetProducts sets the "products" edge to the Products entity.
func (phpu *PromotionHasProductUpdate) SetProducts(p *Products) *PromotionHasProductUpdate {
	return phpu.SetProductsID(p.ID)
}

// SetPromotions sets the "promotions" edge to the Promotions entity.
func (phpu *PromotionHasProductUpdate) SetPromotions(p *Promotions) *PromotionHasProductUpdate {
	return phpu.SetPromotionsID(p.ID)
}

// Mutation returns the PromotionHasProductMutation object of the builder.
func (phpu *PromotionHasProductUpdate) Mutation() *PromotionHasProductMutation {
	return phpu.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (phpu *PromotionHasProductUpdate) ClearProducts() *PromotionHasProductUpdate {
	phpu.mutation.ClearProducts()
	return phpu
}

// ClearPromotions clears the "promotions" edge to the Promotions entity.
func (phpu *PromotionHasProductUpdate) ClearPromotions() *PromotionHasProductUpdate {
	phpu.mutation.ClearPromotions()
	return phpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phpu *PromotionHasProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, phpu.sqlSave, phpu.mutation, phpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phpu *PromotionHasProductUpdate) SaveX(ctx context.Context) int {
	affected, err := phpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phpu *PromotionHasProductUpdate) Exec(ctx context.Context) error {
	_, err := phpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpu *PromotionHasProductUpdate) ExecX(ctx context.Context) {
	if err := phpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phpu *PromotionHasProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionhasproduct.Table, promotionhasproduct.Columns, sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt))
	if ps := phpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phpu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if phpu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phpu.mutation.PromocionalPrice(); ok {
		_spec.SetField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if value, ok := phpu.mutation.AddedPromocionalPrice(); ok {
		_spec.AddField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if phpu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductsTable,
			Columns: []string{promotionhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductsTable,
			Columns: []string{promotionhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phpu.mutation.PromotionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionsTable,
			Columns: []string{promotionhasproduct.PromotionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpu.mutation.PromotionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionsTable,
			Columns: []string{promotionhasproduct.PromotionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phpu.mutation.done = true
	return n, nil
}

// PromotionHasProductUpdateOne is the builder for updating a single PromotionHasProduct entity.
type PromotionHasProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromotionHasProductMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (phpuo *PromotionHasProductUpdateOne) SetDeletedAt(t time.Time) *PromotionHasProductUpdateOne {
	phpuo.mutation.SetDeletedAt(t)
	return phpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionHasProductUpdateOne {
	if t != nil {
		phpuo.SetDeletedAt(*t)
	}
	return phpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phpuo *PromotionHasProductUpdateOne) ClearDeletedAt() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearDeletedAt()
	return phpuo
}

// SetProductsID sets the "products_id" field.
func (phpuo *PromotionHasProductUpdateOne) SetProductsID(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.SetProductsID(i)
	return phpuo
}

// SetNillableProductsID sets the "products_id" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillableProductsID(i *int) *PromotionHasProductUpdateOne {
	if i != nil {
		phpuo.SetProductsID(*i)
	}
	return phpuo
}

// ClearProductsID clears the value of the "products_id" field.
func (phpuo *PromotionHasProductUpdateOne) ClearProductsID() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearProductsID()
	return phpuo
}

// SetPromotionsID sets the "promotions_id" field.
func (phpuo *PromotionHasProductUpdateOne) SetPromotionsID(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.SetPromotionsID(i)
	return phpuo
}

// SetNillablePromotionsID sets the "promotions_id" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillablePromotionsID(i *int) *PromotionHasProductUpdateOne {
	if i != nil {
		phpuo.SetPromotionsID(*i)
	}
	return phpuo
}

// ClearPromotionsID clears the value of the "promotions_id" field.
func (phpuo *PromotionHasProductUpdateOne) ClearPromotionsID() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearPromotionsID()
	return phpuo
}

// SetPromocionalPrice sets the "promocional_price" field.
func (phpuo *PromotionHasProductUpdateOne) SetPromocionalPrice(f float64) *PromotionHasProductUpdateOne {
	phpuo.mutation.ResetPromocionalPrice()
	phpuo.mutation.SetPromocionalPrice(f)
	return phpuo
}

// SetNillablePromocionalPrice sets the "promocional_price" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillablePromocionalPrice(f *float64) *PromotionHasProductUpdateOne {
	if f != nil {
		phpuo.SetPromocionalPrice(*f)
	}
	return phpuo
}

// AddPromocionalPrice adds f to the "promocional_price" field.
func (phpuo *PromotionHasProductUpdateOne) AddPromocionalPrice(f float64) *PromotionHasProductUpdateOne {
	phpuo.mutation.AddPromocionalPrice(f)
	return phpuo
}

// SetProducts sets the "products" edge to the Products entity.
func (phpuo *PromotionHasProductUpdateOne) SetProducts(p *Products) *PromotionHasProductUpdateOne {
	return phpuo.SetProductsID(p.ID)
}

// SetPromotions sets the "promotions" edge to the Promotions entity.
func (phpuo *PromotionHasProductUpdateOne) SetPromotions(p *Promotions) *PromotionHasProductUpdateOne {
	return phpuo.SetPromotionsID(p.ID)
}

// Mutation returns the PromotionHasProductMutation object of the builder.
func (phpuo *PromotionHasProductUpdateOne) Mutation() *PromotionHasProductMutation {
	return phpuo.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (phpuo *PromotionHasProductUpdateOne) ClearProducts() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearProducts()
	return phpuo
}

// ClearPromotions clears the "promotions" edge to the Promotions entity.
func (phpuo *PromotionHasProductUpdateOne) ClearPromotions() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearPromotions()
	return phpuo
}

// Where appends a list predicates to the PromotionHasProductUpdate builder.
func (phpuo *PromotionHasProductUpdateOne) Where(ps ...predicate.PromotionHasProduct) *PromotionHasProductUpdateOne {
	phpuo.mutation.Where(ps...)
	return phpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phpuo *PromotionHasProductUpdateOne) Select(field string, fields ...string) *PromotionHasProductUpdateOne {
	phpuo.fields = append([]string{field}, fields...)
	return phpuo
}

// Save executes the query and returns the updated PromotionHasProduct entity.
func (phpuo *PromotionHasProductUpdateOne) Save(ctx context.Context) (*PromotionHasProduct, error) {
	return withHooks(ctx, phpuo.sqlSave, phpuo.mutation, phpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phpuo *PromotionHasProductUpdateOne) SaveX(ctx context.Context) *PromotionHasProduct {
	node, err := phpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phpuo *PromotionHasProductUpdateOne) Exec(ctx context.Context) error {
	_, err := phpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpuo *PromotionHasProductUpdateOne) ExecX(ctx context.Context) {
	if err := phpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phpuo *PromotionHasProductUpdateOne) sqlSave(ctx context.Context) (_node *PromotionHasProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionhasproduct.Table, promotionhasproduct.Columns, sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt))
	id, ok := phpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionHasProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionhasproduct.FieldID)
		for _, f := range fields {
			if !promotionhasproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionhasproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phpuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if phpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phpuo.mutation.PromocionalPrice(); ok {
		_spec.SetField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if value, ok := phpuo.mutation.AddedPromocionalPrice(); ok {
		_spec.AddField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if phpuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductsTable,
			Columns: []string{promotionhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductsTable,
			Columns: []string{promotionhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phpuo.mutation.PromotionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionsTable,
			Columns: []string{promotionhasproduct.PromotionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpuo.mutation.PromotionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionsTable,
			Columns: []string{promotionhasproduct.PromotionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PromotionHasProduct{config: phpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phpuo.mutation.done = true
	return _node, nil
}
