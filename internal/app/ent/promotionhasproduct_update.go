// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionHasProductUpdate is the builder for updating PromotionHasProduct entities.
type PromotionHasProductUpdate struct {
	config
	hooks    []Hook
	mutation *PromotionHasProductMutation
}

// Where appends a list predicates to the PromotionHasProductUpdate builder.
func (phpu *PromotionHasProductUpdate) Where(ps ...predicate.PromotionHasProduct) *PromotionHasProductUpdate {
	phpu.mutation.Where(ps...)
	return phpu
}

// SetUpdatedAt sets the "updated_at" field.
func (phpu *PromotionHasProductUpdate) SetUpdatedAt(t time.Time) *PromotionHasProductUpdate {
	phpu.mutation.SetUpdatedAt(t)
	return phpu
}

// SetDeletedAt sets the "deleted_at" field.
func (phpu *PromotionHasProductUpdate) SetDeletedAt(t time.Time) *PromotionHasProductUpdate {
	phpu.mutation.SetDeletedAt(t)
	return phpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillableDeletedAt(t *time.Time) *PromotionHasProductUpdate {
	if t != nil {
		phpu.SetDeletedAt(*t)
	}
	return phpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phpu *PromotionHasProductUpdate) ClearDeletedAt() *PromotionHasProductUpdate {
	phpu.mutation.ClearDeletedAt()
	return phpu
}

// SetUpdatedBy sets the "updated_by" field.
func (phpu *PromotionHasProductUpdate) SetUpdatedBy(i int) *PromotionHasProductUpdate {
	phpu.mutation.ResetUpdatedBy()
	phpu.mutation.SetUpdatedBy(i)
	return phpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillableUpdatedBy(i *int) *PromotionHasProductUpdate {
	if i != nil {
		phpu.SetUpdatedBy(*i)
	}
	return phpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (phpu *PromotionHasProductUpdate) AddUpdatedBy(i int) *PromotionHasProductUpdate {
	phpu.mutation.AddUpdatedBy(i)
	return phpu
}

// SetDeletedBy sets the "deleted_by" field.
func (phpu *PromotionHasProductUpdate) SetDeletedBy(i int) *PromotionHasProductUpdate {
	phpu.mutation.ResetDeletedBy()
	phpu.mutation.SetDeletedBy(i)
	return phpu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillableDeletedBy(i *int) *PromotionHasProductUpdate {
	if i != nil {
		phpu.SetDeletedBy(*i)
	}
	return phpu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (phpu *PromotionHasProductUpdate) AddDeletedBy(i int) *PromotionHasProductUpdate {
	phpu.mutation.AddDeletedBy(i)
	return phpu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phpu *PromotionHasProductUpdate) ClearDeletedBy() *PromotionHasProductUpdate {
	phpu.mutation.ClearDeletedBy()
	return phpu
}

// SetProductID sets the "product_id" field.
func (phpu *PromotionHasProductUpdate) SetProductID(i int) *PromotionHasProductUpdate {
	phpu.mutation.ResetProductID()
	phpu.mutation.SetProductID(i)
	return phpu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillableProductID(i *int) *PromotionHasProductUpdate {
	if i != nil {
		phpu.SetProductID(*i)
	}
	return phpu
}

// AddProductID adds i to the "product_id" field.
func (phpu *PromotionHasProductUpdate) AddProductID(i int) *PromotionHasProductUpdate {
	phpu.mutation.AddProductID(i)
	return phpu
}

// ClearProductID clears the value of the "product_id" field.
func (phpu *PromotionHasProductUpdate) ClearProductID() *PromotionHasProductUpdate {
	phpu.mutation.ClearProductID()
	return phpu
}

// SetPromotionID sets the "promotion_id" field.
func (phpu *PromotionHasProductUpdate) SetPromotionID(i int) *PromotionHasProductUpdate {
	phpu.mutation.ResetPromotionID()
	phpu.mutation.SetPromotionID(i)
	return phpu
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillablePromotionID(i *int) *PromotionHasProductUpdate {
	if i != nil {
		phpu.SetPromotionID(*i)
	}
	return phpu
}

// AddPromotionID adds i to the "promotion_id" field.
func (phpu *PromotionHasProductUpdate) AddPromotionID(i int) *PromotionHasProductUpdate {
	phpu.mutation.AddPromotionID(i)
	return phpu
}

// SetPromocionalPrice sets the "promocional_price" field.
func (phpu *PromotionHasProductUpdate) SetPromocionalPrice(f float64) *PromotionHasProductUpdate {
	phpu.mutation.ResetPromocionalPrice()
	phpu.mutation.SetPromocionalPrice(f)
	return phpu
}

// SetNillablePromocionalPrice sets the "promocional_price" field if the given value is not nil.
func (phpu *PromotionHasProductUpdate) SetNillablePromocionalPrice(f *float64) *PromotionHasProductUpdate {
	if f != nil {
		phpu.SetPromocionalPrice(*f)
	}
	return phpu
}

// AddPromocionalPrice adds f to the "promocional_price" field.
func (phpu *PromotionHasProductUpdate) AddPromocionalPrice(f float64) *PromotionHasProductUpdate {
	phpu.mutation.AddPromocionalPrice(f)
	return phpu
}

// SetProduct sets the "product" edge to the Products entity.
func (phpu *PromotionHasProductUpdate) SetProduct(p *Products) *PromotionHasProductUpdate {
	return phpu.SetProductID(p.ID)
}

// SetPromotion sets the "promotion" edge to the Promotions entity.
func (phpu *PromotionHasProductUpdate) SetPromotion(p *Promotions) *PromotionHasProductUpdate {
	return phpu.SetPromotionID(p.ID)
}

// Mutation returns the PromotionHasProductMutation object of the builder.
func (phpu *PromotionHasProductUpdate) Mutation() *PromotionHasProductMutation {
	return phpu.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (phpu *PromotionHasProductUpdate) ClearProduct() *PromotionHasProductUpdate {
	phpu.mutation.ClearProduct()
	return phpu
}

// ClearPromotion clears the "promotion" edge to the Promotions entity.
func (phpu *PromotionHasProductUpdate) ClearPromotion() *PromotionHasProductUpdate {
	phpu.mutation.ClearPromotion()
	return phpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phpu *PromotionHasProductUpdate) Save(ctx context.Context) (int, error) {
	phpu.defaults()
	return withHooks(ctx, phpu.sqlSave, phpu.mutation, phpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phpu *PromotionHasProductUpdate) SaveX(ctx context.Context) int {
	affected, err := phpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phpu *PromotionHasProductUpdate) Exec(ctx context.Context) error {
	_, err := phpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpu *PromotionHasProductUpdate) ExecX(ctx context.Context) {
	if err := phpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phpu *PromotionHasProductUpdate) defaults() {
	if _, ok := phpu.mutation.UpdatedAt(); !ok {
		v := promotionhasproduct.UpdateDefaultUpdatedAt()
		phpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phpu *PromotionHasProductUpdate) check() error {
	if v, ok := phpu.mutation.UpdatedBy(); ok {
		if err := promotionhasproduct.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PromotionHasProduct.updated_by": %w`, err)}
		}
	}
	if phpu.mutation.ProductCleared() && len(phpu.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PromotionHasProduct.product"`)
	}
	if phpu.mutation.PromotionCleared() && len(phpu.mutation.PromotionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PromotionHasProduct.promotion"`)
	}
	return nil
}

func (phpu *PromotionHasProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionhasproduct.Table, promotionhasproduct.Columns, sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt))
	if ps := phpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phpu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := phpu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if phpu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phpu.mutation.UpdatedBy(); ok {
		_spec.SetField(promotionhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(promotionhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phpu.mutation.DeletedBy(); ok {
		_spec.SetField(promotionhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := phpu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(promotionhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if phpu.mutation.DeletedByCleared() {
		_spec.ClearField(promotionhasproduct.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := phpu.mutation.ProductID(); ok {
		_spec.SetField(promotionhasproduct.FieldProductID, field.TypeInt, value)
	}
	if value, ok := phpu.mutation.AddedProductID(); ok {
		_spec.AddField(promotionhasproduct.FieldProductID, field.TypeInt, value)
	}
	if phpu.mutation.ProductIDCleared() {
		_spec.ClearField(promotionhasproduct.FieldProductID, field.TypeInt)
	}
	if value, ok := phpu.mutation.PromotionID(); ok {
		_spec.SetField(promotionhasproduct.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := phpu.mutation.AddedPromotionID(); ok {
		_spec.AddField(promotionhasproduct.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := phpu.mutation.PromocionalPrice(); ok {
		_spec.SetField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if value, ok := phpu.mutation.AddedPromocionalPrice(); ok {
		_spec.AddField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if phpu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductTable,
			Columns: []string{promotionhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductTable,
			Columns: []string{promotionhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phpu.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionTable,
			Columns: []string{promotionhasproduct.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpu.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionTable,
			Columns: []string{promotionhasproduct.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phpu.mutation.done = true
	return n, nil
}

// PromotionHasProductUpdateOne is the builder for updating a single PromotionHasProduct entity.
type PromotionHasProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromotionHasProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (phpuo *PromotionHasProductUpdateOne) SetUpdatedAt(t time.Time) *PromotionHasProductUpdateOne {
	phpuo.mutation.SetUpdatedAt(t)
	return phpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (phpuo *PromotionHasProductUpdateOne) SetDeletedAt(t time.Time) *PromotionHasProductUpdateOne {
	phpuo.mutation.SetDeletedAt(t)
	return phpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionHasProductUpdateOne {
	if t != nil {
		phpuo.SetDeletedAt(*t)
	}
	return phpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phpuo *PromotionHasProductUpdateOne) ClearDeletedAt() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearDeletedAt()
	return phpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (phpuo *PromotionHasProductUpdateOne) SetUpdatedBy(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.ResetUpdatedBy()
	phpuo.mutation.SetUpdatedBy(i)
	return phpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillableUpdatedBy(i *int) *PromotionHasProductUpdateOne {
	if i != nil {
		phpuo.SetUpdatedBy(*i)
	}
	return phpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (phpuo *PromotionHasProductUpdateOne) AddUpdatedBy(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.AddUpdatedBy(i)
	return phpuo
}

// SetDeletedBy sets the "deleted_by" field.
func (phpuo *PromotionHasProductUpdateOne) SetDeletedBy(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.ResetDeletedBy()
	phpuo.mutation.SetDeletedBy(i)
	return phpuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillableDeletedBy(i *int) *PromotionHasProductUpdateOne {
	if i != nil {
		phpuo.SetDeletedBy(*i)
	}
	return phpuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (phpuo *PromotionHasProductUpdateOne) AddDeletedBy(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.AddDeletedBy(i)
	return phpuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phpuo *PromotionHasProductUpdateOne) ClearDeletedBy() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearDeletedBy()
	return phpuo
}

// SetProductID sets the "product_id" field.
func (phpuo *PromotionHasProductUpdateOne) SetProductID(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.ResetProductID()
	phpuo.mutation.SetProductID(i)
	return phpuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillableProductID(i *int) *PromotionHasProductUpdateOne {
	if i != nil {
		phpuo.SetProductID(*i)
	}
	return phpuo
}

// AddProductID adds i to the "product_id" field.
func (phpuo *PromotionHasProductUpdateOne) AddProductID(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.AddProductID(i)
	return phpuo
}

// ClearProductID clears the value of the "product_id" field.
func (phpuo *PromotionHasProductUpdateOne) ClearProductID() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearProductID()
	return phpuo
}

// SetPromotionID sets the "promotion_id" field.
func (phpuo *PromotionHasProductUpdateOne) SetPromotionID(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.ResetPromotionID()
	phpuo.mutation.SetPromotionID(i)
	return phpuo
}

// SetNillablePromotionID sets the "promotion_id" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillablePromotionID(i *int) *PromotionHasProductUpdateOne {
	if i != nil {
		phpuo.SetPromotionID(*i)
	}
	return phpuo
}

// AddPromotionID adds i to the "promotion_id" field.
func (phpuo *PromotionHasProductUpdateOne) AddPromotionID(i int) *PromotionHasProductUpdateOne {
	phpuo.mutation.AddPromotionID(i)
	return phpuo
}

// SetPromocionalPrice sets the "promocional_price" field.
func (phpuo *PromotionHasProductUpdateOne) SetPromocionalPrice(f float64) *PromotionHasProductUpdateOne {
	phpuo.mutation.ResetPromocionalPrice()
	phpuo.mutation.SetPromocionalPrice(f)
	return phpuo
}

// SetNillablePromocionalPrice sets the "promocional_price" field if the given value is not nil.
func (phpuo *PromotionHasProductUpdateOne) SetNillablePromocionalPrice(f *float64) *PromotionHasProductUpdateOne {
	if f != nil {
		phpuo.SetPromocionalPrice(*f)
	}
	return phpuo
}

// AddPromocionalPrice adds f to the "promocional_price" field.
func (phpuo *PromotionHasProductUpdateOne) AddPromocionalPrice(f float64) *PromotionHasProductUpdateOne {
	phpuo.mutation.AddPromocionalPrice(f)
	return phpuo
}

// SetProduct sets the "product" edge to the Products entity.
func (phpuo *PromotionHasProductUpdateOne) SetProduct(p *Products) *PromotionHasProductUpdateOne {
	return phpuo.SetProductID(p.ID)
}

// SetPromotion sets the "promotion" edge to the Promotions entity.
func (phpuo *PromotionHasProductUpdateOne) SetPromotion(p *Promotions) *PromotionHasProductUpdateOne {
	return phpuo.SetPromotionID(p.ID)
}

// Mutation returns the PromotionHasProductMutation object of the builder.
func (phpuo *PromotionHasProductUpdateOne) Mutation() *PromotionHasProductMutation {
	return phpuo.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (phpuo *PromotionHasProductUpdateOne) ClearProduct() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearProduct()
	return phpuo
}

// ClearPromotion clears the "promotion" edge to the Promotions entity.
func (phpuo *PromotionHasProductUpdateOne) ClearPromotion() *PromotionHasProductUpdateOne {
	phpuo.mutation.ClearPromotion()
	return phpuo
}

// Where appends a list predicates to the PromotionHasProductUpdate builder.
func (phpuo *PromotionHasProductUpdateOne) Where(ps ...predicate.PromotionHasProduct) *PromotionHasProductUpdateOne {
	phpuo.mutation.Where(ps...)
	return phpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phpuo *PromotionHasProductUpdateOne) Select(field string, fields ...string) *PromotionHasProductUpdateOne {
	phpuo.fields = append([]string{field}, fields...)
	return phpuo
}

// Save executes the query and returns the updated PromotionHasProduct entity.
func (phpuo *PromotionHasProductUpdateOne) Save(ctx context.Context) (*PromotionHasProduct, error) {
	phpuo.defaults()
	return withHooks(ctx, phpuo.sqlSave, phpuo.mutation, phpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phpuo *PromotionHasProductUpdateOne) SaveX(ctx context.Context) *PromotionHasProduct {
	node, err := phpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phpuo *PromotionHasProductUpdateOne) Exec(ctx context.Context) error {
	_, err := phpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpuo *PromotionHasProductUpdateOne) ExecX(ctx context.Context) {
	if err := phpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phpuo *PromotionHasProductUpdateOne) defaults() {
	if _, ok := phpuo.mutation.UpdatedAt(); !ok {
		v := promotionhasproduct.UpdateDefaultUpdatedAt()
		phpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phpuo *PromotionHasProductUpdateOne) check() error {
	if v, ok := phpuo.mutation.UpdatedBy(); ok {
		if err := promotionhasproduct.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PromotionHasProduct.updated_by": %w`, err)}
		}
	}
	if phpuo.mutation.ProductCleared() && len(phpuo.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PromotionHasProduct.product"`)
	}
	if phpuo.mutation.PromotionCleared() && len(phpuo.mutation.PromotionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PromotionHasProduct.promotion"`)
	}
	return nil
}

func (phpuo *PromotionHasProductUpdateOne) sqlSave(ctx context.Context) (_node *PromotionHasProduct, err error) {
	if err := phpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionhasproduct.Table, promotionhasproduct.Columns, sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt))
	id, ok := phpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionHasProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionhasproduct.FieldID)
		for _, f := range fields {
			if !promotionhasproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionhasproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := phpuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if phpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(promotionhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(promotionhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := phpuo.mutation.DeletedBy(); ok {
		_spec.SetField(promotionhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := phpuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(promotionhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if phpuo.mutation.DeletedByCleared() {
		_spec.ClearField(promotionhasproduct.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := phpuo.mutation.ProductID(); ok {
		_spec.SetField(promotionhasproduct.FieldProductID, field.TypeInt, value)
	}
	if value, ok := phpuo.mutation.AddedProductID(); ok {
		_spec.AddField(promotionhasproduct.FieldProductID, field.TypeInt, value)
	}
	if phpuo.mutation.ProductIDCleared() {
		_spec.ClearField(promotionhasproduct.FieldProductID, field.TypeInt)
	}
	if value, ok := phpuo.mutation.PromotionID(); ok {
		_spec.SetField(promotionhasproduct.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := phpuo.mutation.AddedPromotionID(); ok {
		_spec.AddField(promotionhasproduct.FieldPromotionID, field.TypeInt, value)
	}
	if value, ok := phpuo.mutation.PromocionalPrice(); ok {
		_spec.SetField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if value, ok := phpuo.mutation.AddedPromocionalPrice(); ok {
		_spec.AddField(promotionhasproduct.FieldPromocionalPrice, field.TypeFloat64, value)
	}
	if phpuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductTable,
			Columns: []string{promotionhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.ProductTable,
			Columns: []string{promotionhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phpuo.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionTable,
			Columns: []string{promotionhasproduct.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpuo.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionhasproduct.PromotionTable,
			Columns: []string{promotionhasproduct.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PromotionHasProduct{config: phpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phpuo.mutation.done = true
	return _node, nil
}
