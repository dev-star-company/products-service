// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/infotypes"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/productinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InfoTypesUpdate is the builder for updating InfoTypes entities.
type InfoTypesUpdate struct {
	config
	hooks    []Hook
	mutation *InfoTypesMutation
}

// Where appends a list predicates to the InfoTypesUpdate builder.
func (itu *InfoTypesUpdate) Where(ps ...predicate.InfoTypes) *InfoTypesUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetDeletedAt sets the "deleted_at" field.
func (itu *InfoTypesUpdate) SetDeletedAt(t time.Time) *InfoTypesUpdate {
	itu.mutation.SetDeletedAt(t)
	return itu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (itu *InfoTypesUpdate) SetNillableDeletedAt(t *time.Time) *InfoTypesUpdate {
	if t != nil {
		itu.SetDeletedAt(*t)
	}
	return itu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (itu *InfoTypesUpdate) ClearDeletedAt() *InfoTypesUpdate {
	itu.mutation.ClearDeletedAt()
	return itu
}

// SetName sets the "name" field.
func (itu *InfoTypesUpdate) SetName(s string) *InfoTypesUpdate {
	itu.mutation.SetName(s)
	return itu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (itu *InfoTypesUpdate) SetNillableName(s *string) *InfoTypesUpdate {
	if s != nil {
		itu.SetName(*s)
	}
	return itu
}

// AddProductInfoIDs adds the "product_info" edge to the ProductInfo entity by IDs.
func (itu *InfoTypesUpdate) AddProductInfoIDs(ids ...int) *InfoTypesUpdate {
	itu.mutation.AddProductInfoIDs(ids...)
	return itu
}

// AddProductInfo adds the "product_info" edges to the ProductInfo entity.
func (itu *InfoTypesUpdate) AddProductInfo(p ...*ProductInfo) *InfoTypesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return itu.AddProductInfoIDs(ids...)
}

// Mutation returns the InfoTypesMutation object of the builder.
func (itu *InfoTypesUpdate) Mutation() *InfoTypesMutation {
	return itu.mutation
}

// ClearProductInfo clears all "product_info" edges to the ProductInfo entity.
func (itu *InfoTypesUpdate) ClearProductInfo() *InfoTypesUpdate {
	itu.mutation.ClearProductInfo()
	return itu
}

// RemoveProductInfoIDs removes the "product_info" edge to ProductInfo entities by IDs.
func (itu *InfoTypesUpdate) RemoveProductInfoIDs(ids ...int) *InfoTypesUpdate {
	itu.mutation.RemoveProductInfoIDs(ids...)
	return itu
}

// RemoveProductInfo removes "product_info" edges to ProductInfo entities.
func (itu *InfoTypesUpdate) RemoveProductInfo(p ...*ProductInfo) *InfoTypesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return itu.RemoveProductInfoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *InfoTypesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *InfoTypesUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *InfoTypesUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *InfoTypesUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (itu *InfoTypesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(infotypes.Table, infotypes.Columns, sqlgraph.NewFieldSpec(infotypes.FieldID, field.TypeInt))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.DeletedAt(); ok {
		_spec.SetField(infotypes.FieldDeletedAt, field.TypeTime, value)
	}
	if itu.mutation.DeletedAtCleared() {
		_spec.ClearField(infotypes.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := itu.mutation.Name(); ok {
		_spec.SetField(infotypes.FieldName, field.TypeString, value)
	}
	if itu.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   infotypes.ProductInfoTable,
			Columns: []string{infotypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.RemovedProductInfoIDs(); len(nodes) > 0 && !itu.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   infotypes.ProductInfoTable,
			Columns: []string{infotypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   infotypes.ProductInfoTable,
			Columns: []string{infotypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{infotypes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// InfoTypesUpdateOne is the builder for updating a single InfoTypes entity.
type InfoTypesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InfoTypesMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ituo *InfoTypesUpdateOne) SetDeletedAt(t time.Time) *InfoTypesUpdateOne {
	ituo.mutation.SetDeletedAt(t)
	return ituo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ituo *InfoTypesUpdateOne) SetNillableDeletedAt(t *time.Time) *InfoTypesUpdateOne {
	if t != nil {
		ituo.SetDeletedAt(*t)
	}
	return ituo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ituo *InfoTypesUpdateOne) ClearDeletedAt() *InfoTypesUpdateOne {
	ituo.mutation.ClearDeletedAt()
	return ituo
}

// SetName sets the "name" field.
func (ituo *InfoTypesUpdateOne) SetName(s string) *InfoTypesUpdateOne {
	ituo.mutation.SetName(s)
	return ituo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ituo *InfoTypesUpdateOne) SetNillableName(s *string) *InfoTypesUpdateOne {
	if s != nil {
		ituo.SetName(*s)
	}
	return ituo
}

// AddProductInfoIDs adds the "product_info" edge to the ProductInfo entity by IDs.
func (ituo *InfoTypesUpdateOne) AddProductInfoIDs(ids ...int) *InfoTypesUpdateOne {
	ituo.mutation.AddProductInfoIDs(ids...)
	return ituo
}

// AddProductInfo adds the "product_info" edges to the ProductInfo entity.
func (ituo *InfoTypesUpdateOne) AddProductInfo(p ...*ProductInfo) *InfoTypesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ituo.AddProductInfoIDs(ids...)
}

// Mutation returns the InfoTypesMutation object of the builder.
func (ituo *InfoTypesUpdateOne) Mutation() *InfoTypesMutation {
	return ituo.mutation
}

// ClearProductInfo clears all "product_info" edges to the ProductInfo entity.
func (ituo *InfoTypesUpdateOne) ClearProductInfo() *InfoTypesUpdateOne {
	ituo.mutation.ClearProductInfo()
	return ituo
}

// RemoveProductInfoIDs removes the "product_info" edge to ProductInfo entities by IDs.
func (ituo *InfoTypesUpdateOne) RemoveProductInfoIDs(ids ...int) *InfoTypesUpdateOne {
	ituo.mutation.RemoveProductInfoIDs(ids...)
	return ituo
}

// RemoveProductInfo removes "product_info" edges to ProductInfo entities.
func (ituo *InfoTypesUpdateOne) RemoveProductInfo(p ...*ProductInfo) *InfoTypesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ituo.RemoveProductInfoIDs(ids...)
}

// Where appends a list predicates to the InfoTypesUpdate builder.
func (ituo *InfoTypesUpdateOne) Where(ps ...predicate.InfoTypes) *InfoTypesUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *InfoTypesUpdateOne) Select(field string, fields ...string) *InfoTypesUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated InfoTypes entity.
func (ituo *InfoTypesUpdateOne) Save(ctx context.Context) (*InfoTypes, error) {
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *InfoTypesUpdateOne) SaveX(ctx context.Context) *InfoTypes {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *InfoTypesUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *InfoTypesUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ituo *InfoTypesUpdateOne) sqlSave(ctx context.Context) (_node *InfoTypes, err error) {
	_spec := sqlgraph.NewUpdateSpec(infotypes.Table, infotypes.Columns, sqlgraph.NewFieldSpec(infotypes.FieldID, field.TypeInt))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InfoTypes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, infotypes.FieldID)
		for _, f := range fields {
			if !infotypes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != infotypes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.DeletedAt(); ok {
		_spec.SetField(infotypes.FieldDeletedAt, field.TypeTime, value)
	}
	if ituo.mutation.DeletedAtCleared() {
		_spec.ClearField(infotypes.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ituo.mutation.Name(); ok {
		_spec.SetField(infotypes.FieldName, field.TypeString, value)
	}
	if ituo.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   infotypes.ProductInfoTable,
			Columns: []string{infotypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.RemovedProductInfoIDs(); len(nodes) > 0 && !ituo.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   infotypes.ProductInfoTable,
			Columns: []string{infotypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   infotypes.ProductInfoTable,
			Columns: []string{infotypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InfoTypes{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{infotypes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
