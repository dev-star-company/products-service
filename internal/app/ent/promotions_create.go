// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionsCreate is the builder for creating a Promotions entity.
type PromotionsCreate struct {
	config
	mutation *PromotionsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PromotionsCreate) SetCreatedAt(t time.Time) *PromotionsCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PromotionsCreate) SetNillableCreatedAt(t *time.Time) *PromotionsCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PromotionsCreate) SetUpdatedAt(t time.Time) *PromotionsCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PromotionsCreate) SetNillableUpdatedAt(t *time.Time) *PromotionsCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PromotionsCreate) SetDeletedAt(t time.Time) *PromotionsCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PromotionsCreate) SetNillableDeletedAt(t *time.Time) *PromotionsCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PromotionsCreate) SetCreatedBy(i int) *PromotionsCreate {
	pc.mutation.SetCreatedBy(i)
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PromotionsCreate) SetUpdatedBy(i int) *PromotionsCreate {
	pc.mutation.SetUpdatedBy(i)
	return pc
}

// SetDeletedBy sets the "deleted_by" field.
func (pc *PromotionsCreate) SetDeletedBy(i int) *PromotionsCreate {
	pc.mutation.SetDeletedBy(i)
	return pc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pc *PromotionsCreate) SetNillableDeletedBy(i *int) *PromotionsCreate {
	if i != nil {
		pc.SetDeletedBy(*i)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PromotionsCreate) SetName(s string) *PromotionsCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetStartingDatetime sets the "starting_datetime" field.
func (pc *PromotionsCreate) SetStartingDatetime(t time.Time) *PromotionsCreate {
	pc.mutation.SetStartingDatetime(t)
	return pc
}

// SetEndingDatetime sets the "ending_datetime" field.
func (pc *PromotionsCreate) SetEndingDatetime(t time.Time) *PromotionsCreate {
	pc.mutation.SetEndingDatetime(t)
	return pc
}

// AddPromotionHasProductIDs adds the "promotion_has_product" edge to the PromotionHasProduct entity by IDs.
func (pc *PromotionsCreate) AddPromotionHasProductIDs(ids ...int) *PromotionsCreate {
	pc.mutation.AddPromotionHasProductIDs(ids...)
	return pc
}

// AddPromotionHasProduct adds the "promotion_has_product" edges to the PromotionHasProduct entity.
func (pc *PromotionsCreate) AddPromotionHasProduct(p ...*PromotionHasProduct) *PromotionsCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPromotionHasProductIDs(ids...)
}

// Mutation returns the PromotionsMutation object of the builder.
func (pc *PromotionsCreate) Mutation() *PromotionsMutation {
	return pc.mutation
}

// Save creates the Promotions in the database.
func (pc *PromotionsCreate) Save(ctx context.Context) (*Promotions, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PromotionsCreate) SaveX(ctx context.Context) *Promotions {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PromotionsCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PromotionsCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PromotionsCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := promotions.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := promotions.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PromotionsCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Promotions.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Promotions.updated_at"`)}
	}
	if _, ok := pc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Promotions.created_by"`)}
	}
	if v, ok := pc.mutation.CreatedBy(); ok {
		if err := promotions.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Promotions.created_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Promotions.updated_by"`)}
	}
	if v, ok := pc.mutation.UpdatedBy(); ok {
		if err := promotions.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Promotions.updated_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Promotions.name"`)}
	}
	if _, ok := pc.mutation.StartingDatetime(); !ok {
		return &ValidationError{Name: "starting_datetime", err: errors.New(`ent: missing required field "Promotions.starting_datetime"`)}
	}
	if _, ok := pc.mutation.EndingDatetime(); !ok {
		return &ValidationError{Name: "ending_datetime", err: errors.New(`ent: missing required field "Promotions.ending_datetime"`)}
	}
	return nil
}

func (pc *PromotionsCreate) sqlSave(ctx context.Context) (*Promotions, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PromotionsCreate) createSpec() (*Promotions, *sqlgraph.CreateSpec) {
	var (
		_node = &Promotions{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(promotions.Table, sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(promotions.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotions.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(promotions.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(promotions.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(promotions.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.DeletedBy(); ok {
		_spec.SetField(promotions.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(promotions.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := pc.mutation.StartingDatetime(); ok {
		_spec.SetField(promotions.FieldStartingDatetime, field.TypeTime, value)
		_node.StartingDatetime = &value
	}
	if value, ok := pc.mutation.EndingDatetime(); ok {
		_spec.SetField(promotions.FieldEndingDatetime, field.TypeTime, value)
		_node.EndingDatetime = &value
	}
	if nodes := pc.mutation.PromotionHasProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotions.PromotionHasProductTable,
			Columns: []string{promotions.PromotionHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PromotionsCreateBulk is the builder for creating many Promotions entities in bulk.
type PromotionsCreateBulk struct {
	config
	err      error
	builders []*PromotionsCreate
}

// Save creates the Promotions entities in the database.
func (pcb *PromotionsCreateBulk) Save(ctx context.Context) ([]*Promotions, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Promotions, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PromotionsCreateBulk) SaveX(ctx context.Context) []*Promotions {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PromotionsCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PromotionsCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
