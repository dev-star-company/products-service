// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/imagefoldersource"
	"products-service/internal/app/ent/images"
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderPathUpdate is the builder for updating ImageFolderPath entities.
type ImageFolderPathUpdate struct {
	config
	hooks    []Hook
	mutation *ImageFolderPathMutation
}

// Where appends a list predicates to the ImageFolderPathUpdate builder.
func (ifpu *ImageFolderPathUpdate) Where(ps ...predicate.ImageFolderPath) *ImageFolderPathUpdate {
	ifpu.mutation.Where(ps...)
	return ifpu
}

// SetDeletedAt sets the "deleted_at" field.
func (ifpu *ImageFolderPathUpdate) SetDeletedAt(t time.Time) *ImageFolderPathUpdate {
	ifpu.mutation.SetDeletedAt(t)
	return ifpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ifpu *ImageFolderPathUpdate) SetNillableDeletedAt(t *time.Time) *ImageFolderPathUpdate {
	if t != nil {
		ifpu.SetDeletedAt(*t)
	}
	return ifpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ifpu *ImageFolderPathUpdate) ClearDeletedAt() *ImageFolderPathUpdate {
	ifpu.mutation.ClearDeletedAt()
	return ifpu
}

// SetImageFolderSourceID sets the "image_folder_source_id" field.
func (ifpu *ImageFolderPathUpdate) SetImageFolderSourceID(i int) *ImageFolderPathUpdate {
	ifpu.mutation.SetImageFolderSourceID(i)
	return ifpu
}

// SetNillableImageFolderSourceID sets the "image_folder_source_id" field if the given value is not nil.
func (ifpu *ImageFolderPathUpdate) SetNillableImageFolderSourceID(i *int) *ImageFolderPathUpdate {
	if i != nil {
		ifpu.SetImageFolderSourceID(*i)
	}
	return ifpu
}

// SetImageFolderSource sets the "image_folder_source" edge to the ImageFolderSource entity.
func (ifpu *ImageFolderPathUpdate) SetImageFolderSource(i *ImageFolderSource) *ImageFolderPathUpdate {
	return ifpu.SetImageFolderSourceID(i.ID)
}

// AddImageIDs adds the "images" edge to the Images entity by IDs.
func (ifpu *ImageFolderPathUpdate) AddImageIDs(ids ...int) *ImageFolderPathUpdate {
	ifpu.mutation.AddImageIDs(ids...)
	return ifpu
}

// AddImages adds the "images" edges to the Images entity.
func (ifpu *ImageFolderPathUpdate) AddImages(i ...*Images) *ImageFolderPathUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifpu.AddImageIDs(ids...)
}

// Mutation returns the ImageFolderPathMutation object of the builder.
func (ifpu *ImageFolderPathUpdate) Mutation() *ImageFolderPathMutation {
	return ifpu.mutation
}

// ClearImageFolderSource clears the "image_folder_source" edge to the ImageFolderSource entity.
func (ifpu *ImageFolderPathUpdate) ClearImageFolderSource() *ImageFolderPathUpdate {
	ifpu.mutation.ClearImageFolderSource()
	return ifpu
}

// ClearImages clears all "images" edges to the Images entity.
func (ifpu *ImageFolderPathUpdate) ClearImages() *ImageFolderPathUpdate {
	ifpu.mutation.ClearImages()
	return ifpu
}

// RemoveImageIDs removes the "images" edge to Images entities by IDs.
func (ifpu *ImageFolderPathUpdate) RemoveImageIDs(ids ...int) *ImageFolderPathUpdate {
	ifpu.mutation.RemoveImageIDs(ids...)
	return ifpu
}

// RemoveImages removes "images" edges to Images entities.
func (ifpu *ImageFolderPathUpdate) RemoveImages(i ...*Images) *ImageFolderPathUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifpu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ifpu *ImageFolderPathUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ifpu.sqlSave, ifpu.mutation, ifpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifpu *ImageFolderPathUpdate) SaveX(ctx context.Context) int {
	affected, err := ifpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ifpu *ImageFolderPathUpdate) Exec(ctx context.Context) error {
	_, err := ifpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifpu *ImageFolderPathUpdate) ExecX(ctx context.Context) {
	if err := ifpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifpu *ImageFolderPathUpdate) check() error {
	if ifpu.mutation.ImageFolderSourceCleared() && len(ifpu.mutation.ImageFolderSourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImageFolderPath.image_folder_source"`)
	}
	return nil
}

func (ifpu *ImageFolderPathUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ifpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagefolderpath.Table, imagefolderpath.Columns, sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt))
	if ps := ifpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifpu.mutation.DeletedAt(); ok {
		_spec.SetField(imagefolderpath.FieldDeletedAt, field.TypeTime, value)
	}
	if ifpu.mutation.DeletedAtCleared() {
		_spec.ClearField(imagefolderpath.FieldDeletedAt, field.TypeTime)
	}
	if ifpu.mutation.ImageFolderSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagefolderpath.ImageFolderSourceTable,
			Columns: []string{imagefolderpath.ImageFolderSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifpu.mutation.ImageFolderSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagefolderpath.ImageFolderSourceTable,
			Columns: []string{imagefolderpath.ImageFolderSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ifpu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefolderpath.ImagesTable,
			Columns: []string{imagefolderpath.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifpu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !ifpu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefolderpath.ImagesTable,
			Columns: []string{imagefolderpath.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifpu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefolderpath.ImagesTable,
			Columns: []string{imagefolderpath.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ifpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagefolderpath.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ifpu.mutation.done = true
	return n, nil
}

// ImageFolderPathUpdateOne is the builder for updating a single ImageFolderPath entity.
type ImageFolderPathUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageFolderPathMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ifpuo *ImageFolderPathUpdateOne) SetDeletedAt(t time.Time) *ImageFolderPathUpdateOne {
	ifpuo.mutation.SetDeletedAt(t)
	return ifpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ifpuo *ImageFolderPathUpdateOne) SetNillableDeletedAt(t *time.Time) *ImageFolderPathUpdateOne {
	if t != nil {
		ifpuo.SetDeletedAt(*t)
	}
	return ifpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ifpuo *ImageFolderPathUpdateOne) ClearDeletedAt() *ImageFolderPathUpdateOne {
	ifpuo.mutation.ClearDeletedAt()
	return ifpuo
}

// SetImageFolderSourceID sets the "image_folder_source_id" field.
func (ifpuo *ImageFolderPathUpdateOne) SetImageFolderSourceID(i int) *ImageFolderPathUpdateOne {
	ifpuo.mutation.SetImageFolderSourceID(i)
	return ifpuo
}

// SetNillableImageFolderSourceID sets the "image_folder_source_id" field if the given value is not nil.
func (ifpuo *ImageFolderPathUpdateOne) SetNillableImageFolderSourceID(i *int) *ImageFolderPathUpdateOne {
	if i != nil {
		ifpuo.SetImageFolderSourceID(*i)
	}
	return ifpuo
}

// SetImageFolderSource sets the "image_folder_source" edge to the ImageFolderSource entity.
func (ifpuo *ImageFolderPathUpdateOne) SetImageFolderSource(i *ImageFolderSource) *ImageFolderPathUpdateOne {
	return ifpuo.SetImageFolderSourceID(i.ID)
}

// AddImageIDs adds the "images" edge to the Images entity by IDs.
func (ifpuo *ImageFolderPathUpdateOne) AddImageIDs(ids ...int) *ImageFolderPathUpdateOne {
	ifpuo.mutation.AddImageIDs(ids...)
	return ifpuo
}

// AddImages adds the "images" edges to the Images entity.
func (ifpuo *ImageFolderPathUpdateOne) AddImages(i ...*Images) *ImageFolderPathUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifpuo.AddImageIDs(ids...)
}

// Mutation returns the ImageFolderPathMutation object of the builder.
func (ifpuo *ImageFolderPathUpdateOne) Mutation() *ImageFolderPathMutation {
	return ifpuo.mutation
}

// ClearImageFolderSource clears the "image_folder_source" edge to the ImageFolderSource entity.
func (ifpuo *ImageFolderPathUpdateOne) ClearImageFolderSource() *ImageFolderPathUpdateOne {
	ifpuo.mutation.ClearImageFolderSource()
	return ifpuo
}

// ClearImages clears all "images" edges to the Images entity.
func (ifpuo *ImageFolderPathUpdateOne) ClearImages() *ImageFolderPathUpdateOne {
	ifpuo.mutation.ClearImages()
	return ifpuo
}

// RemoveImageIDs removes the "images" edge to Images entities by IDs.
func (ifpuo *ImageFolderPathUpdateOne) RemoveImageIDs(ids ...int) *ImageFolderPathUpdateOne {
	ifpuo.mutation.RemoveImageIDs(ids...)
	return ifpuo
}

// RemoveImages removes "images" edges to Images entities.
func (ifpuo *ImageFolderPathUpdateOne) RemoveImages(i ...*Images) *ImageFolderPathUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifpuo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the ImageFolderPathUpdate builder.
func (ifpuo *ImageFolderPathUpdateOne) Where(ps ...predicate.ImageFolderPath) *ImageFolderPathUpdateOne {
	ifpuo.mutation.Where(ps...)
	return ifpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ifpuo *ImageFolderPathUpdateOne) Select(field string, fields ...string) *ImageFolderPathUpdateOne {
	ifpuo.fields = append([]string{field}, fields...)
	return ifpuo
}

// Save executes the query and returns the updated ImageFolderPath entity.
func (ifpuo *ImageFolderPathUpdateOne) Save(ctx context.Context) (*ImageFolderPath, error) {
	return withHooks(ctx, ifpuo.sqlSave, ifpuo.mutation, ifpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifpuo *ImageFolderPathUpdateOne) SaveX(ctx context.Context) *ImageFolderPath {
	node, err := ifpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ifpuo *ImageFolderPathUpdateOne) Exec(ctx context.Context) error {
	_, err := ifpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifpuo *ImageFolderPathUpdateOne) ExecX(ctx context.Context) {
	if err := ifpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifpuo *ImageFolderPathUpdateOne) check() error {
	if ifpuo.mutation.ImageFolderSourceCleared() && len(ifpuo.mutation.ImageFolderSourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ImageFolderPath.image_folder_source"`)
	}
	return nil
}

func (ifpuo *ImageFolderPathUpdateOne) sqlSave(ctx context.Context) (_node *ImageFolderPath, err error) {
	if err := ifpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagefolderpath.Table, imagefolderpath.Columns, sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt))
	id, ok := ifpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageFolderPath.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ifpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagefolderpath.FieldID)
		for _, f := range fields {
			if !imagefolderpath.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imagefolderpath.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ifpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifpuo.mutation.DeletedAt(); ok {
		_spec.SetField(imagefolderpath.FieldDeletedAt, field.TypeTime, value)
	}
	if ifpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(imagefolderpath.FieldDeletedAt, field.TypeTime)
	}
	if ifpuo.mutation.ImageFolderSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagefolderpath.ImageFolderSourceTable,
			Columns: []string{imagefolderpath.ImageFolderSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifpuo.mutation.ImageFolderSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagefolderpath.ImageFolderSourceTable,
			Columns: []string{imagefolderpath.ImageFolderSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ifpuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefolderpath.ImagesTable,
			Columns: []string{imagefolderpath.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifpuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !ifpuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefolderpath.ImagesTable,
			Columns: []string{imagefolderpath.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifpuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefolderpath.ImagesTable,
			Columns: []string{imagefolderpath.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageFolderPath{config: ifpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ifpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagefolderpath.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ifpuo.mutation.done = true
	return _node, nil
}
