// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/toolhasproduct"
	"products-service/internal/app/ent/tools"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ToolHasProductUpdate is the builder for updating ToolHasProduct entities.
type ToolHasProductUpdate struct {
	config
	hooks    []Hook
	mutation *ToolHasProductMutation
}

// Where appends a list predicates to the ToolHasProductUpdate builder.
func (thpu *ToolHasProductUpdate) Where(ps ...predicate.ToolHasProduct) *ToolHasProductUpdate {
	thpu.mutation.Where(ps...)
	return thpu
}

// SetDeletedAt sets the "deleted_at" field.
func (thpu *ToolHasProductUpdate) SetDeletedAt(t time.Time) *ToolHasProductUpdate {
	thpu.mutation.SetDeletedAt(t)
	return thpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableDeletedAt(t *time.Time) *ToolHasProductUpdate {
	if t != nil {
		thpu.SetDeletedAt(*t)
	}
	return thpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (thpu *ToolHasProductUpdate) ClearDeletedAt() *ToolHasProductUpdate {
	thpu.mutation.ClearDeletedAt()
	return thpu
}

// SetProductsID sets the "products_id" field.
func (thpu *ToolHasProductUpdate) SetProductsID(i int) *ToolHasProductUpdate {
	thpu.mutation.SetProductsID(i)
	return thpu
}

// SetNillableProductsID sets the "products_id" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableProductsID(i *int) *ToolHasProductUpdate {
	if i != nil {
		thpu.SetProductsID(*i)
	}
	return thpu
}

// ClearProductsID clears the value of the "products_id" field.
func (thpu *ToolHasProductUpdate) ClearProductsID() *ToolHasProductUpdate {
	thpu.mutation.ClearProductsID()
	return thpu
}

// SetToolsID sets the "tools_id" field.
func (thpu *ToolHasProductUpdate) SetToolsID(i int) *ToolHasProductUpdate {
	thpu.mutation.SetToolsID(i)
	return thpu
}

// SetNillableToolsID sets the "tools_id" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableToolsID(i *int) *ToolHasProductUpdate {
	if i != nil {
		thpu.SetToolsID(*i)
	}
	return thpu
}

// ClearToolsID clears the value of the "tools_id" field.
func (thpu *ToolHasProductUpdate) ClearToolsID() *ToolHasProductUpdate {
	thpu.mutation.ClearToolsID()
	return thpu
}

// SetProducts sets the "products" edge to the Products entity.
func (thpu *ToolHasProductUpdate) SetProducts(p *Products) *ToolHasProductUpdate {
	return thpu.SetProductsID(p.ID)
}

// SetTools sets the "tools" edge to the Tools entity.
func (thpu *ToolHasProductUpdate) SetTools(t *Tools) *ToolHasProductUpdate {
	return thpu.SetToolsID(t.ID)
}

// Mutation returns the ToolHasProductMutation object of the builder.
func (thpu *ToolHasProductUpdate) Mutation() *ToolHasProductMutation {
	return thpu.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (thpu *ToolHasProductUpdate) ClearProducts() *ToolHasProductUpdate {
	thpu.mutation.ClearProducts()
	return thpu
}

// ClearTools clears the "tools" edge to the Tools entity.
func (thpu *ToolHasProductUpdate) ClearTools() *ToolHasProductUpdate {
	thpu.mutation.ClearTools()
	return thpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thpu *ToolHasProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, thpu.sqlSave, thpu.mutation, thpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thpu *ToolHasProductUpdate) SaveX(ctx context.Context) int {
	affected, err := thpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thpu *ToolHasProductUpdate) Exec(ctx context.Context) error {
	_, err := thpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thpu *ToolHasProductUpdate) ExecX(ctx context.Context) {
	if err := thpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thpu *ToolHasProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(toolhasproduct.Table, toolhasproduct.Columns, sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt))
	if ps := thpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thpu.mutation.DeletedAt(); ok {
		_spec.SetField(toolhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if thpu.mutation.DeletedAtCleared() {
		_spec.ClearField(toolhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if thpu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductsTable,
			Columns: []string{toolhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductsTable,
			Columns: []string{toolhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if thpu.mutation.ToolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolsTable,
			Columns: []string{toolhasproduct.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpu.mutation.ToolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolsTable,
			Columns: []string{toolhasproduct.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toolhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thpu.mutation.done = true
	return n, nil
}

// ToolHasProductUpdateOne is the builder for updating a single ToolHasProduct entity.
type ToolHasProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToolHasProductMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (thpuo *ToolHasProductUpdateOne) SetDeletedAt(t time.Time) *ToolHasProductUpdateOne {
	thpuo.mutation.SetDeletedAt(t)
	return thpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableDeletedAt(t *time.Time) *ToolHasProductUpdateOne {
	if t != nil {
		thpuo.SetDeletedAt(*t)
	}
	return thpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (thpuo *ToolHasProductUpdateOne) ClearDeletedAt() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearDeletedAt()
	return thpuo
}

// SetProductsID sets the "products_id" field.
func (thpuo *ToolHasProductUpdateOne) SetProductsID(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.SetProductsID(i)
	return thpuo
}

// SetNillableProductsID sets the "products_id" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableProductsID(i *int) *ToolHasProductUpdateOne {
	if i != nil {
		thpuo.SetProductsID(*i)
	}
	return thpuo
}

// ClearProductsID clears the value of the "products_id" field.
func (thpuo *ToolHasProductUpdateOne) ClearProductsID() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearProductsID()
	return thpuo
}

// SetToolsID sets the "tools_id" field.
func (thpuo *ToolHasProductUpdateOne) SetToolsID(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.SetToolsID(i)
	return thpuo
}

// SetNillableToolsID sets the "tools_id" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableToolsID(i *int) *ToolHasProductUpdateOne {
	if i != nil {
		thpuo.SetToolsID(*i)
	}
	return thpuo
}

// ClearToolsID clears the value of the "tools_id" field.
func (thpuo *ToolHasProductUpdateOne) ClearToolsID() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearToolsID()
	return thpuo
}

// SetProducts sets the "products" edge to the Products entity.
func (thpuo *ToolHasProductUpdateOne) SetProducts(p *Products) *ToolHasProductUpdateOne {
	return thpuo.SetProductsID(p.ID)
}

// SetTools sets the "tools" edge to the Tools entity.
func (thpuo *ToolHasProductUpdateOne) SetTools(t *Tools) *ToolHasProductUpdateOne {
	return thpuo.SetToolsID(t.ID)
}

// Mutation returns the ToolHasProductMutation object of the builder.
func (thpuo *ToolHasProductUpdateOne) Mutation() *ToolHasProductMutation {
	return thpuo.mutation
}

// ClearProducts clears the "products" edge to the Products entity.
func (thpuo *ToolHasProductUpdateOne) ClearProducts() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearProducts()
	return thpuo
}

// ClearTools clears the "tools" edge to the Tools entity.
func (thpuo *ToolHasProductUpdateOne) ClearTools() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearTools()
	return thpuo
}

// Where appends a list predicates to the ToolHasProductUpdate builder.
func (thpuo *ToolHasProductUpdateOne) Where(ps ...predicate.ToolHasProduct) *ToolHasProductUpdateOne {
	thpuo.mutation.Where(ps...)
	return thpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thpuo *ToolHasProductUpdateOne) Select(field string, fields ...string) *ToolHasProductUpdateOne {
	thpuo.fields = append([]string{field}, fields...)
	return thpuo
}

// Save executes the query and returns the updated ToolHasProduct entity.
func (thpuo *ToolHasProductUpdateOne) Save(ctx context.Context) (*ToolHasProduct, error) {
	return withHooks(ctx, thpuo.sqlSave, thpuo.mutation, thpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thpuo *ToolHasProductUpdateOne) SaveX(ctx context.Context) *ToolHasProduct {
	node, err := thpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thpuo *ToolHasProductUpdateOne) Exec(ctx context.Context) error {
	_, err := thpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thpuo *ToolHasProductUpdateOne) ExecX(ctx context.Context) {
	if err := thpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thpuo *ToolHasProductUpdateOne) sqlSave(ctx context.Context) (_node *ToolHasProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(toolhasproduct.Table, toolhasproduct.Columns, sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt))
	id, ok := thpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ToolHasProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, toolhasproduct.FieldID)
		for _, f := range fields {
			if !toolhasproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != toolhasproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thpuo.mutation.DeletedAt(); ok {
		_spec.SetField(toolhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if thpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(toolhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if thpuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductsTable,
			Columns: []string{toolhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductsTable,
			Columns: []string{toolhasproduct.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if thpuo.mutation.ToolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolsTable,
			Columns: []string{toolhasproduct.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpuo.mutation.ToolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolsTable,
			Columns: []string{toolhasproduct.ToolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ToolHasProduct{config: thpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toolhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thpuo.mutation.done = true
	return _node, nil
}
