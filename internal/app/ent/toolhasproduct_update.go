// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/toolhasproduct"
	"products-service/internal/app/ent/tools"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ToolHasProductUpdate is the builder for updating ToolHasProduct entities.
type ToolHasProductUpdate struct {
	config
	hooks    []Hook
	mutation *ToolHasProductMutation
}

// Where appends a list predicates to the ToolHasProductUpdate builder.
func (thpu *ToolHasProductUpdate) Where(ps ...predicate.ToolHasProduct) *ToolHasProductUpdate {
	thpu.mutation.Where(ps...)
	return thpu
}

// SetUpdatedAt sets the "updated_at" field.
func (thpu *ToolHasProductUpdate) SetUpdatedAt(t time.Time) *ToolHasProductUpdate {
	thpu.mutation.SetUpdatedAt(t)
	return thpu
}

// SetDeletedAt sets the "deleted_at" field.
func (thpu *ToolHasProductUpdate) SetDeletedAt(t time.Time) *ToolHasProductUpdate {
	thpu.mutation.SetDeletedAt(t)
	return thpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableDeletedAt(t *time.Time) *ToolHasProductUpdate {
	if t != nil {
		thpu.SetDeletedAt(*t)
	}
	return thpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (thpu *ToolHasProductUpdate) ClearDeletedAt() *ToolHasProductUpdate {
	thpu.mutation.ClearDeletedAt()
	return thpu
}

// SetUpdatedBy sets the "updated_by" field.
func (thpu *ToolHasProductUpdate) SetUpdatedBy(i int) *ToolHasProductUpdate {
	thpu.mutation.ResetUpdatedBy()
	thpu.mutation.SetUpdatedBy(i)
	return thpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableUpdatedBy(i *int) *ToolHasProductUpdate {
	if i != nil {
		thpu.SetUpdatedBy(*i)
	}
	return thpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (thpu *ToolHasProductUpdate) AddUpdatedBy(i int) *ToolHasProductUpdate {
	thpu.mutation.AddUpdatedBy(i)
	return thpu
}

// SetDeletedBy sets the "deleted_by" field.
func (thpu *ToolHasProductUpdate) SetDeletedBy(i int) *ToolHasProductUpdate {
	thpu.mutation.ResetDeletedBy()
	thpu.mutation.SetDeletedBy(i)
	return thpu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableDeletedBy(i *int) *ToolHasProductUpdate {
	if i != nil {
		thpu.SetDeletedBy(*i)
	}
	return thpu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (thpu *ToolHasProductUpdate) AddDeletedBy(i int) *ToolHasProductUpdate {
	thpu.mutation.AddDeletedBy(i)
	return thpu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (thpu *ToolHasProductUpdate) ClearDeletedBy() *ToolHasProductUpdate {
	thpu.mutation.ClearDeletedBy()
	return thpu
}

// SetToolID sets the "tool_id" field.
func (thpu *ToolHasProductUpdate) SetToolID(i int) *ToolHasProductUpdate {
	thpu.mutation.ResetToolID()
	thpu.mutation.SetToolID(i)
	return thpu
}

// SetNillableToolID sets the "tool_id" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableToolID(i *int) *ToolHasProductUpdate {
	if i != nil {
		thpu.SetToolID(*i)
	}
	return thpu
}

// AddToolID adds i to the "tool_id" field.
func (thpu *ToolHasProductUpdate) AddToolID(i int) *ToolHasProductUpdate {
	thpu.mutation.AddToolID(i)
	return thpu
}

// SetProductID sets the "product_id" field.
func (thpu *ToolHasProductUpdate) SetProductID(i int) *ToolHasProductUpdate {
	thpu.mutation.ResetProductID()
	thpu.mutation.SetProductID(i)
	return thpu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (thpu *ToolHasProductUpdate) SetNillableProductID(i *int) *ToolHasProductUpdate {
	if i != nil {
		thpu.SetProductID(*i)
	}
	return thpu
}

// AddProductID adds i to the "product_id" field.
func (thpu *ToolHasProductUpdate) AddProductID(i int) *ToolHasProductUpdate {
	thpu.mutation.AddProductID(i)
	return thpu
}

// ClearProductID clears the value of the "product_id" field.
func (thpu *ToolHasProductUpdate) ClearProductID() *ToolHasProductUpdate {
	thpu.mutation.ClearProductID()
	return thpu
}
// SetProduct sets the "product" edge to the Products entity.
func (thpu *ToolHasProductUpdate) SetProduct(p *Products) *ToolHasProductUpdate {
	return thpu.SetProductID(p.ID)
}

// SetTool sets the "tool" edge to the Tools entity.
func (thpu *ToolHasProductUpdate) SetTool(t *Tools) *ToolHasProductUpdate {
	return thpu.SetToolID(t.ID)
}

// Mutation returns the ToolHasProductMutation object of the builder.
func (thpu *ToolHasProductUpdate) Mutation() *ToolHasProductMutation {
	return thpu.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (thpu *ToolHasProductUpdate) ClearProduct() *ToolHasProductUpdate {
	thpu.mutation.ClearProduct()
	return thpu
}

// ClearTool clears the "tool" edge to the Tools entity.
func (thpu *ToolHasProductUpdate) ClearTool() *ToolHasProductUpdate {
	thpu.mutation.ClearTool()
	return thpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thpu *ToolHasProductUpdate) Save(ctx context.Context) (int, error) {
	thpu.defaults()
	return withHooks(ctx, thpu.sqlSave, thpu.mutation, thpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thpu *ToolHasProductUpdate) SaveX(ctx context.Context) int {
	affected, err := thpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thpu *ToolHasProductUpdate) Exec(ctx context.Context) error {
	_, err := thpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thpu *ToolHasProductUpdate) ExecX(ctx context.Context) {
	if err := thpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thpu *ToolHasProductUpdate) defaults() {
	if _, ok := thpu.mutation.UpdatedAt(); !ok {
		v := toolhasproduct.UpdateDefaultUpdatedAt()
		thpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thpu *ToolHasProductUpdate) check() error {
	if v, ok := thpu.mutation.UpdatedBy(); ok {
		if err := toolhasproduct.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ToolHasProduct.updated_by": %w`, err)}
		}
	}
	if thpu.mutation.ProductCleared() && len(thpu.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolHasProduct.product"`)
	}
	if thpu.mutation.ToolCleared() && len(thpu.mutation.ToolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolHasProduct.tool"`)
	}
	return nil
}

func (thpu *ToolHasProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := thpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(toolhasproduct.Table, toolhasproduct.Columns, sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt))
	if ps := thpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thpu.mutation.UpdatedAt(); ok {
		_spec.SetField(toolhasproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := thpu.mutation.DeletedAt(); ok {
		_spec.SetField(toolhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if thpu.mutation.DeletedAtCleared() {
		_spec.ClearField(toolhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := thpu.mutation.UpdatedBy(); ok {
		_spec.SetField(toolhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := thpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(toolhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := thpu.mutation.DeletedBy(); ok {
		_spec.SetField(toolhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := thpu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(toolhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if thpu.mutation.DeletedByCleared() {
		_spec.ClearField(toolhasproduct.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := thpu.mutation.ToolID(); ok {
		_spec.SetField(toolhasproduct.FieldToolID, field.TypeInt, value)
	}
	if value, ok := thpu.mutation.AddedToolID(); ok {
		_spec.AddField(toolhasproduct.FieldToolID, field.TypeInt, value)
	}
	if value, ok := thpu.mutation.ProductID(); ok {
		_spec.SetField(toolhasproduct.FieldProductID, field.TypeInt, value)
	}
	if value, ok := thpu.mutation.AddedProductID(); ok {
		_spec.AddField(toolhasproduct.FieldProductID, field.TypeInt, value)
	}
	if thpu.mutation.ProductIDCleared() {
		_spec.ClearField(toolhasproduct.FieldProductID, field.TypeInt)
	}
	if thpu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductTable,
			Columns: []string{toolhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductTable,
			Columns: []string{toolhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if thpu.mutation.ToolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolTable,
			Columns: []string{toolhasproduct.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpu.mutation.ToolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolTable,
			Columns: []string{toolhasproduct.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toolhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thpu.mutation.done = true
	return n, nil
}

// ToolHasProductUpdateOne is the builder for updating a single ToolHasProduct entity.
type ToolHasProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToolHasProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (thpuo *ToolHasProductUpdateOne) SetUpdatedAt(t time.Time) *ToolHasProductUpdateOne {
	thpuo.mutation.SetUpdatedAt(t)
	return thpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (thpuo *ToolHasProductUpdateOne) SetDeletedAt(t time.Time) *ToolHasProductUpdateOne {
	thpuo.mutation.SetDeletedAt(t)
	return thpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableDeletedAt(t *time.Time) *ToolHasProductUpdateOne {
	if t != nil {
		thpuo.SetDeletedAt(*t)
	}
	return thpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (thpuo *ToolHasProductUpdateOne) ClearDeletedAt() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearDeletedAt()
	return thpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (thpuo *ToolHasProductUpdateOne) SetUpdatedBy(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.ResetUpdatedBy()
	thpuo.mutation.SetUpdatedBy(i)
	return thpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableUpdatedBy(i *int) *ToolHasProductUpdateOne {
	if i != nil {
		thpuo.SetUpdatedBy(*i)
	}
	return thpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (thpuo *ToolHasProductUpdateOne) AddUpdatedBy(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.AddUpdatedBy(i)
	return thpuo
}

// SetDeletedBy sets the "deleted_by" field.
func (thpuo *ToolHasProductUpdateOne) SetDeletedBy(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.ResetDeletedBy()
	thpuo.mutation.SetDeletedBy(i)
	return thpuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableDeletedBy(i *int) *ToolHasProductUpdateOne {
	if i != nil {
		thpuo.SetDeletedBy(*i)
	}
	return thpuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (thpuo *ToolHasProductUpdateOne) AddDeletedBy(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.AddDeletedBy(i)
	return thpuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (thpuo *ToolHasProductUpdateOne) ClearDeletedBy() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearDeletedBy()
	return thpuo
}

// SetToolID sets the "tool_id" field.
func (thpuo *ToolHasProductUpdateOne) SetToolID(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.ResetToolID()
	thpuo.mutation.SetToolID(i)
	return thpuo
}

// SetNillableToolID sets the "tool_id" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableToolID(i *int) *ToolHasProductUpdateOne {
	if i != nil {
		thpuo.SetToolID(*i)
	}
	return thpuo
}

// AddToolID adds i to the "tool_id" field.
func (thpuo *ToolHasProductUpdateOne) AddToolID(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.AddToolID(i)
	return thpuo
}

// SetProductID sets the "product_id" field.
func (thpuo *ToolHasProductUpdateOne) SetProductID(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.ResetProductID()
	thpuo.mutation.SetProductID(i)
	return thpuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (thpuo *ToolHasProductUpdateOne) SetNillableProductID(i *int) *ToolHasProductUpdateOne {
	if i != nil {
		thpuo.SetProductID(*i)
	}
	return thpuo
}

// AddProductID adds i to the "product_id" field.
func (thpuo *ToolHasProductUpdateOne) AddProductID(i int) *ToolHasProductUpdateOne {
	thpuo.mutation.AddProductID(i)
	return thpuo
}

// ClearProductID clears the value of the "product_id" field.
func (thpuo *ToolHasProductUpdateOne) ClearProductID() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearProductID()
	return thpuo
}

// SetProduct sets the "product" edge to the Products entity.
func (thpuo *ToolHasProductUpdateOne) SetProduct(p *Products) *ToolHasProductUpdateOne {
	return thpuo.SetProductID(p.ID)
}

// SetTool sets the "tool" edge to the Tools entity.
func (thpuo *ToolHasProductUpdateOne) SetTool(t *Tools) *ToolHasProductUpdateOne {
	return thpuo.SetToolID(t.ID)
}

// Mutation returns the ToolHasProductMutation object of the builder.
func (thpuo *ToolHasProductUpdateOne) Mutation() *ToolHasProductMutation {
	return thpuo.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (thpuo *ToolHasProductUpdateOne) ClearProduct() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearProduct()
	return thpuo
}

// ClearTool clears the "tool" edge to the Tools entity.
func (thpuo *ToolHasProductUpdateOne) ClearTool() *ToolHasProductUpdateOne {
	thpuo.mutation.ClearTool()
	return thpuo
}

// Where appends a list predicates to the ToolHasProductUpdate builder.
func (thpuo *ToolHasProductUpdateOne) Where(ps ...predicate.ToolHasProduct) *ToolHasProductUpdateOne {
	thpuo.mutation.Where(ps...)
	return thpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thpuo *ToolHasProductUpdateOne) Select(field string, fields ...string) *ToolHasProductUpdateOne {
	thpuo.fields = append([]string{field}, fields...)
	return thpuo
}

// Save executes the query and returns the updated ToolHasProduct entity.
func (thpuo *ToolHasProductUpdateOne) Save(ctx context.Context) (*ToolHasProduct, error) {
	thpuo.defaults()
	return withHooks(ctx, thpuo.sqlSave, thpuo.mutation, thpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thpuo *ToolHasProductUpdateOne) SaveX(ctx context.Context) *ToolHasProduct {
	node, err := thpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thpuo *ToolHasProductUpdateOne) Exec(ctx context.Context) error {
	_, err := thpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thpuo *ToolHasProductUpdateOne) ExecX(ctx context.Context) {
	if err := thpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thpuo *ToolHasProductUpdateOne) defaults() {
	if _, ok := thpuo.mutation.UpdatedAt(); !ok {
		v := toolhasproduct.UpdateDefaultUpdatedAt()
		thpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thpuo *ToolHasProductUpdateOne) check() error {
	if v, ok := thpuo.mutation.UpdatedBy(); ok {
		if err := toolhasproduct.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ToolHasProduct.updated_by": %w`, err)}
		}
	}
	if thpuo.mutation.ProductCleared() && len(thpuo.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolHasProduct.product"`)
	}
	if thpuo.mutation.ToolCleared() && len(thpuo.mutation.ToolIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolHasProduct.tool"`)
	}
	return nil
}

func (thpuo *ToolHasProductUpdateOne) sqlSave(ctx context.Context) (_node *ToolHasProduct, err error) {
	if err := thpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(toolhasproduct.Table, toolhasproduct.Columns, sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt))
	id, ok := thpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ToolHasProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, toolhasproduct.FieldID)
		for _, f := range fields {
			if !toolhasproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != toolhasproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(toolhasproduct.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := thpuo.mutation.DeletedAt(); ok {
		_spec.SetField(toolhasproduct.FieldDeletedAt, field.TypeTime, value)
	}
	if thpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(toolhasproduct.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := thpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(toolhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := thpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(toolhasproduct.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := thpuo.mutation.DeletedBy(); ok {
		_spec.SetField(toolhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := thpuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(toolhasproduct.FieldDeletedBy, field.TypeInt, value)
	}
	if thpuo.mutation.DeletedByCleared() {
		_spec.ClearField(toolhasproduct.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := thpuo.mutation.ToolID(); ok {
		_spec.SetField(toolhasproduct.FieldToolID, field.TypeInt, value)
	}
	if value, ok := thpuo.mutation.AddedToolID(); ok {
		_spec.AddField(toolhasproduct.FieldToolID, field.TypeInt, value)
	}
	if value, ok := thpuo.mutation.ProductID(); ok {
		_spec.SetField(toolhasproduct.FieldProductID, field.TypeInt, value)
	}
	if value, ok := thpuo.mutation.AddedProductID(); ok {
		_spec.AddField(toolhasproduct.FieldProductID, field.TypeInt, value)
	}
	if thpuo.mutation.ProductIDCleared() {
		_spec.ClearField(toolhasproduct.FieldProductID, field.TypeInt)
	}
	if thpuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductTable,
			Columns: []string{toolhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ProductTable,
			Columns: []string{toolhasproduct.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if thpuo.mutation.ToolCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolTable,
			Columns: []string{toolhasproduct.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thpuo.mutation.ToolIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolhasproduct.ToolTable,
			Columns: []string{toolhasproduct.ToolColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ToolHasProduct{config: thpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toolhasproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thpuo.mutation.done = true
	return _node, nil
}
