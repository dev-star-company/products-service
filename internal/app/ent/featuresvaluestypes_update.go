// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/featuresvaluestypes"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/productinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesValuesTypesUpdate is the builder for updating FeaturesValuesTypes entities.
type FeaturesValuesTypesUpdate struct {
	config
	hooks    []Hook
	mutation *FeaturesValuesTypesMutation
}

// Where appends a list predicates to the FeaturesValuesTypesUpdate builder.
func (fvtu *FeaturesValuesTypesUpdate) Where(ps ...predicate.FeaturesValuesTypes) *FeaturesValuesTypesUpdate {
	fvtu.mutation.Where(ps...)
	return fvtu
}

// SetUpdatedAt sets the "updated_at" field.
func (fvtu *FeaturesValuesTypesUpdate) SetUpdatedAt(t time.Time) *FeaturesValuesTypesUpdate {
	fvtu.mutation.SetUpdatedAt(t)
	return fvtu
}

// SetDeletedAt sets the "deleted_at" field.
func (fvtu *FeaturesValuesTypesUpdate) SetDeletedAt(t time.Time) *FeaturesValuesTypesUpdate {
	fvtu.mutation.SetDeletedAt(t)
	return fvtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fvtu *FeaturesValuesTypesUpdate) SetNillableDeletedAt(t *time.Time) *FeaturesValuesTypesUpdate {
	if t != nil {
		fvtu.SetDeletedAt(*t)
	}
	return fvtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fvtu *FeaturesValuesTypesUpdate) ClearDeletedAt() *FeaturesValuesTypesUpdate {
	fvtu.mutation.ClearDeletedAt()
	return fvtu
}

// SetUpdatedBy sets the "updated_by" field.
func (fvtu *FeaturesValuesTypesUpdate) SetUpdatedBy(i int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.ResetUpdatedBy()
	fvtu.mutation.SetUpdatedBy(i)
	return fvtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fvtu *FeaturesValuesTypesUpdate) SetNillableUpdatedBy(i *int) *FeaturesValuesTypesUpdate {
	if i != nil {
		fvtu.SetUpdatedBy(*i)
	}
	return fvtu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fvtu *FeaturesValuesTypesUpdate) AddUpdatedBy(i int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.AddUpdatedBy(i)
	return fvtu
}

// SetDeletedBy sets the "deleted_by" field.
func (fvtu *FeaturesValuesTypesUpdate) SetDeletedBy(i int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.ResetDeletedBy()
	fvtu.mutation.SetDeletedBy(i)
	return fvtu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fvtu *FeaturesValuesTypesUpdate) SetNillableDeletedBy(i *int) *FeaturesValuesTypesUpdate {
	if i != nil {
		fvtu.SetDeletedBy(*i)
	}
	return fvtu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (fvtu *FeaturesValuesTypesUpdate) AddDeletedBy(i int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.AddDeletedBy(i)
	return fvtu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fvtu *FeaturesValuesTypesUpdate) ClearDeletedBy() *FeaturesValuesTypesUpdate {
	fvtu.mutation.ClearDeletedBy()
	return fvtu
}

// SetName sets the "name" field.
func (fvtu *FeaturesValuesTypesUpdate) SetName(s string) *FeaturesValuesTypesUpdate {
	fvtu.mutation.SetName(s)
	return fvtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fvtu *FeaturesValuesTypesUpdate) SetNillableName(s *string) *FeaturesValuesTypesUpdate {
	if s != nil {
		fvtu.SetName(*s)
	}
	return fvtu
}

// AddProductInfoIDs adds the "product_info" edge to the ProductInfo entity by IDs.
func (fvtu *FeaturesValuesTypesUpdate) AddProductInfoIDs(ids ...int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.AddProductInfoIDs(ids...)
	return fvtu
}

// AddProductInfo adds the "product_info" edges to the ProductInfo entity.
func (fvtu *FeaturesValuesTypesUpdate) AddProductInfo(p ...*ProductInfo) *FeaturesValuesTypesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fvtu.AddProductInfoIDs(ids...)
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fvtu *FeaturesValuesTypesUpdate) AddFeatureValueIDs(ids ...int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.AddFeatureValueIDs(ids...)
	return fvtu
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fvtu *FeaturesValuesTypesUpdate) AddFeatureValues(f ...*FeaturesValues) *FeaturesValuesTypesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fvtu.AddFeatureValueIDs(ids...)
}

// Mutation returns the FeaturesValuesTypesMutation object of the builder.
func (fvtu *FeaturesValuesTypesUpdate) Mutation() *FeaturesValuesTypesMutation {
	return fvtu.mutation
}

// ClearProductInfo clears all "product_info" edges to the ProductInfo entity.
func (fvtu *FeaturesValuesTypesUpdate) ClearProductInfo() *FeaturesValuesTypesUpdate {
	fvtu.mutation.ClearProductInfo()
	return fvtu
}

// RemoveProductInfoIDs removes the "product_info" edge to ProductInfo entities by IDs.
func (fvtu *FeaturesValuesTypesUpdate) RemoveProductInfoIDs(ids ...int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.RemoveProductInfoIDs(ids...)
	return fvtu
}

// RemoveProductInfo removes "product_info" edges to ProductInfo entities.
func (fvtu *FeaturesValuesTypesUpdate) RemoveProductInfo(p ...*ProductInfo) *FeaturesValuesTypesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fvtu.RemoveProductInfoIDs(ids...)
}

// ClearFeatureValues clears all "feature_values" edges to the FeaturesValues entity.
func (fvtu *FeaturesValuesTypesUpdate) ClearFeatureValues() *FeaturesValuesTypesUpdate {
	fvtu.mutation.ClearFeatureValues()
	return fvtu
}

// RemoveFeatureValueIDs removes the "feature_values" edge to FeaturesValues entities by IDs.
func (fvtu *FeaturesValuesTypesUpdate) RemoveFeatureValueIDs(ids ...int) *FeaturesValuesTypesUpdate {
	fvtu.mutation.RemoveFeatureValueIDs(ids...)
	return fvtu
}

// RemoveFeatureValues removes "feature_values" edges to FeaturesValues entities.
func (fvtu *FeaturesValuesTypesUpdate) RemoveFeatureValues(f ...*FeaturesValues) *FeaturesValuesTypesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fvtu.RemoveFeatureValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fvtu *FeaturesValuesTypesUpdate) Save(ctx context.Context) (int, error) {
	fvtu.defaults()
	return withHooks(ctx, fvtu.sqlSave, fvtu.mutation, fvtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fvtu *FeaturesValuesTypesUpdate) SaveX(ctx context.Context) int {
	affected, err := fvtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fvtu *FeaturesValuesTypesUpdate) Exec(ctx context.Context) error {
	_, err := fvtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvtu *FeaturesValuesTypesUpdate) ExecX(ctx context.Context) {
	if err := fvtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fvtu *FeaturesValuesTypesUpdate) defaults() {
	if _, ok := fvtu.mutation.UpdatedAt(); !ok {
		v := featuresvaluestypes.UpdateDefaultUpdatedAt()
		fvtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvtu *FeaturesValuesTypesUpdate) check() error {
	if v, ok := fvtu.mutation.UpdatedBy(); ok {
		if err := featuresvaluestypes.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "FeaturesValuesTypes.updated_by": %w`, err)}
		}
	}
	return nil
}

func (fvtu *FeaturesValuesTypesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fvtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(featuresvaluestypes.Table, featuresvaluestypes.Columns, sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt))
	if ps := fvtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fvtu.mutation.UpdatedAt(); ok {
		_spec.SetField(featuresvaluestypes.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fvtu.mutation.DeletedAt(); ok {
		_spec.SetField(featuresvaluestypes.FieldDeletedAt, field.TypeTime, value)
	}
	if fvtu.mutation.DeletedAtCleared() {
		_spec.ClearField(featuresvaluestypes.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fvtu.mutation.UpdatedBy(); ok {
		_spec.SetField(featuresvaluestypes.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fvtu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(featuresvaluestypes.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fvtu.mutation.DeletedBy(); ok {
		_spec.SetField(featuresvaluestypes.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := fvtu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(featuresvaluestypes.FieldDeletedBy, field.TypeInt, value)
	}
	if fvtu.mutation.DeletedByCleared() {
		_spec.ClearField(featuresvaluestypes.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := fvtu.mutation.Name(); ok {
		_spec.SetField(featuresvaluestypes.FieldName, field.TypeString, value)
	}
	if fvtu.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.ProductInfoTable,
			Columns: []string{featuresvaluestypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtu.mutation.RemovedProductInfoIDs(); len(nodes) > 0 && !fvtu.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.ProductInfoTable,
			Columns: []string{featuresvaluestypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtu.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.ProductInfoTable,
			Columns: []string{featuresvaluestypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvtu.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.FeatureValuesTable,
			Columns: []string{featuresvaluestypes.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtu.mutation.RemovedFeatureValuesIDs(); len(nodes) > 0 && !fvtu.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.FeatureValuesTable,
			Columns: []string{featuresvaluestypes.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtu.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.FeatureValuesTable,
			Columns: []string{featuresvaluestypes.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fvtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuresvaluestypes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fvtu.mutation.done = true
	return n, nil
}

// FeaturesValuesTypesUpdateOne is the builder for updating a single FeaturesValuesTypes entity.
type FeaturesValuesTypesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeaturesValuesTypesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetUpdatedAt(t time.Time) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.SetUpdatedAt(t)
	return fvtuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetDeletedAt(t time.Time) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.SetDeletedAt(t)
	return fvtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetNillableDeletedAt(t *time.Time) *FeaturesValuesTypesUpdateOne {
	if t != nil {
		fvtuo.SetDeletedAt(*t)
	}
	return fvtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) ClearDeletedAt() *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.ClearDeletedAt()
	return fvtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetUpdatedBy(i int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.ResetUpdatedBy()
	fvtuo.mutation.SetUpdatedBy(i)
	return fvtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetNillableUpdatedBy(i *int) *FeaturesValuesTypesUpdateOne {
	if i != nil {
		fvtuo.SetUpdatedBy(*i)
	}
	return fvtuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) AddUpdatedBy(i int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.AddUpdatedBy(i)
	return fvtuo
}

// SetDeletedBy sets the "deleted_by" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetDeletedBy(i int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.ResetDeletedBy()
	fvtuo.mutation.SetDeletedBy(i)
	return fvtuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetNillableDeletedBy(i *int) *FeaturesValuesTypesUpdateOne {
	if i != nil {
		fvtuo.SetDeletedBy(*i)
	}
	return fvtuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) AddDeletedBy(i int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.AddDeletedBy(i)
	return fvtuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) ClearDeletedBy() *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.ClearDeletedBy()
	return fvtuo
}

// SetName sets the "name" field.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetName(s string) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.SetName(s)
	return fvtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fvtuo *FeaturesValuesTypesUpdateOne) SetNillableName(s *string) *FeaturesValuesTypesUpdateOne {
	if s != nil {
		fvtuo.SetName(*s)
	}
	return fvtuo
}

// AddProductInfoIDs adds the "product_info" edge to the ProductInfo entity by IDs.
func (fvtuo *FeaturesValuesTypesUpdateOne) AddProductInfoIDs(ids ...int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.AddProductInfoIDs(ids...)
	return fvtuo
}

// AddProductInfo adds the "product_info" edges to the ProductInfo entity.
func (fvtuo *FeaturesValuesTypesUpdateOne) AddProductInfo(p ...*ProductInfo) *FeaturesValuesTypesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fvtuo.AddProductInfoIDs(ids...)
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fvtuo *FeaturesValuesTypesUpdateOne) AddFeatureValueIDs(ids ...int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.AddFeatureValueIDs(ids...)
	return fvtuo
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fvtuo *FeaturesValuesTypesUpdateOne) AddFeatureValues(f ...*FeaturesValues) *FeaturesValuesTypesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fvtuo.AddFeatureValueIDs(ids...)
}

// Mutation returns the FeaturesValuesTypesMutation object of the builder.
func (fvtuo *FeaturesValuesTypesUpdateOne) Mutation() *FeaturesValuesTypesMutation {
	return fvtuo.mutation
}

// ClearProductInfo clears all "product_info" edges to the ProductInfo entity.
func (fvtuo *FeaturesValuesTypesUpdateOne) ClearProductInfo() *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.ClearProductInfo()
	return fvtuo
}

// RemoveProductInfoIDs removes the "product_info" edge to ProductInfo entities by IDs.
func (fvtuo *FeaturesValuesTypesUpdateOne) RemoveProductInfoIDs(ids ...int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.RemoveProductInfoIDs(ids...)
	return fvtuo
}

// RemoveProductInfo removes "product_info" edges to ProductInfo entities.
func (fvtuo *FeaturesValuesTypesUpdateOne) RemoveProductInfo(p ...*ProductInfo) *FeaturesValuesTypesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fvtuo.RemoveProductInfoIDs(ids...)
}

// ClearFeatureValues clears all "feature_values" edges to the FeaturesValues entity.
func (fvtuo *FeaturesValuesTypesUpdateOne) ClearFeatureValues() *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.ClearFeatureValues()
	return fvtuo
}

// RemoveFeatureValueIDs removes the "feature_values" edge to FeaturesValues entities by IDs.
func (fvtuo *FeaturesValuesTypesUpdateOne) RemoveFeatureValueIDs(ids ...int) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.RemoveFeatureValueIDs(ids...)
	return fvtuo
}

// RemoveFeatureValues removes "feature_values" edges to FeaturesValues entities.
func (fvtuo *FeaturesValuesTypesUpdateOne) RemoveFeatureValues(f ...*FeaturesValues) *FeaturesValuesTypesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fvtuo.RemoveFeatureValueIDs(ids...)
}

// Where appends a list predicates to the FeaturesValuesTypesUpdate builder.
func (fvtuo *FeaturesValuesTypesUpdateOne) Where(ps ...predicate.FeaturesValuesTypes) *FeaturesValuesTypesUpdateOne {
	fvtuo.mutation.Where(ps...)
	return fvtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fvtuo *FeaturesValuesTypesUpdateOne) Select(field string, fields ...string) *FeaturesValuesTypesUpdateOne {
	fvtuo.fields = append([]string{field}, fields...)
	return fvtuo
}

// Save executes the query and returns the updated FeaturesValuesTypes entity.
func (fvtuo *FeaturesValuesTypesUpdateOne) Save(ctx context.Context) (*FeaturesValuesTypes, error) {
	fvtuo.defaults()
	return withHooks(ctx, fvtuo.sqlSave, fvtuo.mutation, fvtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fvtuo *FeaturesValuesTypesUpdateOne) SaveX(ctx context.Context) *FeaturesValuesTypes {
	node, err := fvtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fvtuo *FeaturesValuesTypesUpdateOne) Exec(ctx context.Context) error {
	_, err := fvtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvtuo *FeaturesValuesTypesUpdateOne) ExecX(ctx context.Context) {
	if err := fvtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fvtuo *FeaturesValuesTypesUpdateOne) defaults() {
	if _, ok := fvtuo.mutation.UpdatedAt(); !ok {
		v := featuresvaluestypes.UpdateDefaultUpdatedAt()
		fvtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvtuo *FeaturesValuesTypesUpdateOne) check() error {
	if v, ok := fvtuo.mutation.UpdatedBy(); ok {
		if err := featuresvaluestypes.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "FeaturesValuesTypes.updated_by": %w`, err)}
		}
	}
	return nil
}

func (fvtuo *FeaturesValuesTypesUpdateOne) sqlSave(ctx context.Context) (_node *FeaturesValuesTypes, err error) {
	if err := fvtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(featuresvaluestypes.Table, featuresvaluestypes.Columns, sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt))
	id, ok := fvtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FeaturesValuesTypes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fvtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featuresvaluestypes.FieldID)
		for _, f := range fields {
			if !featuresvaluestypes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != featuresvaluestypes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fvtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fvtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(featuresvaluestypes.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fvtuo.mutation.DeletedAt(); ok {
		_spec.SetField(featuresvaluestypes.FieldDeletedAt, field.TypeTime, value)
	}
	if fvtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(featuresvaluestypes.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fvtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(featuresvaluestypes.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fvtuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(featuresvaluestypes.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fvtuo.mutation.DeletedBy(); ok {
		_spec.SetField(featuresvaluestypes.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := fvtuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(featuresvaluestypes.FieldDeletedBy, field.TypeInt, value)
	}
	if fvtuo.mutation.DeletedByCleared() {
		_spec.ClearField(featuresvaluestypes.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := fvtuo.mutation.Name(); ok {
		_spec.SetField(featuresvaluestypes.FieldName, field.TypeString, value)
	}
	if fvtuo.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.ProductInfoTable,
			Columns: []string{featuresvaluestypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtuo.mutation.RemovedProductInfoIDs(); len(nodes) > 0 && !fvtuo.mutation.ProductInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.ProductInfoTable,
			Columns: []string{featuresvaluestypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtuo.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.ProductInfoTable,
			Columns: []string{featuresvaluestypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvtuo.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.FeatureValuesTable,
			Columns: []string{featuresvaluestypes.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtuo.mutation.RemovedFeatureValuesIDs(); len(nodes) > 0 && !fvtuo.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.FeatureValuesTable,
			Columns: []string{featuresvaluestypes.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvtuo.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.FeatureValuesTable,
			Columns: []string{featuresvaluestypes.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FeaturesValuesTypes{config: fvtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fvtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featuresvaluestypes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fvtuo.mutation.done = true
	return _node, nil
}
