// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/toolhasproduct"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ToolHasProductDelete is the builder for deleting a ToolHasProduct entity.
type ToolHasProductDelete struct {
	config
	hooks    []Hook
	mutation *ToolHasProductMutation
}

// Where appends a list predicates to the ToolHasProductDelete builder.
func (thpd *ToolHasProductDelete) Where(ps ...predicate.ToolHasProduct) *ToolHasProductDelete {
	thpd.mutation.Where(ps...)
	return thpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (thpd *ToolHasProductDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, thpd.sqlExec, thpd.mutation, thpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (thpd *ToolHasProductDelete) ExecX(ctx context.Context) int {
	n, err := thpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (thpd *ToolHasProductDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(toolhasproduct.Table, sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt))
	if ps := thpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, thpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	thpd.mutation.done = true
	return affected, err
}

// ToolHasProductDeleteOne is the builder for deleting a single ToolHasProduct entity.
type ToolHasProductDeleteOne struct {
	thpd *ToolHasProductDelete
}

// Where appends a list predicates to the ToolHasProductDelete builder.
func (thpdo *ToolHasProductDeleteOne) Where(ps ...predicate.ToolHasProduct) *ToolHasProductDeleteOne {
	thpdo.thpd.mutation.Where(ps...)
	return thpdo
}

// Exec executes the deletion query.
func (thpdo *ToolHasProductDeleteOne) Exec(ctx context.Context) error {
	n, err := thpdo.thpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{toolhasproduct.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (thpdo *ToolHasProductDeleteOne) ExecX(ctx context.Context) {
	if err := thpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
