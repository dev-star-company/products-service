// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PromotionHasProduct is the model entity for the PromotionHasProduct schema.
type PromotionHasProduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// ProductsID holds the value of the "products_id" field.
	ProductsID *int `json:"products_id,omitempty"`
	// PromotionsID holds the value of the "promotions_id" field.
	PromotionsID *int `json:"promotions_id,omitempty"`
	// PromocionalPrice holds the value of the "promocional_price" field.
	PromocionalPrice *float64 `json:"promocional_price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionHasProductQuery when eager-loading is set.
	Edges        PromotionHasProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionHasProductEdges holds the relations/edges for other nodes in the graph.
type PromotionHasProductEdges struct {
	// Products holds the value of the products edge.
	Products *Products `json:"products,omitempty"`
	// Promotions holds the value of the promotions edge.
	Promotions *Promotions `json:"promotions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionHasProductEdges) ProductsOrErr() (*Products, error) {
	if e.Products != nil {
		return e.Products, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: products.Label}
	}
	return nil, &NotLoadedError{edge: "products"}
}

// PromotionsOrErr returns the Promotions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionHasProductEdges) PromotionsOrErr() (*Promotions, error) {
	if e.Promotions != nil {
		return e.Promotions, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: promotions.Label}
	}
	return nil, &NotLoadedError{edge: "promotions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionHasProduct) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionhasproduct.FieldPromocionalPrice:
			values[i] = new(sql.NullFloat64)
		case promotionhasproduct.FieldID, promotionhasproduct.FieldProductsID, promotionhasproduct.FieldPromotionsID:
			values[i] = new(sql.NullInt64)
		case promotionhasproduct.FieldCreatedAt, promotionhasproduct.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionHasProduct fields.
func (php *PromotionHasProduct) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionhasproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			php.ID = int(value.Int64)
		case promotionhasproduct.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				php.CreatedAt = value.Time
			}
		case promotionhasproduct.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				php.DeletedAt = new(time.Time)
				*php.DeletedAt = value.Time
			}
		case promotionhasproduct.FieldProductsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field products_id", values[i])
			} else if value.Valid {
				php.ProductsID = new(int)
				*php.ProductsID = int(value.Int64)
			}
		case promotionhasproduct.FieldPromotionsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field promotions_id", values[i])
			} else if value.Valid {
				php.PromotionsID = new(int)
				*php.PromotionsID = int(value.Int64)
			}
		case promotionhasproduct.FieldPromocionalPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field promocional_price", values[i])
			} else if value.Valid {
				php.PromocionalPrice = new(float64)
				*php.PromocionalPrice = value.Float64
			}
		default:
			php.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionHasProduct.
// This includes values selected through modifiers, order, etc.
func (php *PromotionHasProduct) Value(name string) (ent.Value, error) {
	return php.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the PromotionHasProduct entity.
func (php *PromotionHasProduct) QueryProducts() *ProductsQuery {
	return NewPromotionHasProductClient(php.config).QueryProducts(php)
}

// QueryPromotions queries the "promotions" edge of the PromotionHasProduct entity.
func (php *PromotionHasProduct) QueryPromotions() *PromotionsQuery {
	return NewPromotionHasProductClient(php.config).QueryPromotions(php)
}

// Update returns a builder for updating this PromotionHasProduct.
// Note that you need to call PromotionHasProduct.Unwrap() before calling this method if this PromotionHasProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (php *PromotionHasProduct) Update() *PromotionHasProductUpdateOne {
	return NewPromotionHasProductClient(php.config).UpdateOne(php)
}

// Unwrap unwraps the PromotionHasProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (php *PromotionHasProduct) Unwrap() *PromotionHasProduct {
	_tx, ok := php.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionHasProduct is not a transactional entity")
	}
	php.config.driver = _tx.drv
	return php
}

// String implements the fmt.Stringer.
func (php *PromotionHasProduct) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionHasProduct(")
	builder.WriteString(fmt.Sprintf("id=%v, ", php.ID))
	builder.WriteString("created_at=")
	builder.WriteString(php.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := php.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := php.ProductsID; v != nil {
		builder.WriteString("products_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := php.PromotionsID; v != nil {
		builder.WriteString("promotions_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := php.PromocionalPrice; v != nil {
		builder.WriteString("promocional_price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PromotionHasProducts is a parsable slice of PromotionHasProduct.
type PromotionHasProducts []*PromotionHasProduct
