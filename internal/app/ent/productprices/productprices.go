// Code generated by ent, DO NOT EDIT.

package productprices

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productprices type in the database.
	Label = "product_prices"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldPriceTypeID holds the string denoting the price_type_id field in the database.
	FieldPriceTypeID = "price_type_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldDefaultValue holds the string denoting the default_value field in the database.
	FieldDefaultValue = "default_value"
	// FieldMinValue holds the string denoting the min_value field in the database.
	FieldMinValue = "min_value"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgePriceType holds the string denoting the price_type edge name in mutations.
	EdgePriceType = "price_type"
	// Table holds the table name of the productprices in the database.
	Table = "product_prices"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "product_prices"
	// ProductInverseTable is the table name for the Products entity.
	// It exists in this package in order to avoid circular dependency with the "products" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_id"
	// PriceTypeTable is the table that holds the price_type relation/edge.
	PriceTypeTable = "product_prices"
	// PriceTypeInverseTable is the table name for the PriceType entity.
	// It exists in this package in order to avoid circular dependency with the "pricetype" package.
	PriceTypeInverseTable = "price_types"
	// PriceTypeColumn is the table column denoting the price_type relation/edge.
	PriceTypeColumn = "price_type_id"
)

// Columns holds all SQL columns for productprices fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldPriceTypeID,
	FieldProductID,
	FieldDefaultValue,
	FieldMinValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProductPrices queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByPriceTypeID orders the results by the price_type_id field.
func ByPriceTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceTypeID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByDefaultValue orders the results by the default_value field.
func ByDefaultValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultValue, opts...).ToFunc()
}

// ByMinValue orders the results by the min_value field.
func ByMinValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinValue, opts...).ToFunc()
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}

// ByPriceTypeField orders the results by price_type field.
func ByPriceTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPriceTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
	)
}
func newPriceTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PriceTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PriceTypeTable, PriceTypeColumn),
	)
}
