// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasproductreference"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/referencesources"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductReferencesQuery is the builder for querying ProductReferences entities.
type ProductReferencesQuery struct {
	config
	ctx                            *QueryContext
	order                          []productreferences.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.ProductReferences
	withProduct                    *ProductsQuery
	withReferenceSources           *ReferenceSourcesQuery
	withProductHasProductReference *ProductHasProductReferenceQuery
	withFKs                        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductReferencesQuery builder.
func (prq *ProductReferencesQuery) Where(ps ...predicate.ProductReferences) *ProductReferencesQuery {
	prq.predicates = append(prq.predicates, ps...)
	return prq
}

// Limit the number of records to be returned by this query.
func (prq *ProductReferencesQuery) Limit(limit int) *ProductReferencesQuery {
	prq.ctx.Limit = &limit
	return prq
}

// Offset to start from.
func (prq *ProductReferencesQuery) Offset(offset int) *ProductReferencesQuery {
	prq.ctx.Offset = &offset
	return prq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (prq *ProductReferencesQuery) Unique(unique bool) *ProductReferencesQuery {
	prq.ctx.Unique = &unique
	return prq
}

// Order specifies how the records should be ordered.
func (prq *ProductReferencesQuery) Order(o ...productreferences.OrderOption) *ProductReferencesQuery {
	prq.order = append(prq.order, o...)
	return prq
}

// QueryProduct chains the current query on the "product" edge.
func (prq *ProductReferencesQuery) QueryProduct() *ProductsQuery {
	query := (&ProductsClient{config: prq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productreferences.Table, productreferences.FieldID, selector),
			sqlgraph.To(products.Table, products.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productreferences.ProductTable, productreferences.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReferenceSources chains the current query on the "reference_sources" edge.
func (prq *ProductReferencesQuery) QueryReferenceSources() *ReferenceSourcesQuery {
	query := (&ReferenceSourcesClient{config: prq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productreferences.Table, productreferences.FieldID, selector),
			sqlgraph.To(referencesources.Table, referencesources.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productreferences.ReferenceSourcesTable, productreferences.ReferenceSourcesColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductHasProductReference chains the current query on the "product_has_product_reference" edge.
func (prq *ProductReferencesQuery) QueryProductHasProductReference() *ProductHasProductReferenceQuery {
	query := (&ProductHasProductReferenceClient{config: prq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productreferences.Table, productreferences.FieldID, selector),
			sqlgraph.To(producthasproductreference.Table, producthasproductreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productreferences.ProductHasProductReferenceTable, productreferences.ProductHasProductReferenceColumn),
		)
		fromU = sqlgraph.SetNeighbors(prq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductReferences entity from the query.
// Returns a *NotFoundError when no ProductReferences was found.
func (prq *ProductReferencesQuery) First(ctx context.Context) (*ProductReferences, error) {
	nodes, err := prq.Limit(1).All(setContextOp(ctx, prq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productreferences.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (prq *ProductReferencesQuery) FirstX(ctx context.Context) *ProductReferences {
	node, err := prq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductReferences ID from the query.
// Returns a *NotFoundError when no ProductReferences ID was found.
func (prq *ProductReferencesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = prq.Limit(1).IDs(setContextOp(ctx, prq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productreferences.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (prq *ProductReferencesQuery) FirstIDX(ctx context.Context) int {
	id, err := prq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductReferences entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductReferences entity is found.
// Returns a *NotFoundError when no ProductReferences entities are found.
func (prq *ProductReferencesQuery) Only(ctx context.Context) (*ProductReferences, error) {
	nodes, err := prq.Limit(2).All(setContextOp(ctx, prq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productreferences.Label}
	default:
		return nil, &NotSingularError{productreferences.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (prq *ProductReferencesQuery) OnlyX(ctx context.Context) *ProductReferences {
	node, err := prq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductReferences ID in the query.
// Returns a *NotSingularError when more than one ProductReferences ID is found.
// Returns a *NotFoundError when no entities are found.
func (prq *ProductReferencesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = prq.Limit(2).IDs(setContextOp(ctx, prq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productreferences.Label}
	default:
		err = &NotSingularError{productreferences.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (prq *ProductReferencesQuery) OnlyIDX(ctx context.Context) int {
	id, err := prq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductReferencesSlice.
func (prq *ProductReferencesQuery) All(ctx context.Context) ([]*ProductReferences, error) {
	ctx = setContextOp(ctx, prq.ctx, ent.OpQueryAll)
	if err := prq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductReferences, *ProductReferencesQuery]()
	return withInterceptors[[]*ProductReferences](ctx, prq, qr, prq.inters)
}

// AllX is like All, but panics if an error occurs.
func (prq *ProductReferencesQuery) AllX(ctx context.Context) []*ProductReferences {
	nodes, err := prq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductReferences IDs.
func (prq *ProductReferencesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if prq.ctx.Unique == nil && prq.path != nil {
		prq.Unique(true)
	}
	ctx = setContextOp(ctx, prq.ctx, ent.OpQueryIDs)
	if err = prq.Select(productreferences.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (prq *ProductReferencesQuery) IDsX(ctx context.Context) []int {
	ids, err := prq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (prq *ProductReferencesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, prq.ctx, ent.OpQueryCount)
	if err := prq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, prq, querierCount[*ProductReferencesQuery](), prq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (prq *ProductReferencesQuery) CountX(ctx context.Context) int {
	count, err := prq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (prq *ProductReferencesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, prq.ctx, ent.OpQueryExist)
	switch _, err := prq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (prq *ProductReferencesQuery) ExistX(ctx context.Context) bool {
	exist, err := prq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductReferencesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (prq *ProductReferencesQuery) Clone() *ProductReferencesQuery {
	if prq == nil {
		return nil
	}
	return &ProductReferencesQuery{
		config:                         prq.config,
		ctx:                            prq.ctx.Clone(),
		order:                          append([]productreferences.OrderOption{}, prq.order...),
		inters:                         append([]Interceptor{}, prq.inters...),
		predicates:                     append([]predicate.ProductReferences{}, prq.predicates...),
		withProduct:                    prq.withProduct.Clone(),
		withReferenceSources:           prq.withReferenceSources.Clone(),
		withProductHasProductReference: prq.withProductHasProductReference.Clone(),
		// clone intermediate query.
		sql:  prq.sql.Clone(),
		path: prq.path,
	}
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *ProductReferencesQuery) WithProduct(opts ...func(*ProductsQuery)) *ProductReferencesQuery {
	query := (&ProductsClient{config: prq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	prq.withProduct = query
	return prq
}

// WithReferenceSources tells the query-builder to eager-load the nodes that are connected to
// the "reference_sources" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *ProductReferencesQuery) WithReferenceSources(opts ...func(*ReferenceSourcesQuery)) *ProductReferencesQuery {
	query := (&ReferenceSourcesClient{config: prq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	prq.withReferenceSources = query
	return prq
}

// WithProductHasProductReference tells the query-builder to eager-load the nodes that are connected to
// the "product_has_product_reference" edge. The optional arguments are used to configure the query builder of the edge.
func (prq *ProductReferencesQuery) WithProductHasProductReference(opts ...func(*ProductHasProductReferenceQuery)) *ProductReferencesQuery {
	query := (&ProductHasProductReferenceClient{config: prq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	prq.withProductHasProductReference = query
	return prq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductReferences.Query().
//		GroupBy(productreferences.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (prq *ProductReferencesQuery) GroupBy(field string, fields ...string) *ProductReferencesGroupBy {
	prq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductReferencesGroupBy{build: prq}
	grbuild.flds = &prq.ctx.Fields
	grbuild.label = productreferences.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ProductReferences.Query().
//		Select(productreferences.FieldCreatedAt).
//		Scan(ctx, &v)
func (prq *ProductReferencesQuery) Select(fields ...string) *ProductReferencesSelect {
	prq.ctx.Fields = append(prq.ctx.Fields, fields...)
	sbuild := &ProductReferencesSelect{ProductReferencesQuery: prq}
	sbuild.label = productreferences.Label
	sbuild.flds, sbuild.scan = &prq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductReferencesSelect configured with the given aggregations.
func (prq *ProductReferencesQuery) Aggregate(fns ...AggregateFunc) *ProductReferencesSelect {
	return prq.Select().Aggregate(fns...)
}

func (prq *ProductReferencesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range prq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, prq); err != nil {
				return err
			}
		}
	}
	for _, f := range prq.ctx.Fields {
		if !productreferences.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if prq.path != nil {
		prev, err := prq.path(ctx)
		if err != nil {
			return err
		}
		prq.sql = prev
	}
	return nil
}

func (prq *ProductReferencesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductReferences, error) {
	var (
		nodes       = []*ProductReferences{}
		withFKs     = prq.withFKs
		_spec       = prq.querySpec()
		loadedTypes = [3]bool{
			prq.withProduct != nil,
			prq.withReferenceSources != nil,
			prq.withProductHasProductReference != nil,
		}
	)
	if prq.withProduct != nil || prq.withReferenceSources != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productreferences.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductReferences).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductReferences{config: prq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, prq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := prq.withProduct; query != nil {
		if err := prq.loadProduct(ctx, query, nodes, nil,
			func(n *ProductReferences, e *Products) { n.Edges.Product = e }); err != nil {
			return nil, err
		}
	}
	if query := prq.withReferenceSources; query != nil {
		if err := prq.loadReferenceSources(ctx, query, nodes, nil,
			func(n *ProductReferences, e *ReferenceSources) { n.Edges.ReferenceSources = e }); err != nil {
			return nil, err
		}
	}
	if query := prq.withProductHasProductReference; query != nil {
		if err := prq.loadProductHasProductReference(ctx, query, nodes,
			func(n *ProductReferences) { n.Edges.ProductHasProductReference = []*ProductHasProductReference{} },
			func(n *ProductReferences, e *ProductHasProductReference) {
				n.Edges.ProductHasProductReference = append(n.Edges.ProductHasProductReference, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (prq *ProductReferencesQuery) loadProduct(ctx context.Context, query *ProductsQuery, nodes []*ProductReferences, init func(*ProductReferences), assign func(*ProductReferences, *Products)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductReferences)
	for i := range nodes {
		if nodes[i].products_product_references == nil {
			continue
		}
		fk := *nodes[i].products_product_references
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(products.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "products_product_references" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (prq *ProductReferencesQuery) loadReferenceSources(ctx context.Context, query *ReferenceSourcesQuery, nodes []*ProductReferences, init func(*ProductReferences), assign func(*ProductReferences, *ReferenceSources)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductReferences)
	for i := range nodes {
		if nodes[i].reference_sources_product_references == nil {
			continue
		}
		fk := *nodes[i].reference_sources_product_references
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(referencesources.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "reference_sources_product_references" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (prq *ProductReferencesQuery) loadProductHasProductReference(ctx context.Context, query *ProductHasProductReferenceQuery, nodes []*ProductReferences, init func(*ProductReferences), assign func(*ProductReferences, *ProductHasProductReference)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProductReferences)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(producthasproductreference.FieldProductReferenceID)
	}
	query.Where(predicate.ProductHasProductReference(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(productreferences.ProductHasProductReferenceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductReferenceID
		if fk == nil {
			return fmt.Errorf(`foreign-key "product_reference_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_reference_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (prq *ProductReferencesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := prq.querySpec()
	_spec.Node.Columns = prq.ctx.Fields
	if len(prq.ctx.Fields) > 0 {
		_spec.Unique = prq.ctx.Unique != nil && *prq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, prq.driver, _spec)
}

func (prq *ProductReferencesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(productreferences.Table, productreferences.Columns, sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt))
	_spec.From = prq.sql
	if unique := prq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if prq.path != nil {
		_spec.Unique = true
	}
	if fields := prq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productreferences.FieldID)
		for i := range fields {
			if fields[i] != productreferences.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := prq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := prq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := prq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := prq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (prq *ProductReferencesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(prq.driver.Dialect())
	t1 := builder.Table(productreferences.Table)
	columns := prq.ctx.Fields
	if len(columns) == 0 {
		columns = productreferences.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if prq.sql != nil {
		selector = prq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if prq.ctx.Unique != nil && *prq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range prq.predicates {
		p(selector)
	}
	for _, p := range prq.order {
		p(selector)
	}
	if offset := prq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := prq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductReferencesGroupBy is the group-by builder for ProductReferences entities.
type ProductReferencesGroupBy struct {
	selector
	build *ProductReferencesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (prgb *ProductReferencesGroupBy) Aggregate(fns ...AggregateFunc) *ProductReferencesGroupBy {
	prgb.fns = append(prgb.fns, fns...)
	return prgb
}

// Scan applies the selector query and scans the result into the given value.
func (prgb *ProductReferencesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prgb.build.ctx, ent.OpQueryGroupBy)
	if err := prgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductReferencesQuery, *ProductReferencesGroupBy](ctx, prgb.build, prgb, prgb.build.inters, v)
}

func (prgb *ProductReferencesGroupBy) sqlScan(ctx context.Context, root *ProductReferencesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(prgb.fns))
	for _, fn := range prgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*prgb.flds)+len(prgb.fns))
		for _, f := range *prgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*prgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductReferencesSelect is the builder for selecting fields of ProductReferences entities.
type ProductReferencesSelect struct {
	*ProductReferencesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (prs *ProductReferencesSelect) Aggregate(fns ...AggregateFunc) *ProductReferencesSelect {
	prs.fns = append(prs.fns, fns...)
	return prs
}

// Scan applies the selector query and scans the result into the given value.
func (prs *ProductReferencesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prs.ctx, ent.OpQuerySelect)
	if err := prs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductReferencesQuery, *ProductReferencesSelect](ctx, prs.ProductReferencesQuery, prs, prs.inters, v)
}

func (prs *ProductReferencesSelect) sqlScan(ctx context.Context, root *ProductReferencesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(prs.fns))
	for _, fn := range prs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*prs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
