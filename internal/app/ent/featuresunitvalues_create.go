// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesUnitValuesCreate is the builder for creating a FeaturesUnitValues entity.
type FeaturesUnitValuesCreate struct {
	config
	mutation *FeaturesUnitValuesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fuvc *FeaturesUnitValuesCreate) SetCreatedAt(t time.Time) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetCreatedAt(t)
	return fuvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuvc *FeaturesUnitValuesCreate) SetNillableCreatedAt(t *time.Time) *FeaturesUnitValuesCreate {
	if t != nil {
		fuvc.SetCreatedAt(*t)
	}
	return fuvc
}

// SetUpdatedAt sets the "updated_at" field.
func (fuvc *FeaturesUnitValuesCreate) SetUpdatedAt(t time.Time) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetUpdatedAt(t)
	return fuvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fuvc *FeaturesUnitValuesCreate) SetNillableUpdatedAt(t *time.Time) *FeaturesUnitValuesCreate {
	if t != nil {
		fuvc.SetUpdatedAt(*t)
	}
	return fuvc
}

// SetDeletedAt sets the "deleted_at" field.
func (fuvc *FeaturesUnitValuesCreate) SetDeletedAt(t time.Time) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetDeletedAt(t)
	return fuvc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuvc *FeaturesUnitValuesCreate) SetNillableDeletedAt(t *time.Time) *FeaturesUnitValuesCreate {
	if t != nil {
		fuvc.SetDeletedAt(*t)
	}
	return fuvc
}

// SetCreatedBy sets the "created_by" field.
func (fuvc *FeaturesUnitValuesCreate) SetCreatedBy(i int) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetCreatedBy(i)
	return fuvc
}

// SetUpdatedBy sets the "updated_by" field.
func (fuvc *FeaturesUnitValuesCreate) SetUpdatedBy(i int) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetUpdatedBy(i)
	return fuvc
}

// SetDeletedBy sets the "deleted_by" field.
func (fuvc *FeaturesUnitValuesCreate) SetDeletedBy(i int) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetDeletedBy(i)
	return fuvc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fuvc *FeaturesUnitValuesCreate) SetNillableDeletedBy(i *int) *FeaturesUnitValuesCreate {
	if i != nil {
		fuvc.SetDeletedBy(*i)
	}
	return fuvc
}

// SetName sets the "name" field.
func (fuvc *FeaturesUnitValuesCreate) SetName(s string) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetName(s)
	return fuvc
}

// SetDecimals sets the "decimals" field.
func (fuvc *FeaturesUnitValuesCreate) SetDecimals(i int) *FeaturesUnitValuesCreate {
	fuvc.mutation.SetDecimals(i)
	return fuvc
}

// SetNillableDecimals sets the "decimals" field if the given value is not nil.
func (fuvc *FeaturesUnitValuesCreate) SetNillableDecimals(i *int) *FeaturesUnitValuesCreate {
	if i != nil {
		fuvc.SetDecimals(*i)
	}
	return fuvc
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fuvc *FeaturesUnitValuesCreate) AddFeatureValueIDs(ids ...int) *FeaturesUnitValuesCreate {
	fuvc.mutation.AddFeatureValueIDs(ids...)
	return fuvc
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fuvc *FeaturesUnitValuesCreate) AddFeatureValues(f ...*FeaturesValues) *FeaturesUnitValuesCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuvc.AddFeatureValueIDs(ids...)
}

// Mutation returns the FeaturesUnitValuesMutation object of the builder.
func (fuvc *FeaturesUnitValuesCreate) Mutation() *FeaturesUnitValuesMutation {
	return fuvc.mutation
}

// Save creates the FeaturesUnitValues in the database.
func (fuvc *FeaturesUnitValuesCreate) Save(ctx context.Context) (*FeaturesUnitValues, error) {
	fuvc.defaults()
	return withHooks(ctx, fuvc.sqlSave, fuvc.mutation, fuvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fuvc *FeaturesUnitValuesCreate) SaveX(ctx context.Context) *FeaturesUnitValues {
	v, err := fuvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fuvc *FeaturesUnitValuesCreate) Exec(ctx context.Context) error {
	_, err := fuvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuvc *FeaturesUnitValuesCreate) ExecX(ctx context.Context) {
	if err := fuvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuvc *FeaturesUnitValuesCreate) defaults() {
	if _, ok := fuvc.mutation.CreatedAt(); !ok {
		v := featuresunitvalues.DefaultCreatedAt()
		fuvc.mutation.SetCreatedAt(v)
	}
	if _, ok := fuvc.mutation.UpdatedAt(); !ok {
		v := featuresunitvalues.DefaultUpdatedAt()
		fuvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuvc *FeaturesUnitValuesCreate) check() error {
	if _, ok := fuvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeaturesUnitValues.created_at"`)}
	}
	if _, ok := fuvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FeaturesUnitValues.updated_at"`)}
	}
	if _, ok := fuvc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "FeaturesUnitValues.created_by"`)}
	}
	if v, ok := fuvc.mutation.CreatedBy(); ok {
		if err := featuresunitvalues.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "FeaturesUnitValues.created_by": %w`, err)}
		}
	}
	if _, ok := fuvc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "FeaturesUnitValues.updated_by"`)}
	}
	if v, ok := fuvc.mutation.UpdatedBy(); ok {
		if err := featuresunitvalues.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "FeaturesUnitValues.updated_by": %w`, err)}
		}
	}
	if _, ok := fuvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FeaturesUnitValues.name"`)}
	}
	return nil
}

func (fuvc *FeaturesUnitValuesCreate) sqlSave(ctx context.Context) (*FeaturesUnitValues, error) {
	if err := fuvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fuvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fuvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fuvc.mutation.id = &_node.ID
	fuvc.mutation.done = true
	return _node, nil
}

func (fuvc *FeaturesUnitValuesCreate) createSpec() (*FeaturesUnitValues, *sqlgraph.CreateSpec) {
	var (
		_node = &FeaturesUnitValues{config: fuvc.config}
		_spec = sqlgraph.NewCreateSpec(featuresunitvalues.Table, sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt))
	)
	if value, ok := fuvc.mutation.CreatedAt(); ok {
		_spec.SetField(featuresunitvalues.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fuvc.mutation.UpdatedAt(); ok {
		_spec.SetField(featuresunitvalues.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fuvc.mutation.DeletedAt(); ok {
		_spec.SetField(featuresunitvalues.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fuvc.mutation.CreatedBy(); ok {
		_spec.SetField(featuresunitvalues.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := fuvc.mutation.UpdatedBy(); ok {
		_spec.SetField(featuresunitvalues.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := fuvc.mutation.DeletedBy(); ok {
		_spec.SetField(featuresunitvalues.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if value, ok := fuvc.mutation.Name(); ok {
		_spec.SetField(featuresunitvalues.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := fuvc.mutation.Decimals(); ok {
		_spec.SetField(featuresunitvalues.FieldDecimals, field.TypeInt, value)
		_node.Decimals = &value
	}
	if nodes := fuvc.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresunitvalues.FeatureValuesTable,
			Columns: []string{featuresunitvalues.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeaturesUnitValuesCreateBulk is the builder for creating many FeaturesUnitValues entities in bulk.
type FeaturesUnitValuesCreateBulk struct {
	config
	err      error
	builders []*FeaturesUnitValuesCreate
}

// Save creates the FeaturesUnitValues entities in the database.
func (fuvcb *FeaturesUnitValuesCreateBulk) Save(ctx context.Context) ([]*FeaturesUnitValues, error) {
	if fuvcb.err != nil {
		return nil, fuvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fuvcb.builders))
	nodes := make([]*FeaturesUnitValues, len(fuvcb.builders))
	mutators := make([]Mutator, len(fuvcb.builders))
	for i := range fuvcb.builders {
		func(i int, root context.Context) {
			builder := fuvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeaturesUnitValuesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fuvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fuvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fuvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fuvcb *FeaturesUnitValuesCreateBulk) SaveX(ctx context.Context) []*FeaturesUnitValues {
	v, err := fuvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fuvcb *FeaturesUnitValuesCreateBulk) Exec(ctx context.Context) error {
	_, err := fuvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuvcb *FeaturesUnitValuesCreateBulk) ExecX(ctx context.Context) {
	if err := fuvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
