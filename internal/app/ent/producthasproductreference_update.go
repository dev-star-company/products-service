// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasproductreference"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/products"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasProductReferenceUpdate is the builder for updating ProductHasProductReference entities.
type ProductHasProductReferenceUpdate struct {
	config
	hooks    []Hook
	mutation *ProductHasProductReferenceMutation
}

// Where appends a list predicates to the ProductHasProductReferenceUpdate builder.
func (phpru *ProductHasProductReferenceUpdate) Where(ps ...predicate.ProductHasProductReference) *ProductHasProductReferenceUpdate {
	phpru.mutation.Where(ps...)
	return phpru
}

// SetDeletedAt sets the "deleted_at" field.
func (phpru *ProductHasProductReferenceUpdate) SetDeletedAt(t time.Time) *ProductHasProductReferenceUpdate {
	phpru.mutation.SetDeletedAt(t)
	return phpru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phpru *ProductHasProductReferenceUpdate) SetNillableDeletedAt(t *time.Time) *ProductHasProductReferenceUpdate {
	if t != nil {
		phpru.SetDeletedAt(*t)
	}
	return phpru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phpru *ProductHasProductReferenceUpdate) ClearDeletedAt() *ProductHasProductReferenceUpdate {
	phpru.mutation.ClearDeletedAt()
	return phpru
}

// SetProductReferenceID sets the "product_reference_id" field.
func (phpru *ProductHasProductReferenceUpdate) SetProductReferenceID(i int) *ProductHasProductReferenceUpdate {
	phpru.mutation.SetProductReferenceID(i)
	return phpru
}

// SetNillableProductReferenceID sets the "product_reference_id" field if the given value is not nil.
func (phpru *ProductHasProductReferenceUpdate) SetNillableProductReferenceID(i *int) *ProductHasProductReferenceUpdate {
	if i != nil {
		phpru.SetProductReferenceID(*i)
	}
	return phpru
}

// SetProductID sets the "product_id" field.
func (phpru *ProductHasProductReferenceUpdate) SetProductID(i int) *ProductHasProductReferenceUpdate {
	phpru.mutation.SetProductID(i)
	return phpru
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phpru *ProductHasProductReferenceUpdate) SetNillableProductID(i *int) *ProductHasProductReferenceUpdate {
	if i != nil {
		phpru.SetProductID(*i)
	}
	return phpru
}

// ClearProductID clears the value of the "product_id" field.
func (phpru *ProductHasProductReferenceUpdate) ClearProductID() *ProductHasProductReferenceUpdate {
	phpru.mutation.ClearProductID()
	return phpru
}

// SetProductReference sets the "product_reference" edge to the ProductReferences entity.
func (phpru *ProductHasProductReferenceUpdate) SetProductReference(p *ProductReferences) *ProductHasProductReferenceUpdate {
	return phpru.SetProductReferenceID(p.ID)
}

// SetProduct sets the "product" edge to the Products entity.
func (phpru *ProductHasProductReferenceUpdate) SetProduct(p *Products) *ProductHasProductReferenceUpdate {
	return phpru.SetProductID(p.ID)
}

// Mutation returns the ProductHasProductReferenceMutation object of the builder.
func (phpru *ProductHasProductReferenceUpdate) Mutation() *ProductHasProductReferenceMutation {
	return phpru.mutation
}

// ClearProductReference clears the "product_reference" edge to the ProductReferences entity.
func (phpru *ProductHasProductReferenceUpdate) ClearProductReference() *ProductHasProductReferenceUpdate {
	phpru.mutation.ClearProductReference()
	return phpru
}

// ClearProduct clears the "product" edge to the Products entity.
func (phpru *ProductHasProductReferenceUpdate) ClearProduct() *ProductHasProductReferenceUpdate {
	phpru.mutation.ClearProduct()
	return phpru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phpru *ProductHasProductReferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, phpru.sqlSave, phpru.mutation, phpru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phpru *ProductHasProductReferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := phpru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phpru *ProductHasProductReferenceUpdate) Exec(ctx context.Context) error {
	_, err := phpru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpru *ProductHasProductReferenceUpdate) ExecX(ctx context.Context) {
	if err := phpru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phpru *ProductHasProductReferenceUpdate) check() error {
	if phpru.mutation.ProductReferenceCleared() && len(phpru.mutation.ProductReferenceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductHasProductReference.product_reference"`)
	}
	return nil
}

func (phpru *ProductHasProductReferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phpru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(producthasproductreference.Table, producthasproductreference.Columns, sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt))
	if ps := phpru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phpru.mutation.DeletedAt(); ok {
		_spec.SetField(producthasproductreference.FieldDeletedAt, field.TypeTime, value)
	}
	if phpru.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasproductreference.FieldDeletedAt, field.TypeTime)
	}
	if phpru.mutation.ProductReferenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductReferenceTable,
			Columns: []string{producthasproductreference.ProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpru.mutation.ProductReferenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductReferenceTable,
			Columns: []string{producthasproductreference.ProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phpru.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductTable,
			Columns: []string{producthasproductreference.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpru.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductTable,
			Columns: []string{producthasproductreference.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phpru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasproductreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phpru.mutation.done = true
	return n, nil
}

// ProductHasProductReferenceUpdateOne is the builder for updating a single ProductHasProductReference entity.
type ProductHasProductReferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductHasProductReferenceMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (phpruo *ProductHasProductReferenceUpdateOne) SetDeletedAt(t time.Time) *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.SetDeletedAt(t)
	return phpruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phpruo *ProductHasProductReferenceUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductHasProductReferenceUpdateOne {
	if t != nil {
		phpruo.SetDeletedAt(*t)
	}
	return phpruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phpruo *ProductHasProductReferenceUpdateOne) ClearDeletedAt() *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.ClearDeletedAt()
	return phpruo
}

// SetProductReferenceID sets the "product_reference_id" field.
func (phpruo *ProductHasProductReferenceUpdateOne) SetProductReferenceID(i int) *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.SetProductReferenceID(i)
	return phpruo
}

// SetNillableProductReferenceID sets the "product_reference_id" field if the given value is not nil.
func (phpruo *ProductHasProductReferenceUpdateOne) SetNillableProductReferenceID(i *int) *ProductHasProductReferenceUpdateOne {
	if i != nil {
		phpruo.SetProductReferenceID(*i)
	}
	return phpruo
}

// SetProductID sets the "product_id" field.
func (phpruo *ProductHasProductReferenceUpdateOne) SetProductID(i int) *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.SetProductID(i)
	return phpruo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phpruo *ProductHasProductReferenceUpdateOne) SetNillableProductID(i *int) *ProductHasProductReferenceUpdateOne {
	if i != nil {
		phpruo.SetProductID(*i)
	}
	return phpruo
}

// ClearProductID clears the value of the "product_id" field.
func (phpruo *ProductHasProductReferenceUpdateOne) ClearProductID() *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.ClearProductID()
	return phpruo
}

// SetProductReference sets the "product_reference" edge to the ProductReferences entity.
func (phpruo *ProductHasProductReferenceUpdateOne) SetProductReference(p *ProductReferences) *ProductHasProductReferenceUpdateOne {
	return phpruo.SetProductReferenceID(p.ID)
}

// SetProduct sets the "product" edge to the Products entity.
func (phpruo *ProductHasProductReferenceUpdateOne) SetProduct(p *Products) *ProductHasProductReferenceUpdateOne {
	return phpruo.SetProductID(p.ID)
}

// Mutation returns the ProductHasProductReferenceMutation object of the builder.
func (phpruo *ProductHasProductReferenceUpdateOne) Mutation() *ProductHasProductReferenceMutation {
	return phpruo.mutation
}

// ClearProductReference clears the "product_reference" edge to the ProductReferences entity.
func (phpruo *ProductHasProductReferenceUpdateOne) ClearProductReference() *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.ClearProductReference()
	return phpruo
}

// ClearProduct clears the "product" edge to the Products entity.
func (phpruo *ProductHasProductReferenceUpdateOne) ClearProduct() *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.ClearProduct()
	return phpruo
}

// Where appends a list predicates to the ProductHasProductReferenceUpdate builder.
func (phpruo *ProductHasProductReferenceUpdateOne) Where(ps ...predicate.ProductHasProductReference) *ProductHasProductReferenceUpdateOne {
	phpruo.mutation.Where(ps...)
	return phpruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phpruo *ProductHasProductReferenceUpdateOne) Select(field string, fields ...string) *ProductHasProductReferenceUpdateOne {
	phpruo.fields = append([]string{field}, fields...)
	return phpruo
}

// Save executes the query and returns the updated ProductHasProductReference entity.
func (phpruo *ProductHasProductReferenceUpdateOne) Save(ctx context.Context) (*ProductHasProductReference, error) {
	return withHooks(ctx, phpruo.sqlSave, phpruo.mutation, phpruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phpruo *ProductHasProductReferenceUpdateOne) SaveX(ctx context.Context) *ProductHasProductReference {
	node, err := phpruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phpruo *ProductHasProductReferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := phpruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phpruo *ProductHasProductReferenceUpdateOne) ExecX(ctx context.Context) {
	if err := phpruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phpruo *ProductHasProductReferenceUpdateOne) check() error {
	if phpruo.mutation.ProductReferenceCleared() && len(phpruo.mutation.ProductReferenceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductHasProductReference.product_reference"`)
	}
	return nil
}

func (phpruo *ProductHasProductReferenceUpdateOne) sqlSave(ctx context.Context) (_node *ProductHasProductReference, err error) {
	if err := phpruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(producthasproductreference.Table, producthasproductreference.Columns, sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt))
	id, ok := phpruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductHasProductReference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phpruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producthasproductreference.FieldID)
		for _, f := range fields {
			if !producthasproductreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != producthasproductreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phpruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phpruo.mutation.DeletedAt(); ok {
		_spec.SetField(producthasproductreference.FieldDeletedAt, field.TypeTime, value)
	}
	if phpruo.mutation.DeletedAtCleared() {
		_spec.ClearField(producthasproductreference.FieldDeletedAt, field.TypeTime)
	}
	if phpruo.mutation.ProductReferenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductReferenceTable,
			Columns: []string{producthasproductreference.ProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpruo.mutation.ProductReferenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductReferenceTable,
			Columns: []string{producthasproductreference.ProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phpruo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductTable,
			Columns: []string{producthasproductreference.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phpruo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasproductreference.ProductTable,
			Columns: []string{producthasproductreference.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductHasProductReference{config: phpruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phpruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producthasproductreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phpruo.mutation.done = true
	return _node, nil
}
