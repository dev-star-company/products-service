// Code generated by ent, DO NOT EDIT.

package featuresunitvalues

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldDeletedBy, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldName, v))
}

// Decimals applies equality check predicate on the "decimals" field. It's identical to DecimalsEQ.
func Decimals(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldDecimals, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldUpdatedBy, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotNull(FieldDeletedBy))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldContainsFold(FieldName, v))
}

// DecimalsEQ applies the EQ predicate on the "decimals" field.
func DecimalsEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldEQ(FieldDecimals, v))
}

// DecimalsNEQ applies the NEQ predicate on the "decimals" field.
func DecimalsNEQ(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNEQ(FieldDecimals, v))
}

// DecimalsIn applies the In predicate on the "decimals" field.
func DecimalsIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIn(FieldDecimals, vs...))
}

// DecimalsNotIn applies the NotIn predicate on the "decimals" field.
func DecimalsNotIn(vs ...int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotIn(FieldDecimals, vs...))
}

// DecimalsGT applies the GT predicate on the "decimals" field.
func DecimalsGT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGT(FieldDecimals, v))
}

// DecimalsGTE applies the GTE predicate on the "decimals" field.
func DecimalsGTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldGTE(FieldDecimals, v))
}

// DecimalsLT applies the LT predicate on the "decimals" field.
func DecimalsLT(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLT(FieldDecimals, v))
}

// DecimalsLTE applies the LTE predicate on the "decimals" field.
func DecimalsLTE(v int) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldLTE(FieldDecimals, v))
}

// DecimalsIsNil applies the IsNil predicate on the "decimals" field.
func DecimalsIsNil() predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldIsNull(FieldDecimals))
}

// DecimalsNotNil applies the NotNil predicate on the "decimals" field.
func DecimalsNotNil() predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.FieldNotNull(FieldDecimals))
}

// HasFeatureValues applies the HasEdge predicate on the "feature_values" edge.
func HasFeatureValues() predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeatureValuesTable, FeatureValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureValuesWith applies the HasEdge predicate on the "feature_values" edge with a given conditions (other predicates).
func HasFeatureValuesWith(preds ...predicate.FeaturesValues) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(func(s *sql.Selector) {
		step := newFeatureValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeaturesUnitValues) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeaturesUnitValues) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeaturesUnitValues) predicate.FeaturesUnitValues {
	return predicate.FeaturesUnitValues(sql.NotPredicates(p))
}
