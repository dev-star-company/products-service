// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasfeature"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesUpdate is the builder for updating Features entities.
type FeaturesUpdate struct {
	config
	hooks    []Hook
	mutation *FeaturesMutation
}

// Where appends a list predicates to the FeaturesUpdate builder.
func (fu *FeaturesUpdate) Where(ps ...predicate.Features) *FeaturesUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FeaturesUpdate) SetUpdatedAt(t time.Time) *FeaturesUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FeaturesUpdate) SetDeletedAt(t time.Time) *FeaturesUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FeaturesUpdate) SetNillableDeletedAt(t *time.Time) *FeaturesUpdate {
	if t != nil {
		fu.SetDeletedAt(*t)
	}
	return fu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fu *FeaturesUpdate) ClearDeletedAt() *FeaturesUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetUpdatedBy sets the "updated_by" field.
func (fu *FeaturesUpdate) SetUpdatedBy(i int) *FeaturesUpdate {
	fu.mutation.ResetUpdatedBy()
	fu.mutation.SetUpdatedBy(i)
	return fu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fu *FeaturesUpdate) SetNillableUpdatedBy(i *int) *FeaturesUpdate {
	if i != nil {
		fu.SetUpdatedBy(*i)
	}
	return fu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fu *FeaturesUpdate) AddUpdatedBy(i int) *FeaturesUpdate {
	fu.mutation.AddUpdatedBy(i)
	return fu
}

// SetDeletedBy sets the "deleted_by" field.
func (fu *FeaturesUpdate) SetDeletedBy(i int) *FeaturesUpdate {
	fu.mutation.ResetDeletedBy()
	fu.mutation.SetDeletedBy(i)
	return fu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fu *FeaturesUpdate) SetNillableDeletedBy(i *int) *FeaturesUpdate {
	if i != nil {
		fu.SetDeletedBy(*i)
	}
	return fu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (fu *FeaturesUpdate) AddDeletedBy(i int) *FeaturesUpdate {
	fu.mutation.AddDeletedBy(i)
	return fu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fu *FeaturesUpdate) ClearDeletedBy() *FeaturesUpdate {
	fu.mutation.ClearDeletedBy()
	return fu
}

// SetFeatureValueID sets the "feature_value_id" field.
func (fu *FeaturesUpdate) SetFeatureValueID(i int) *FeaturesUpdate {
	fu.mutation.ResetFeatureValueID()
	fu.mutation.SetFeatureValueID(i)
	return fu
}

// SetNillableFeatureValueID sets the "feature_value_id" field if the given value is not nil.
func (fu *FeaturesUpdate) SetNillableFeatureValueID(i *int) *FeaturesUpdate {
	if i != nil {
		fu.SetFeatureValueID(*i)
	}
	return fu
}

// AddFeatureValueID adds i to the "feature_value_id" field.
func (fu *FeaturesUpdate) AddFeatureValueID(i int) *FeaturesUpdate {
	fu.mutation.AddFeatureValueID(i)
	return fu
}

// SetName sets the "name" field.
func (fu *FeaturesUpdate) SetName(s string) *FeaturesUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FeaturesUpdate) SetNillableName(s *string) *FeaturesUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fu *FeaturesUpdate) AddFeatureValueIDs(ids ...int) *FeaturesUpdate {
	fu.mutation.AddFeatureValueIDs(ids...)
	return fu
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fu *FeaturesUpdate) AddFeatureValues(f ...*FeaturesValues) *FeaturesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFeatureValueIDs(ids...)
}

// AddProductHasFeatureIDs adds the "product_has_feature" edge to the ProductHasFeature entity by IDs.
func (fu *FeaturesUpdate) AddProductHasFeatureIDs(ids ...int) *FeaturesUpdate {
	fu.mutation.AddProductHasFeatureIDs(ids...)
	return fu
}

// AddProductHasFeature adds the "product_has_feature" edges to the ProductHasFeature entity.
func (fu *FeaturesUpdate) AddProductHasFeature(p ...*ProductHasFeature) *FeaturesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddProductHasFeatureIDs(ids...)
}

// Mutation returns the FeaturesMutation object of the builder.
func (fu *FeaturesUpdate) Mutation() *FeaturesMutation {
	return fu.mutation
}

// ClearFeatureValues clears all "feature_values" edges to the FeaturesValues entity.
func (fu *FeaturesUpdate) ClearFeatureValues() *FeaturesUpdate {
	fu.mutation.ClearFeatureValues()
	return fu
}

// RemoveFeatureValueIDs removes the "feature_values" edge to FeaturesValues entities by IDs.
func (fu *FeaturesUpdate) RemoveFeatureValueIDs(ids ...int) *FeaturesUpdate {
	fu.mutation.RemoveFeatureValueIDs(ids...)
	return fu
}

// RemoveFeatureValues removes "feature_values" edges to FeaturesValues entities.
func (fu *FeaturesUpdate) RemoveFeatureValues(f ...*FeaturesValues) *FeaturesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFeatureValueIDs(ids...)
}

// ClearProductHasFeature clears all "product_has_feature" edges to the ProductHasFeature entity.
func (fu *FeaturesUpdate) ClearProductHasFeature() *FeaturesUpdate {
	fu.mutation.ClearProductHasFeature()
	return fu
}

// RemoveProductHasFeatureIDs removes the "product_has_feature" edge to ProductHasFeature entities by IDs.
func (fu *FeaturesUpdate) RemoveProductHasFeatureIDs(ids ...int) *FeaturesUpdate {
	fu.mutation.RemoveProductHasFeatureIDs(ids...)
	return fu
}

// RemoveProductHasFeature removes "product_has_feature" edges to ProductHasFeature entities.
func (fu *FeaturesUpdate) RemoveProductHasFeature(p ...*ProductHasFeature) *FeaturesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveProductHasFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeaturesUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeaturesUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeaturesUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeaturesUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeaturesUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := features.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeaturesUpdate) check() error {
	if v, ok := fu.mutation.UpdatedBy(); ok {
		if err := features.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Features.updated_by": %w`, err)}
		}
	}
	return nil
}

func (fu *FeaturesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(features.Table, features.Columns, sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(features.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(features.FieldDeletedAt, field.TypeTime, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(features.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.UpdatedBy(); ok {
		_spec.SetField(features.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(features.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fu.mutation.DeletedBy(); ok {
		_spec.SetField(features.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(features.FieldDeletedBy, field.TypeInt, value)
	}
	if fu.mutation.DeletedByCleared() {
		_spec.ClearField(features.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := fu.mutation.FeatureValueID(); ok {
		_spec.SetField(features.FieldFeatureValueID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedFeatureValueID(); ok {
		_spec.AddField(features.FieldFeatureValueID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(features.FieldName, field.TypeString, value)
	}
	if fu.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.FeatureValuesTable,
			Columns: []string{features.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFeatureValuesIDs(); len(nodes) > 0 && !fu.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.FeatureValuesTable,
			Columns: []string{features.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.FeatureValuesTable,
			Columns: []string{features.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ProductHasFeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.ProductHasFeatureTable,
			Columns: []string{features.ProductHasFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedProductHasFeatureIDs(); len(nodes) > 0 && !fu.mutation.ProductHasFeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.ProductHasFeatureTable,
			Columns: []string{features.ProductHasFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProductHasFeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.ProductHasFeatureTable,
			Columns: []string{features.ProductHasFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{features.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeaturesUpdateOne is the builder for updating a single Features entity.
type FeaturesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeaturesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FeaturesUpdateOne) SetUpdatedAt(t time.Time) *FeaturesUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FeaturesUpdateOne) SetDeletedAt(t time.Time) *FeaturesUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FeaturesUpdateOne) SetNillableDeletedAt(t *time.Time) *FeaturesUpdateOne {
	if t != nil {
		fuo.SetDeletedAt(*t)
	}
	return fuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuo *FeaturesUpdateOne) ClearDeletedAt() *FeaturesUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fuo *FeaturesUpdateOne) SetUpdatedBy(i int) *FeaturesUpdateOne {
	fuo.mutation.ResetUpdatedBy()
	fuo.mutation.SetUpdatedBy(i)
	return fuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuo *FeaturesUpdateOne) SetNillableUpdatedBy(i *int) *FeaturesUpdateOne {
	if i != nil {
		fuo.SetUpdatedBy(*i)
	}
	return fuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fuo *FeaturesUpdateOne) AddUpdatedBy(i int) *FeaturesUpdateOne {
	fuo.mutation.AddUpdatedBy(i)
	return fuo
}

// SetDeletedBy sets the "deleted_by" field.
func (fuo *FeaturesUpdateOne) SetDeletedBy(i int) *FeaturesUpdateOne {
	fuo.mutation.ResetDeletedBy()
	fuo.mutation.SetDeletedBy(i)
	return fuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fuo *FeaturesUpdateOne) SetNillableDeletedBy(i *int) *FeaturesUpdateOne {
	if i != nil {
		fuo.SetDeletedBy(*i)
	}
	return fuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (fuo *FeaturesUpdateOne) AddDeletedBy(i int) *FeaturesUpdateOne {
	fuo.mutation.AddDeletedBy(i)
	return fuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fuo *FeaturesUpdateOne) ClearDeletedBy() *FeaturesUpdateOne {
	fuo.mutation.ClearDeletedBy()
	return fuo
}

// SetFeatureValueID sets the "feature_value_id" field.
func (fuo *FeaturesUpdateOne) SetFeatureValueID(i int) *FeaturesUpdateOne {
	fuo.mutation.ResetFeatureValueID()
	fuo.mutation.SetFeatureValueID(i)
	return fuo
}

// SetNillableFeatureValueID sets the "feature_value_id" field if the given value is not nil.
func (fuo *FeaturesUpdateOne) SetNillableFeatureValueID(i *int) *FeaturesUpdateOne {
	if i != nil {
		fuo.SetFeatureValueID(*i)
	}
	return fuo
}

// AddFeatureValueID adds i to the "feature_value_id" field.
func (fuo *FeaturesUpdateOne) AddFeatureValueID(i int) *FeaturesUpdateOne {
	fuo.mutation.AddFeatureValueID(i)
	return fuo
}

// SetName sets the "name" field.
func (fuo *FeaturesUpdateOne) SetName(s string) *FeaturesUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FeaturesUpdateOne) SetNillableName(s *string) *FeaturesUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fuo *FeaturesUpdateOne) AddFeatureValueIDs(ids ...int) *FeaturesUpdateOne {
	fuo.mutation.AddFeatureValueIDs(ids...)
	return fuo
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fuo *FeaturesUpdateOne) AddFeatureValues(f ...*FeaturesValues) *FeaturesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFeatureValueIDs(ids...)
}

// AddProductHasFeatureIDs adds the "product_has_feature" edge to the ProductHasFeature entity by IDs.
func (fuo *FeaturesUpdateOne) AddProductHasFeatureIDs(ids ...int) *FeaturesUpdateOne {
	fuo.mutation.AddProductHasFeatureIDs(ids...)
	return fuo
}

// AddProductHasFeature adds the "product_has_feature" edges to the ProductHasFeature entity.
func (fuo *FeaturesUpdateOne) AddProductHasFeature(p ...*ProductHasFeature) *FeaturesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddProductHasFeatureIDs(ids...)
}

// Mutation returns the FeaturesMutation object of the builder.
func (fuo *FeaturesUpdateOne) Mutation() *FeaturesMutation {
	return fuo.mutation
}

// ClearFeatureValues clears all "feature_values" edges to the FeaturesValues entity.
func (fuo *FeaturesUpdateOne) ClearFeatureValues() *FeaturesUpdateOne {
	fuo.mutation.ClearFeatureValues()
	return fuo
}

// RemoveFeatureValueIDs removes the "feature_values" edge to FeaturesValues entities by IDs.
func (fuo *FeaturesUpdateOne) RemoveFeatureValueIDs(ids ...int) *FeaturesUpdateOne {
	fuo.mutation.RemoveFeatureValueIDs(ids...)
	return fuo
}

// RemoveFeatureValues removes "feature_values" edges to FeaturesValues entities.
func (fuo *FeaturesUpdateOne) RemoveFeatureValues(f ...*FeaturesValues) *FeaturesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFeatureValueIDs(ids...)
}

// ClearProductHasFeature clears all "product_has_feature" edges to the ProductHasFeature entity.
func (fuo *FeaturesUpdateOne) ClearProductHasFeature() *FeaturesUpdateOne {
	fuo.mutation.ClearProductHasFeature()
	return fuo
}

// RemoveProductHasFeatureIDs removes the "product_has_feature" edge to ProductHasFeature entities by IDs.
func (fuo *FeaturesUpdateOne) RemoveProductHasFeatureIDs(ids ...int) *FeaturesUpdateOne {
	fuo.mutation.RemoveProductHasFeatureIDs(ids...)
	return fuo
}

// RemoveProductHasFeature removes "product_has_feature" edges to ProductHasFeature entities.
func (fuo *FeaturesUpdateOne) RemoveProductHasFeature(p ...*ProductHasFeature) *FeaturesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveProductHasFeatureIDs(ids...)
}

// Where appends a list predicates to the FeaturesUpdate builder.
func (fuo *FeaturesUpdateOne) Where(ps ...predicate.Features) *FeaturesUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeaturesUpdateOne) Select(field string, fields ...string) *FeaturesUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Features entity.
func (fuo *FeaturesUpdateOne) Save(ctx context.Context) (*Features, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeaturesUpdateOne) SaveX(ctx context.Context) *Features {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeaturesUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeaturesUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeaturesUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := features.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeaturesUpdateOne) check() error {
	if v, ok := fuo.mutation.UpdatedBy(); ok {
		if err := features.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Features.updated_by": %w`, err)}
		}
	}
	return nil
}

func (fuo *FeaturesUpdateOne) sqlSave(ctx context.Context) (_node *Features, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(features.Table, features.Columns, sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Features.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, features.FieldID)
		for _, f := range fields {
			if !features.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != features.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(features.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(features.FieldDeletedAt, field.TypeTime, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(features.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.UpdatedBy(); ok {
		_spec.SetField(features.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(features.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.DeletedBy(); ok {
		_spec.SetField(features.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(features.FieldDeletedBy, field.TypeInt, value)
	}
	if fuo.mutation.DeletedByCleared() {
		_spec.ClearField(features.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := fuo.mutation.FeatureValueID(); ok {
		_spec.SetField(features.FieldFeatureValueID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedFeatureValueID(); ok {
		_spec.AddField(features.FieldFeatureValueID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(features.FieldName, field.TypeString, value)
	}
	if fuo.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.FeatureValuesTable,
			Columns: []string{features.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFeatureValuesIDs(); len(nodes) > 0 && !fuo.mutation.FeatureValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.FeatureValuesTable,
			Columns: []string{features.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.FeatureValuesTable,
			Columns: []string{features.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ProductHasFeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.ProductHasFeatureTable,
			Columns: []string{features.ProductHasFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedProductHasFeatureIDs(); len(nodes) > 0 && !fuo.mutation.ProductHasFeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.ProductHasFeatureTable,
			Columns: []string{features.ProductHasFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProductHasFeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   features.ProductHasFeatureTable,
			Columns: []string{features.ProductHasFeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Features{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{features.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
