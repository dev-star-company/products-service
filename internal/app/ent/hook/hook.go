// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"products-service/internal/app/ent"
)

// The BrandFunc type is an adapter to allow the use of ordinary
// function as Brand mutator.
type BrandFunc func(context.Context, *ent.BrandMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BrandFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BrandMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BrandMutation", m)
}

// The CategoryFunc type is an adapter to allow the use of ordinary
// function as Category mutator.
type CategoryFunc func(context.Context, *ent.CategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CategoryMutation", m)
}

// The FeaturesFunc type is an adapter to allow the use of ordinary
// function as Features mutator.
type FeaturesFunc func(context.Context, *ent.FeaturesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeaturesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FeaturesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeaturesMutation", m)
}

// The FeaturesUnitValuesFunc type is an adapter to allow the use of ordinary
// function as FeaturesUnitValues mutator.
type FeaturesUnitValuesFunc func(context.Context, *ent.FeaturesUnitValuesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeaturesUnitValuesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FeaturesUnitValuesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeaturesUnitValuesMutation", m)
}

// The FeaturesValuesFunc type is an adapter to allow the use of ordinary
// function as FeaturesValues mutator.
type FeaturesValuesFunc func(context.Context, *ent.FeaturesValuesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeaturesValuesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FeaturesValuesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeaturesValuesMutation", m)
}

// The FeaturesValuesTypesFunc type is an adapter to allow the use of ordinary
// function as FeaturesValuesTypes mutator.
type FeaturesValuesTypesFunc func(context.Context, *ent.FeaturesValuesTypesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeaturesValuesTypesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FeaturesValuesTypesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeaturesValuesTypesMutation", m)
}

// The ImageFolderPathFunc type is an adapter to allow the use of ordinary
// function as ImageFolderPath mutator.
type ImageFolderPathFunc func(context.Context, *ent.ImageFolderPathMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImageFolderPathFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ImageFolderPathMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImageFolderPathMutation", m)
}

// The ImageFolderSourceFunc type is an adapter to allow the use of ordinary
// function as ImageFolderSource mutator.
type ImageFolderSourceFunc func(context.Context, *ent.ImageFolderSourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImageFolderSourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ImageFolderSourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImageFolderSourceMutation", m)
}

// The ImagesFunc type is an adapter to allow the use of ordinary
// function as Images mutator.
type ImagesFunc func(context.Context, *ent.ImagesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ImagesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ImagesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ImagesMutation", m)
}

// The InfoTypesFunc type is an adapter to allow the use of ordinary
// function as InfoTypes mutator.
type InfoTypesFunc func(context.Context, *ent.InfoTypesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InfoTypesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InfoTypesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InfoTypesMutation", m)
}

// The PriceTypeFunc type is an adapter to allow the use of ordinary
// function as PriceType mutator.
type PriceTypeFunc func(context.Context, *ent.PriceTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PriceTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PriceTypeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PriceTypeMutation", m)
}

// The ProductHasFeatureFunc type is an adapter to allow the use of ordinary
// function as ProductHasFeature mutator.
type ProductHasFeatureFunc func(context.Context, *ent.ProductHasFeatureMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductHasFeatureFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductHasFeatureMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductHasFeatureMutation", m)
}

// The ProductHasImageFunc type is an adapter to allow the use of ordinary
// function as ProductHasImage mutator.
type ProductHasImageFunc func(context.Context, *ent.ProductHasImageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductHasImageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductHasImageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductHasImageMutation", m)
}

// The ProductHasInfoFunc type is an adapter to allow the use of ordinary
// function as ProductHasInfo mutator.
type ProductHasInfoFunc func(context.Context, *ent.ProductHasInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductHasInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductHasInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductHasInfoMutation", m)
}

// The ProductHasProductReferenceFunc type is an adapter to allow the use of ordinary
// function as ProductHasProductReference mutator.
type ProductHasProductReferenceFunc func(context.Context, *ent.ProductHasProductReferenceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductHasProductReferenceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductHasProductReferenceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductHasProductReferenceMutation", m)
}

// The ProductInfoFunc type is an adapter to allow the use of ordinary
// function as ProductInfo mutator.
type ProductInfoFunc func(context.Context, *ent.ProductInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductInfoMutation", m)
}

// The ProductPricesFunc type is an adapter to allow the use of ordinary
// function as ProductPrices mutator.
type ProductPricesFunc func(context.Context, *ent.ProductPricesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductPricesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductPricesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductPricesMutation", m)
}

// The ProductReferencesFunc type is an adapter to allow the use of ordinary
// function as ProductReferences mutator.
type ProductReferencesFunc func(context.Context, *ent.ProductReferencesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductReferencesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductReferencesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductReferencesMutation", m)
}

// The ProductsFunc type is an adapter to allow the use of ordinary
// function as Products mutator.
type ProductsFunc func(context.Context, *ent.ProductsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductsMutation", m)
}

// The PromotionHasProductFunc type is an adapter to allow the use of ordinary
// function as PromotionHasProduct mutator.
type PromotionHasProductFunc func(context.Context, *ent.PromotionHasProductMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionHasProductFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionHasProductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionHasProductMutation", m)
}

// The PromotionsFunc type is an adapter to allow the use of ordinary
// function as Promotions mutator.
type PromotionsFunc func(context.Context, *ent.PromotionsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionsMutation", m)
}

// The ReferenceSourcesFunc type is an adapter to allow the use of ordinary
// function as ReferenceSources mutator.
type ReferenceSourcesFunc func(context.Context, *ent.ReferenceSourcesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReferenceSourcesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReferenceSourcesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReferenceSourcesMutation", m)
}

// The ToolHasProductFunc type is an adapter to allow the use of ordinary
// function as ToolHasProduct mutator.
type ToolHasProductFunc func(context.Context, *ent.ToolHasProductMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ToolHasProductFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ToolHasProductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ToolHasProductMutation", m)
}

// The ToolsFunc type is an adapter to allow the use of ordinary
// function as Tools mutator.
type ToolsFunc func(context.Context, *ent.ToolsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ToolsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ToolsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ToolsMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The VariantTypeFunc type is an adapter to allow the use of ordinary
// function as VariantType mutator.
type VariantTypeFunc func(context.Context, *ent.VariantTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VariantTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VariantTypeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VariantTypeMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
