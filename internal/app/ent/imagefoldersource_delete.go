// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"products-service/internal/app/ent/imagefoldersource"
	"products-service/internal/app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderSourceDelete is the builder for deleting a ImageFolderSource entity.
type ImageFolderSourceDelete struct {
	config
	hooks    []Hook
	mutation *ImageFolderSourceMutation
}

// Where appends a list predicates to the ImageFolderSourceDelete builder.
func (ifsd *ImageFolderSourceDelete) Where(ps ...predicate.ImageFolderSource) *ImageFolderSourceDelete {
	ifsd.mutation.Where(ps...)
	return ifsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ifsd *ImageFolderSourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ifsd.sqlExec, ifsd.mutation, ifsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ifsd *ImageFolderSourceDelete) ExecX(ctx context.Context) int {
	n, err := ifsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ifsd *ImageFolderSourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(imagefoldersource.Table, sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt))
	if ps := ifsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ifsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ifsd.mutation.done = true
	return affected, err
}

// ImageFolderSourceDeleteOne is the builder for deleting a single ImageFolderSource entity.
type ImageFolderSourceDeleteOne struct {
	ifsd *ImageFolderSourceDelete
}

// Where appends a list predicates to the ImageFolderSourceDelete builder.
func (ifsdo *ImageFolderSourceDeleteOne) Where(ps ...predicate.ImageFolderSource) *ImageFolderSourceDeleteOne {
	ifsdo.ifsd.mutation.Where(ps...)
	return ifsdo
}

// Exec executes the deletion query.
func (ifsdo *ImageFolderSourceDeleteOne) Exec(ctx context.Context) error {
	n, err := ifsdo.ifsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{imagefoldersource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ifsdo *ImageFolderSourceDeleteOne) ExecX(ctx context.Context) {
	if err := ifsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
