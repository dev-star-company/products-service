// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"products-service/internal/app/ent/images"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasimage"
	"products-service/internal/app/ent/products"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasImageQuery is the builder for querying ProductHasImage entities.
type ProductHasImageQuery struct {
	config
	ctx         *QueryContext
	order       []producthasimage.OrderOption
	inters      []Interceptor
	predicates  []predicate.ProductHasImage
	withProduct *ProductsQuery
	withImage   *ImagesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductHasImageQuery builder.
func (phiq *ProductHasImageQuery) Where(ps ...predicate.ProductHasImage) *ProductHasImageQuery {
	phiq.predicates = append(phiq.predicates, ps...)
	return phiq
}

// Limit the number of records to be returned by this query.
func (phiq *ProductHasImageQuery) Limit(limit int) *ProductHasImageQuery {
	phiq.ctx.Limit = &limit
	return phiq
}

// Offset to start from.
func (phiq *ProductHasImageQuery) Offset(offset int) *ProductHasImageQuery {
	phiq.ctx.Offset = &offset
	return phiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phiq *ProductHasImageQuery) Unique(unique bool) *ProductHasImageQuery {
	phiq.ctx.Unique = &unique
	return phiq
}

// Order specifies how the records should be ordered.
func (phiq *ProductHasImageQuery) Order(o ...producthasimage.OrderOption) *ProductHasImageQuery {
	phiq.order = append(phiq.order, o...)
	return phiq
}

// QueryProduct chains the current query on the "product" edge.
func (phiq *ProductHasImageQuery) QueryProduct() *ProductsQuery {
	query := (&ProductsClient{config: phiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(producthasimage.Table, producthasimage.FieldID, selector),
			sqlgraph.To(products.Table, products.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, producthasimage.ProductTable, producthasimage.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(phiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImage chains the current query on the "image" edge.
func (phiq *ProductHasImageQuery) QueryImage() *ImagesQuery {
	query := (&ImagesClient{config: phiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(producthasimage.Table, producthasimage.FieldID, selector),
			sqlgraph.To(images.Table, images.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, producthasimage.ImageTable, producthasimage.ImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(phiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductHasImage entity from the query.
// Returns a *NotFoundError when no ProductHasImage was found.
func (phiq *ProductHasImageQuery) First(ctx context.Context) (*ProductHasImage, error) {
	nodes, err := phiq.Limit(1).All(setContextOp(ctx, phiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{producthasimage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phiq *ProductHasImageQuery) FirstX(ctx context.Context) *ProductHasImage {
	node, err := phiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductHasImage ID from the query.
// Returns a *NotFoundError when no ProductHasImage ID was found.
func (phiq *ProductHasImageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phiq.Limit(1).IDs(setContextOp(ctx, phiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{producthasimage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phiq *ProductHasImageQuery) FirstIDX(ctx context.Context) int {
	id, err := phiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductHasImage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductHasImage entity is found.
// Returns a *NotFoundError when no ProductHasImage entities are found.
func (phiq *ProductHasImageQuery) Only(ctx context.Context) (*ProductHasImage, error) {
	nodes, err := phiq.Limit(2).All(setContextOp(ctx, phiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{producthasimage.Label}
	default:
		return nil, &NotSingularError{producthasimage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phiq *ProductHasImageQuery) OnlyX(ctx context.Context) *ProductHasImage {
	node, err := phiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductHasImage ID in the query.
// Returns a *NotSingularError when more than one ProductHasImage ID is found.
// Returns a *NotFoundError when no entities are found.
func (phiq *ProductHasImageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = phiq.Limit(2).IDs(setContextOp(ctx, phiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{producthasimage.Label}
	default:
		err = &NotSingularError{producthasimage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phiq *ProductHasImageQuery) OnlyIDX(ctx context.Context) int {
	id, err := phiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductHasImages.
func (phiq *ProductHasImageQuery) All(ctx context.Context) ([]*ProductHasImage, error) {
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryAll)
	if err := phiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductHasImage, *ProductHasImageQuery]()
	return withInterceptors[[]*ProductHasImage](ctx, phiq, qr, phiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (phiq *ProductHasImageQuery) AllX(ctx context.Context) []*ProductHasImage {
	nodes, err := phiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductHasImage IDs.
func (phiq *ProductHasImageQuery) IDs(ctx context.Context) (ids []int, err error) {
	if phiq.ctx.Unique == nil && phiq.path != nil {
		phiq.Unique(true)
	}
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryIDs)
	if err = phiq.Select(producthasimage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phiq *ProductHasImageQuery) IDsX(ctx context.Context) []int {
	ids, err := phiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phiq *ProductHasImageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryCount)
	if err := phiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, phiq, querierCount[*ProductHasImageQuery](), phiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (phiq *ProductHasImageQuery) CountX(ctx context.Context) int {
	count, err := phiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phiq *ProductHasImageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, phiq.ctx, ent.OpQueryExist)
	switch _, err := phiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (phiq *ProductHasImageQuery) ExistX(ctx context.Context) bool {
	exist, err := phiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductHasImageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phiq *ProductHasImageQuery) Clone() *ProductHasImageQuery {
	if phiq == nil {
		return nil
	}
	return &ProductHasImageQuery{
		config:      phiq.config,
		ctx:         phiq.ctx.Clone(),
		order:       append([]producthasimage.OrderOption{}, phiq.order...),
		inters:      append([]Interceptor{}, phiq.inters...),
		predicates:  append([]predicate.ProductHasImage{}, phiq.predicates...),
		withProduct: phiq.withProduct.Clone(),
		withImage:   phiq.withImage.Clone(),
		// clone intermediate query.
		sql:  phiq.sql.Clone(),
		path: phiq.path,
	}
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (phiq *ProductHasImageQuery) WithProduct(opts ...func(*ProductsQuery)) *ProductHasImageQuery {
	query := (&ProductsClient{config: phiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phiq.withProduct = query
	return phiq
}

// WithImage tells the query-builder to eager-load the nodes that are connected to
// the "image" edge. The optional arguments are used to configure the query builder of the edge.
func (phiq *ProductHasImageQuery) WithImage(opts ...func(*ImagesQuery)) *ProductHasImageQuery {
	query := (&ImagesClient{config: phiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phiq.withImage = query
	return phiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductHasImage.Query().
//		GroupBy(producthasimage.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (phiq *ProductHasImageQuery) GroupBy(field string, fields ...string) *ProductHasImageGroupBy {
	phiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductHasImageGroupBy{build: phiq}
	grbuild.flds = &phiq.ctx.Fields
	grbuild.label = producthasimage.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ProductHasImage.Query().
//		Select(producthasimage.FieldCreatedAt).
//		Scan(ctx, &v)
func (phiq *ProductHasImageQuery) Select(fields ...string) *ProductHasImageSelect {
	phiq.ctx.Fields = append(phiq.ctx.Fields, fields...)
	sbuild := &ProductHasImageSelect{ProductHasImageQuery: phiq}
	sbuild.label = producthasimage.Label
	sbuild.flds, sbuild.scan = &phiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductHasImageSelect configured with the given aggregations.
func (phiq *ProductHasImageQuery) Aggregate(fns ...AggregateFunc) *ProductHasImageSelect {
	return phiq.Select().Aggregate(fns...)
}

func (phiq *ProductHasImageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range phiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, phiq); err != nil {
				return err
			}
		}
	}
	for _, f := range phiq.ctx.Fields {
		if !producthasimage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phiq.path != nil {
		prev, err := phiq.path(ctx)
		if err != nil {
			return err
		}
		phiq.sql = prev
	}
	return nil
}

func (phiq *ProductHasImageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductHasImage, error) {
	var (
		nodes       = []*ProductHasImage{}
		_spec       = phiq.querySpec()
		loadedTypes = [2]bool{
			phiq.withProduct != nil,
			phiq.withImage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductHasImage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductHasImage{config: phiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, phiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := phiq.withProduct; query != nil {
		if err := phiq.loadProduct(ctx, query, nodes, nil,
			func(n *ProductHasImage, e *Products) { n.Edges.Product = e }); err != nil {
			return nil, err
		}
	}
	if query := phiq.withImage; query != nil {
		if err := phiq.loadImage(ctx, query, nodes, nil,
			func(n *ProductHasImage, e *Images) { n.Edges.Image = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (phiq *ProductHasImageQuery) loadProduct(ctx context.Context, query *ProductsQuery, nodes []*ProductHasImage, init func(*ProductHasImage), assign func(*ProductHasImage, *Products)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductHasImage)
	for i := range nodes {
		if nodes[i].ProductID == nil {
			continue
		}
		fk := *nodes[i].ProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(products.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phiq *ProductHasImageQuery) loadImage(ctx context.Context, query *ImagesQuery, nodes []*ProductHasImage, init func(*ProductHasImage), assign func(*ProductHasImage, *Images)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductHasImage)
	for i := range nodes {
		if nodes[i].ImageID == nil {
			continue
		}
		fk := *nodes[i].ImageID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(images.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (phiq *ProductHasImageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phiq.querySpec()
	_spec.Node.Columns = phiq.ctx.Fields
	if len(phiq.ctx.Fields) > 0 {
		_spec.Unique = phiq.ctx.Unique != nil && *phiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, phiq.driver, _spec)
}

func (phiq *ProductHasImageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(producthasimage.Table, producthasimage.Columns, sqlgraph.NewFieldSpec(producthasimage.FieldID, field.TypeInt))
	_spec.From = phiq.sql
	if unique := phiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if phiq.path != nil {
		_spec.Unique = true
	}
	if fields := phiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, producthasimage.FieldID)
		for i := range fields {
			if fields[i] != producthasimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if phiq.withProduct != nil {
			_spec.Node.AddColumnOnce(producthasimage.FieldProductID)
		}
		if phiq.withImage != nil {
			_spec.Node.AddColumnOnce(producthasimage.FieldImageID)
		}
	}
	if ps := phiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phiq *ProductHasImageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phiq.driver.Dialect())
	t1 := builder.Table(producthasimage.Table)
	columns := phiq.ctx.Fields
	if len(columns) == 0 {
		columns = producthasimage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phiq.sql != nil {
		selector = phiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phiq.ctx.Unique != nil && *phiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range phiq.predicates {
		p(selector)
	}
	for _, p := range phiq.order {
		p(selector)
	}
	if offset := phiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductHasImageGroupBy is the group-by builder for ProductHasImage entities.
type ProductHasImageGroupBy struct {
	selector
	build *ProductHasImageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phigb *ProductHasImageGroupBy) Aggregate(fns ...AggregateFunc) *ProductHasImageGroupBy {
	phigb.fns = append(phigb.fns, fns...)
	return phigb
}

// Scan applies the selector query and scans the result into the given value.
func (phigb *ProductHasImageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phigb.build.ctx, ent.OpQueryGroupBy)
	if err := phigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductHasImageQuery, *ProductHasImageGroupBy](ctx, phigb.build, phigb, phigb.build.inters, v)
}

func (phigb *ProductHasImageGroupBy) sqlScan(ctx context.Context, root *ProductHasImageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(phigb.fns))
	for _, fn := range phigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*phigb.flds)+len(phigb.fns))
		for _, f := range *phigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*phigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductHasImageSelect is the builder for selecting fields of ProductHasImage entities.
type ProductHasImageSelect struct {
	*ProductHasImageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (phis *ProductHasImageSelect) Aggregate(fns ...AggregateFunc) *ProductHasImageSelect {
	phis.fns = append(phis.fns, fns...)
	return phis
}

// Scan applies the selector query and scans the result into the given value.
func (phis *ProductHasImageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phis.ctx, ent.OpQuerySelect)
	if err := phis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductHasImageQuery, *ProductHasImageSelect](ctx, phis.ProductHasImageQuery, phis, phis.inters, v)
}

func (phis *ProductHasImageSelect) sqlScan(ctx context.Context, root *ProductHasImageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(phis.fns))
	for _, fn := range phis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*phis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
