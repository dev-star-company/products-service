// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/infotypes"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasinfo"
	"products-service/internal/app/ent/productinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductInfoUpdate is the builder for updating ProductInfo entities.
type ProductInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ProductInfoMutation
}

// Where appends a list predicates to the ProductInfoUpdate builder.
func (piu *ProductInfoUpdate) Where(ps ...predicate.ProductInfo) *ProductInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetDeletedAt sets the "deleted_at" field.
func (piu *ProductInfoUpdate) SetDeletedAt(t time.Time) *ProductInfoUpdate {
	piu.mutation.SetDeletedAt(t)
	return piu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableDeletedAt(t *time.Time) *ProductInfoUpdate {
	if t != nil {
		piu.SetDeletedAt(*t)
	}
	return piu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (piu *ProductInfoUpdate) ClearDeletedAt() *ProductInfoUpdate {
	piu.mutation.ClearDeletedAt()
	return piu
}

// SetInfoTypesID sets the "info_types_id" field.
func (piu *ProductInfoUpdate) SetInfoTypesID(i int) *ProductInfoUpdate {
	piu.mutation.SetInfoTypesID(i)
	return piu
}

// SetNillableInfoTypesID sets the "info_types_id" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableInfoTypesID(i *int) *ProductInfoUpdate {
	if i != nil {
		piu.SetInfoTypesID(*i)
	}
	return piu
}

// ClearInfoTypesID clears the value of the "info_types_id" field.
func (piu *ProductInfoUpdate) ClearInfoTypesID() *ProductInfoUpdate {
	piu.mutation.ClearInfoTypesID()
	return piu
}

// SetValue sets the "value" field.
func (piu *ProductInfoUpdate) SetValue(s string) *ProductInfoUpdate {
	piu.mutation.SetValue(s)
	return piu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableValue(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetValue(*s)
	}
	return piu
}

// SetInfoTypeID sets the "info_type" edge to the InfoTypes entity by ID.
func (piu *ProductInfoUpdate) SetInfoTypeID(id int) *ProductInfoUpdate {
	piu.mutation.SetInfoTypeID(id)
	return piu
}

// SetNillableInfoTypeID sets the "info_type" edge to the InfoTypes entity by ID if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableInfoTypeID(id *int) *ProductInfoUpdate {
	if id != nil {
		piu = piu.SetInfoTypeID(*id)
	}
	return piu
}

// SetInfoType sets the "info_type" edge to the InfoTypes entity.
func (piu *ProductInfoUpdate) SetInfoType(i *InfoTypes) *ProductInfoUpdate {
	return piu.SetInfoTypeID(i.ID)
}

// AddProductHasInfoIDs adds the "product_has_info" edge to the ProductHasInfo entity by IDs.
func (piu *ProductInfoUpdate) AddProductHasInfoIDs(ids ...int) *ProductInfoUpdate {
	piu.mutation.AddProductHasInfoIDs(ids...)
	return piu
}

// AddProductHasInfo adds the "product_has_info" edges to the ProductHasInfo entity.
func (piu *ProductInfoUpdate) AddProductHasInfo(p ...*ProductHasInfo) *ProductInfoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddProductHasInfoIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (piu *ProductInfoUpdate) Mutation() *ProductInfoMutation {
	return piu.mutation
}

// ClearInfoType clears the "info_type" edge to the InfoTypes entity.
func (piu *ProductInfoUpdate) ClearInfoType() *ProductInfoUpdate {
	piu.mutation.ClearInfoType()
	return piu
}

// ClearProductHasInfo clears all "product_has_info" edges to the ProductHasInfo entity.
func (piu *ProductInfoUpdate) ClearProductHasInfo() *ProductInfoUpdate {
	piu.mutation.ClearProductHasInfo()
	return piu
}

// RemoveProductHasInfoIDs removes the "product_has_info" edge to ProductHasInfo entities by IDs.
func (piu *ProductInfoUpdate) RemoveProductHasInfoIDs(ids ...int) *ProductInfoUpdate {
	piu.mutation.RemoveProductHasInfoIDs(ids...)
	return piu
}

// RemoveProductHasInfo removes "product_has_info" edges to ProductHasInfo entities.
func (piu *ProductInfoUpdate) RemoveProductHasInfo(p ...*ProductHasInfo) *ProductInfoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveProductHasInfoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProductInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProductInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProductInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProductInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *ProductInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productinfo.Table, productinfo.Columns, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.DeletedAt(); ok {
		_spec.SetField(productinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if piu.mutation.DeletedAtCleared() {
		_spec.ClearField(productinfo.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := piu.mutation.Value(); ok {
		_spec.SetField(productinfo.FieldValue, field.TypeString, value)
	}
	if piu.mutation.InfoTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productinfo.InfoTypeTable,
			Columns: []string{productinfo.InfoTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(infotypes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.InfoTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productinfo.InfoTypeTable,
			Columns: []string{productinfo.InfoTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(infotypes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.ProductHasInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductHasInfoTable,
			Columns: []string{productinfo.ProductHasInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedProductHasInfoIDs(); len(nodes) > 0 && !piu.mutation.ProductHasInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductHasInfoTable,
			Columns: []string{productinfo.ProductHasInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProductHasInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductHasInfoTable,
			Columns: []string{productinfo.ProductHasInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProductInfoUpdateOne is the builder for updating a single ProductInfo entity.
type ProductInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductInfoMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (piuo *ProductInfoUpdateOne) SetDeletedAt(t time.Time) *ProductInfoUpdateOne {
	piuo.mutation.SetDeletedAt(t)
	return piuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductInfoUpdateOne {
	if t != nil {
		piuo.SetDeletedAt(*t)
	}
	return piuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (piuo *ProductInfoUpdateOne) ClearDeletedAt() *ProductInfoUpdateOne {
	piuo.mutation.ClearDeletedAt()
	return piuo
}

// SetInfoTypesID sets the "info_types_id" field.
func (piuo *ProductInfoUpdateOne) SetInfoTypesID(i int) *ProductInfoUpdateOne {
	piuo.mutation.SetInfoTypesID(i)
	return piuo
}

// SetNillableInfoTypesID sets the "info_types_id" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableInfoTypesID(i *int) *ProductInfoUpdateOne {
	if i != nil {
		piuo.SetInfoTypesID(*i)
	}
	return piuo
}

// ClearInfoTypesID clears the value of the "info_types_id" field.
func (piuo *ProductInfoUpdateOne) ClearInfoTypesID() *ProductInfoUpdateOne {
	piuo.mutation.ClearInfoTypesID()
	return piuo
}

// SetValue sets the "value" field.
func (piuo *ProductInfoUpdateOne) SetValue(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetValue(s)
	return piuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableValue(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetValue(*s)
	}
	return piuo
}

// SetInfoTypeID sets the "info_type" edge to the InfoTypes entity by ID.
func (piuo *ProductInfoUpdateOne) SetInfoTypeID(id int) *ProductInfoUpdateOne {
	piuo.mutation.SetInfoTypeID(id)
	return piuo
}

// SetNillableInfoTypeID sets the "info_type" edge to the InfoTypes entity by ID if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableInfoTypeID(id *int) *ProductInfoUpdateOne {
	if id != nil {
		piuo = piuo.SetInfoTypeID(*id)
	}
	return piuo
}

// SetInfoType sets the "info_type" edge to the InfoTypes entity.
func (piuo *ProductInfoUpdateOne) SetInfoType(i *InfoTypes) *ProductInfoUpdateOne {
	return piuo.SetInfoTypeID(i.ID)
}

// AddProductHasInfoIDs adds the "product_has_info" edge to the ProductHasInfo entity by IDs.
func (piuo *ProductInfoUpdateOne) AddProductHasInfoIDs(ids ...int) *ProductInfoUpdateOne {
	piuo.mutation.AddProductHasInfoIDs(ids...)
	return piuo
}

// AddProductHasInfo adds the "product_has_info" edges to the ProductHasInfo entity.
func (piuo *ProductInfoUpdateOne) AddProductHasInfo(p ...*ProductHasInfo) *ProductInfoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddProductHasInfoIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (piuo *ProductInfoUpdateOne) Mutation() *ProductInfoMutation {
	return piuo.mutation
}

// ClearInfoType clears the "info_type" edge to the InfoTypes entity.
func (piuo *ProductInfoUpdateOne) ClearInfoType() *ProductInfoUpdateOne {
	piuo.mutation.ClearInfoType()
	return piuo
}

// ClearProductHasInfo clears all "product_has_info" edges to the ProductHasInfo entity.
func (piuo *ProductInfoUpdateOne) ClearProductHasInfo() *ProductInfoUpdateOne {
	piuo.mutation.ClearProductHasInfo()
	return piuo
}

// RemoveProductHasInfoIDs removes the "product_has_info" edge to ProductHasInfo entities by IDs.
func (piuo *ProductInfoUpdateOne) RemoveProductHasInfoIDs(ids ...int) *ProductInfoUpdateOne {
	piuo.mutation.RemoveProductHasInfoIDs(ids...)
	return piuo
}

// RemoveProductHasInfo removes "product_has_info" edges to ProductHasInfo entities.
func (piuo *ProductInfoUpdateOne) RemoveProductHasInfo(p ...*ProductHasInfo) *ProductInfoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveProductHasInfoIDs(ids...)
}

// Where appends a list predicates to the ProductInfoUpdate builder.
func (piuo *ProductInfoUpdateOne) Where(ps ...predicate.ProductInfo) *ProductInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProductInfoUpdateOne) Select(field string, fields ...string) *ProductInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProductInfo entity.
func (piuo *ProductInfoUpdateOne) Save(ctx context.Context) (*ProductInfo, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProductInfoUpdateOne) SaveX(ctx context.Context) *ProductInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProductInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProductInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *ProductInfoUpdateOne) sqlSave(ctx context.Context) (_node *ProductInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(productinfo.Table, productinfo.Columns, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productinfo.FieldID)
		for _, f := range fields {
			if !productinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.DeletedAt(); ok {
		_spec.SetField(productinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if piuo.mutation.DeletedAtCleared() {
		_spec.ClearField(productinfo.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := piuo.mutation.Value(); ok {
		_spec.SetField(productinfo.FieldValue, field.TypeString, value)
	}
	if piuo.mutation.InfoTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productinfo.InfoTypeTable,
			Columns: []string{productinfo.InfoTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(infotypes.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.InfoTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productinfo.InfoTypeTable,
			Columns: []string{productinfo.InfoTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(infotypes.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.ProductHasInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductHasInfoTable,
			Columns: []string{productinfo.ProductHasInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedProductHasInfoIDs(); len(nodes) > 0 && !piuo.mutation.ProductHasInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductHasInfoTable,
			Columns: []string{productinfo.ProductHasInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProductHasInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productinfo.ProductHasInfoTable,
			Columns: []string{productinfo.ProductHasInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
