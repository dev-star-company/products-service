// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/featuresvaluestypes"
	"products-service/internal/app/ent/productinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesValuesTypesCreate is the builder for creating a FeaturesValuesTypes entity.
type FeaturesValuesTypesCreate struct {
	config
	mutation *FeaturesValuesTypesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fvtc *FeaturesValuesTypesCreate) SetCreatedAt(t time.Time) *FeaturesValuesTypesCreate {
	fvtc.mutation.SetCreatedAt(t)
	return fvtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fvtc *FeaturesValuesTypesCreate) SetNillableCreatedAt(t *time.Time) *FeaturesValuesTypesCreate {
	if t != nil {
		fvtc.SetCreatedAt(*t)
	}
	return fvtc
}

// SetDeletedAt sets the "deleted_at" field.
func (fvtc *FeaturesValuesTypesCreate) SetDeletedAt(t time.Time) *FeaturesValuesTypesCreate {
	fvtc.mutation.SetDeletedAt(t)
	return fvtc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fvtc *FeaturesValuesTypesCreate) SetNillableDeletedAt(t *time.Time) *FeaturesValuesTypesCreate {
	if t != nil {
		fvtc.SetDeletedAt(*t)
	}
	return fvtc
}

// SetName sets the "name" field.
func (fvtc *FeaturesValuesTypesCreate) SetName(s string) *FeaturesValuesTypesCreate {
	fvtc.mutation.SetName(s)
	return fvtc
}

// AddProductInfoIDs adds the "product_info" edge to the ProductInfo entity by IDs.
func (fvtc *FeaturesValuesTypesCreate) AddProductInfoIDs(ids ...int) *FeaturesValuesTypesCreate {
	fvtc.mutation.AddProductInfoIDs(ids...)
	return fvtc
}

// AddProductInfo adds the "product_info" edges to the ProductInfo entity.
func (fvtc *FeaturesValuesTypesCreate) AddProductInfo(p ...*ProductInfo) *FeaturesValuesTypesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fvtc.AddProductInfoIDs(ids...)
}

// AddFeatureValueIDs adds the "feature_values" edge to the FeaturesValues entity by IDs.
func (fvtc *FeaturesValuesTypesCreate) AddFeatureValueIDs(ids ...int) *FeaturesValuesTypesCreate {
	fvtc.mutation.AddFeatureValueIDs(ids...)
	return fvtc
}

// AddFeatureValues adds the "feature_values" edges to the FeaturesValues entity.
func (fvtc *FeaturesValuesTypesCreate) AddFeatureValues(f ...*FeaturesValues) *FeaturesValuesTypesCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fvtc.AddFeatureValueIDs(ids...)
}

// Mutation returns the FeaturesValuesTypesMutation object of the builder.
func (fvtc *FeaturesValuesTypesCreate) Mutation() *FeaturesValuesTypesMutation {
	return fvtc.mutation
}

// Save creates the FeaturesValuesTypes in the database.
func (fvtc *FeaturesValuesTypesCreate) Save(ctx context.Context) (*FeaturesValuesTypes, error) {
	fvtc.defaults()
	return withHooks(ctx, fvtc.sqlSave, fvtc.mutation, fvtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fvtc *FeaturesValuesTypesCreate) SaveX(ctx context.Context) *FeaturesValuesTypes {
	v, err := fvtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fvtc *FeaturesValuesTypesCreate) Exec(ctx context.Context) error {
	_, err := fvtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvtc *FeaturesValuesTypesCreate) ExecX(ctx context.Context) {
	if err := fvtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fvtc *FeaturesValuesTypesCreate) defaults() {
	if _, ok := fvtc.mutation.CreatedAt(); !ok {
		v := featuresvaluestypes.DefaultCreatedAt()
		fvtc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvtc *FeaturesValuesTypesCreate) check() error {
	if _, ok := fvtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FeaturesValuesTypes.created_at"`)}
	}
	if _, ok := fvtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FeaturesValuesTypes.name"`)}
	}
	return nil
}

func (fvtc *FeaturesValuesTypesCreate) sqlSave(ctx context.Context) (*FeaturesValuesTypes, error) {
	if err := fvtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fvtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fvtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fvtc.mutation.id = &_node.ID
	fvtc.mutation.done = true
	return _node, nil
}

func (fvtc *FeaturesValuesTypesCreate) createSpec() (*FeaturesValuesTypes, *sqlgraph.CreateSpec) {
	var (
		_node = &FeaturesValuesTypes{config: fvtc.config}
		_spec = sqlgraph.NewCreateSpec(featuresvaluestypes.Table, sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt))
	)
	if value, ok := fvtc.mutation.CreatedAt(); ok {
		_spec.SetField(featuresvaluestypes.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fvtc.mutation.DeletedAt(); ok {
		_spec.SetField(featuresvaluestypes.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fvtc.mutation.Name(); ok {
		_spec.SetField(featuresvaluestypes.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if nodes := fvtc.mutation.ProductInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.ProductInfoTable,
			Columns: []string{featuresvaluestypes.ProductInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fvtc.mutation.FeatureValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   featuresvaluestypes.FeatureValuesTable,
			Columns: []string{featuresvaluestypes.FeatureValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(featuresvalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeaturesValuesTypesCreateBulk is the builder for creating many FeaturesValuesTypes entities in bulk.
type FeaturesValuesTypesCreateBulk struct {
	config
	err      error
	builders []*FeaturesValuesTypesCreate
}

// Save creates the FeaturesValuesTypes entities in the database.
func (fvtcb *FeaturesValuesTypesCreateBulk) Save(ctx context.Context) ([]*FeaturesValuesTypes, error) {
	if fvtcb.err != nil {
		return nil, fvtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fvtcb.builders))
	nodes := make([]*FeaturesValuesTypes, len(fvtcb.builders))
	mutators := make([]Mutator, len(fvtcb.builders))
	for i := range fvtcb.builders {
		func(i int, root context.Context) {
			builder := fvtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeaturesValuesTypesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fvtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fvtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fvtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fvtcb *FeaturesValuesTypesCreateBulk) SaveX(ctx context.Context) []*FeaturesValuesTypes {
	v, err := fvtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fvtcb *FeaturesValuesTypesCreateBulk) Exec(ctx context.Context) error {
	_, err := fvtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvtcb *FeaturesValuesTypesCreateBulk) ExecX(ctx context.Context) {
	if err := fvtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
