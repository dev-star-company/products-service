// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/toolhasproduct"
	"products-service/internal/app/ent/tools"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ToolsUpdate is the builder for updating Tools entities.
type ToolsUpdate struct {
	config
	hooks    []Hook
	mutation *ToolsMutation
}

// Where appends a list predicates to the ToolsUpdate builder.
func (tu *ToolsUpdate) Where(ps ...predicate.Tools) *ToolsUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *ToolsUpdate) SetUpdatedAt(t time.Time) *ToolsUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *ToolsUpdate) SetDeletedAt(t time.Time) *ToolsUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *ToolsUpdate) SetNillableDeletedAt(t *time.Time) *ToolsUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *ToolsUpdate) ClearDeletedAt() *ToolsUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetUpdatedBy sets the "updated_by" field.
func (tu *ToolsUpdate) SetUpdatedBy(i int) *ToolsUpdate {
	tu.mutation.ResetUpdatedBy()
	tu.mutation.SetUpdatedBy(i)
	return tu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tu *ToolsUpdate) SetNillableUpdatedBy(i *int) *ToolsUpdate {
	if i != nil {
		tu.SetUpdatedBy(*i)
	}
	return tu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tu *ToolsUpdate) AddUpdatedBy(i int) *ToolsUpdate {
	tu.mutation.AddUpdatedBy(i)
	return tu
}

// SetDeletedBy sets the "deleted_by" field.
func (tu *ToolsUpdate) SetDeletedBy(i int) *ToolsUpdate {
	tu.mutation.ResetDeletedBy()
	tu.mutation.SetDeletedBy(i)
	return tu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tu *ToolsUpdate) SetNillableDeletedBy(i *int) *ToolsUpdate {
	if i != nil {
		tu.SetDeletedBy(*i)
	}
	return tu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (tu *ToolsUpdate) AddDeletedBy(i int) *ToolsUpdate {
	tu.mutation.AddDeletedBy(i)
	return tu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tu *ToolsUpdate) ClearDeletedBy() *ToolsUpdate {
	tu.mutation.ClearDeletedBy()
	return tu
}

// SetName sets the "name" field.
func (tu *ToolsUpdate) SetName(s string) *ToolsUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *ToolsUpdate) SetNillableName(s *string) *ToolsUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// AddToolHasProductIDs adds the "tool_has_product" edge to the ToolHasProduct entity by IDs.
func (tu *ToolsUpdate) AddToolHasProductIDs(ids ...int) *ToolsUpdate {
	tu.mutation.AddToolHasProductIDs(ids...)
	return tu
}

// AddToolHasProduct adds the "tool_has_product" edges to the ToolHasProduct entity.
func (tu *ToolsUpdate) AddToolHasProduct(t ...*ToolHasProduct) *ToolsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddToolHasProductIDs(ids...)
}

// Mutation returns the ToolsMutation object of the builder.
func (tu *ToolsUpdate) Mutation() *ToolsMutation {
	return tu.mutation
}

// ClearToolHasProduct clears all "tool_has_product" edges to the ToolHasProduct entity.
func (tu *ToolsUpdate) ClearToolHasProduct() *ToolsUpdate {
	tu.mutation.ClearToolHasProduct()
	return tu
}

// RemoveToolHasProductIDs removes the "tool_has_product" edge to ToolHasProduct entities by IDs.
func (tu *ToolsUpdate) RemoveToolHasProductIDs(ids ...int) *ToolsUpdate {
	tu.mutation.RemoveToolHasProductIDs(ids...)
	return tu
}

// RemoveToolHasProduct removes "tool_has_product" edges to ToolHasProduct entities.
func (tu *ToolsUpdate) RemoveToolHasProduct(t ...*ToolHasProduct) *ToolsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveToolHasProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ToolsUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ToolsUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ToolsUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ToolsUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *ToolsUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tools.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *ToolsUpdate) check() error {
	if v, ok := tu.mutation.UpdatedBy(); ok {
		if err := tools.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Tools.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tu *ToolsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tools.Table, tools.Columns, sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tools.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(tools.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(tools.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedBy(); ok {
		_spec.SetField(tools.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(tools.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := tu.mutation.DeletedBy(); ok {
		_spec.SetField(tools.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(tools.FieldDeletedBy, field.TypeInt, value)
	}
	if tu.mutation.DeletedByCleared() {
		_spec.ClearField(tools.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tools.FieldName, field.TypeString, value)
	}
	if tu.mutation.ToolHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tools.ToolHasProductTable,
			Columns: []string{tools.ToolHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedToolHasProductIDs(); len(nodes) > 0 && !tu.mutation.ToolHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tools.ToolHasProductTable,
			Columns: []string{tools.ToolHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ToolHasProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tools.ToolHasProductTable,
			Columns: []string{tools.ToolHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tools.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ToolsUpdateOne is the builder for updating a single Tools entity.
type ToolsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToolsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *ToolsUpdateOne) SetUpdatedAt(t time.Time) *ToolsUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *ToolsUpdateOne) SetDeletedAt(t time.Time) *ToolsUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *ToolsUpdateOne) SetNillableDeletedAt(t *time.Time) *ToolsUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *ToolsUpdateOne) ClearDeletedAt() *ToolsUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tuo *ToolsUpdateOne) SetUpdatedBy(i int) *ToolsUpdateOne {
	tuo.mutation.ResetUpdatedBy()
	tuo.mutation.SetUpdatedBy(i)
	return tuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tuo *ToolsUpdateOne) SetNillableUpdatedBy(i *int) *ToolsUpdateOne {
	if i != nil {
		tuo.SetUpdatedBy(*i)
	}
	return tuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (tuo *ToolsUpdateOne) AddUpdatedBy(i int) *ToolsUpdateOne {
	tuo.mutation.AddUpdatedBy(i)
	return tuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tuo *ToolsUpdateOne) SetDeletedBy(i int) *ToolsUpdateOne {
	tuo.mutation.ResetDeletedBy()
	tuo.mutation.SetDeletedBy(i)
	return tuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tuo *ToolsUpdateOne) SetNillableDeletedBy(i *int) *ToolsUpdateOne {
	if i != nil {
		tuo.SetDeletedBy(*i)
	}
	return tuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (tuo *ToolsUpdateOne) AddDeletedBy(i int) *ToolsUpdateOne {
	tuo.mutation.AddDeletedBy(i)
	return tuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tuo *ToolsUpdateOne) ClearDeletedBy() *ToolsUpdateOne {
	tuo.mutation.ClearDeletedBy()
	return tuo
}

// SetName sets the "name" field.
func (tuo *ToolsUpdateOne) SetName(s string) *ToolsUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *ToolsUpdateOne) SetNillableName(s *string) *ToolsUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// AddToolHasProductIDs adds the "tool_has_product" edge to the ToolHasProduct entity by IDs.
func (tuo *ToolsUpdateOne) AddToolHasProductIDs(ids ...int) *ToolsUpdateOne {
	tuo.mutation.AddToolHasProductIDs(ids...)
	return tuo
}

// AddToolHasProduct adds the "tool_has_product" edges to the ToolHasProduct entity.
func (tuo *ToolsUpdateOne) AddToolHasProduct(t ...*ToolHasProduct) *ToolsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddToolHasProductIDs(ids...)
}

// Mutation returns the ToolsMutation object of the builder.
func (tuo *ToolsUpdateOne) Mutation() *ToolsMutation {
	return tuo.mutation
}

// ClearToolHasProduct clears all "tool_has_product" edges to the ToolHasProduct entity.
func (tuo *ToolsUpdateOne) ClearToolHasProduct() *ToolsUpdateOne {
	tuo.mutation.ClearToolHasProduct()
	return tuo
}

// RemoveToolHasProductIDs removes the "tool_has_product" edge to ToolHasProduct entities by IDs.
func (tuo *ToolsUpdateOne) RemoveToolHasProductIDs(ids ...int) *ToolsUpdateOne {
	tuo.mutation.RemoveToolHasProductIDs(ids...)
	return tuo
}

// RemoveToolHasProduct removes "tool_has_product" edges to ToolHasProduct entities.
func (tuo *ToolsUpdateOne) RemoveToolHasProduct(t ...*ToolHasProduct) *ToolsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveToolHasProductIDs(ids...)
}

// Where appends a list predicates to the ToolsUpdate builder.
func (tuo *ToolsUpdateOne) Where(ps ...predicate.Tools) *ToolsUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ToolsUpdateOne) Select(field string, fields ...string) *ToolsUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tools entity.
func (tuo *ToolsUpdateOne) Save(ctx context.Context) (*Tools, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ToolsUpdateOne) SaveX(ctx context.Context) *Tools {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ToolsUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ToolsUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *ToolsUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tools.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *ToolsUpdateOne) check() error {
	if v, ok := tuo.mutation.UpdatedBy(); ok {
		if err := tools.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Tools.updated_by": %w`, err)}
		}
	}
	return nil
}

func (tuo *ToolsUpdateOne) sqlSave(ctx context.Context) (_node *Tools, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tools.Table, tools.Columns, sqlgraph.NewFieldSpec(tools.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tools.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tools.FieldID)
		for _, f := range fields {
			if !tools.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tools.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tools.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(tools.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tools.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tools.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(tools.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.DeletedBy(); ok {
		_spec.SetField(tools.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(tools.FieldDeletedBy, field.TypeInt, value)
	}
	if tuo.mutation.DeletedByCleared() {
		_spec.ClearField(tools.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tools.FieldName, field.TypeString, value)
	}
	if tuo.mutation.ToolHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tools.ToolHasProductTable,
			Columns: []string{tools.ToolHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedToolHasProductIDs(); len(nodes) > 0 && !tuo.mutation.ToolHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tools.ToolHasProductTable,
			Columns: []string{tools.ToolHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ToolHasProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tools.ToolHasProductTable,
			Columns: []string{tools.ToolHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toolhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tools{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tools.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
