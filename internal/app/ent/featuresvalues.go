// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FeaturesValues is the model entity for the FeaturesValues schema.
type FeaturesValues struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// FeatureID holds the value of the "feature_id" field.
	FeatureID *int `json:"feature_id,omitempty"`
	// FeatureUnitValuesID holds the value of the "feature_unit_values_id" field.
	FeatureUnitValuesID *int `json:"feature_unit_values_id,omitempty"`
	// FeatureValuesID holds the value of the "feature_values_id" field.
	FeatureValuesID *int `json:"feature_values_id,omitempty"`
	// Value holds the value of the "value" field.
	Value *string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeaturesValuesQuery when eager-loading is set.
	Edges                                FeaturesValuesEdges `json:"edges"`
	features_values_types_feature_values *int
	selectValues                         sql.SelectValues
}

// FeaturesValuesEdges holds the relations/edges for other nodes in the graph.
type FeaturesValuesEdges struct {
	// Feature holds the value of the feature edge.
	Feature *Features `json:"feature,omitempty"`
	// FeatureUnitValues holds the value of the feature_unit_values edge.
	FeatureUnitValues *FeaturesUnitValues `json:"feature_unit_values,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeatureOrErr returns the Feature value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeaturesValuesEdges) FeatureOrErr() (*Features, error) {
	if e.Feature != nil {
		return e.Feature, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: features.Label}
	}
	return nil, &NotLoadedError{edge: "feature"}
}

// FeatureUnitValuesOrErr returns the FeatureUnitValues value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeaturesValuesEdges) FeatureUnitValuesOrErr() (*FeaturesUnitValues, error) {
	if e.FeatureUnitValues != nil {
		return e.FeatureUnitValues, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: featuresunitvalues.Label}
	}
	return nil, &NotLoadedError{edge: "feature_unit_values"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeaturesValues) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case featuresvalues.FieldID, featuresvalues.FieldCreatedBy, featuresvalues.FieldUpdatedBy, featuresvalues.FieldDeletedBy, featuresvalues.FieldFeatureID, featuresvalues.FieldFeatureUnitValuesID, featuresvalues.FieldFeatureValuesID:
			values[i] = new(sql.NullInt64)
		case featuresvalues.FieldValue:
			values[i] = new(sql.NullString)
		case featuresvalues.FieldCreatedAt, featuresvalues.FieldUpdatedAt, featuresvalues.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case featuresvalues.ForeignKeys[0]: // features_values_types_feature_values
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeaturesValues fields.
func (fv *FeaturesValues) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case featuresvalues.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fv.ID = int(value.Int64)
		case featuresvalues.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fv.CreatedAt = value.Time
			}
		case featuresvalues.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fv.UpdatedAt = value.Time
			}
		case featuresvalues.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fv.DeletedAt = new(time.Time)
				*fv.DeletedAt = value.Time
			}
		case featuresvalues.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fv.CreatedBy = int(value.Int64)
			}
		case featuresvalues.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fv.UpdatedBy = int(value.Int64)
			}
		case featuresvalues.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				fv.DeletedBy = new(int)
				*fv.DeletedBy = int(value.Int64)
			}
		case featuresvalues.FieldFeatureID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature_id", values[i])
			} else if value.Valid {
				fv.FeatureID = new(int)
				*fv.FeatureID = int(value.Int64)
			}
		case featuresvalues.FieldFeatureUnitValuesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature_unit_values_id", values[i])
			} else if value.Valid {
				fv.FeatureUnitValuesID = new(int)
				*fv.FeatureUnitValuesID = int(value.Int64)
			}
		case featuresvalues.FieldFeatureValuesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature_values_id", values[i])
			} else if value.Valid {
				fv.FeatureValuesID = new(int)
				*fv.FeatureValuesID = int(value.Int64)
			}
		case featuresvalues.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				fv.Value = new(string)
				*fv.Value = value.String
			}
		case featuresvalues.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field features_values_types_feature_values", value)
			} else if value.Valid {
				fv.features_values_types_feature_values = new(int)
				*fv.features_values_types_feature_values = int(value.Int64)
			}
		default:
			fv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the FeaturesValues.
// This includes values selected through modifiers, order, etc.
func (fv *FeaturesValues) GetValue(name string) (ent.Value, error) {
	return fv.selectValues.Get(name)
}

// QueryFeature queries the "feature" edge of the FeaturesValues entity.
func (fv *FeaturesValues) QueryFeature() *FeaturesQuery {
	return NewFeaturesValuesClient(fv.config).QueryFeature(fv)
}

// QueryFeatureUnitValues queries the "feature_unit_values" edge of the FeaturesValues entity.
func (fv *FeaturesValues) QueryFeatureUnitValues() *FeaturesUnitValuesQuery {
	return NewFeaturesValuesClient(fv.config).QueryFeatureUnitValues(fv)
}

// Update returns a builder for updating this FeaturesValues.
// Note that you need to call FeaturesValues.Unwrap() before calling this method if this FeaturesValues
// was returned from a transaction, and the transaction was committed or rolled back.
func (fv *FeaturesValues) Update() *FeaturesValuesUpdateOne {
	return NewFeaturesValuesClient(fv.config).UpdateOne(fv)
}

// Unwrap unwraps the FeaturesValues entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fv *FeaturesValues) Unwrap() *FeaturesValues {
	_tx, ok := fv.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeaturesValues is not a transactional entity")
	}
	fv.config.driver = _tx.drv
	return fv
}

// String implements the fmt.Stringer.
func (fv *FeaturesValues) String() string {
	var builder strings.Builder
	builder.WriteString("FeaturesValues(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fv.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fv.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := fv.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fv.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fv.UpdatedBy))
	builder.WriteString(", ")
	if v := fv.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := fv.FeatureID; v != nil {
		builder.WriteString("feature_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := fv.FeatureUnitValuesID; v != nil {
		builder.WriteString("feature_unit_values_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := fv.FeatureValuesID; v != nil {
		builder.WriteString("feature_values_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := fv.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// FeaturesValuesSlice is a parsable slice of FeaturesValues.
type FeaturesValuesSlice []*FeaturesValues
