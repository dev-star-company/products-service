// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/imagefoldersource"
	"products-service/internal/app/ent/images"
	"products-service/internal/app/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderPathQuery is the builder for querying ImageFolderPath entities.
type ImageFolderPathQuery struct {
	config
	ctx                   *QueryContext
	order                 []imagefolderpath.OrderOption
	inters                []Interceptor
	predicates            []predicate.ImageFolderPath
	withImageFolderSource *ImageFolderSourceQuery
	withImages            *ImagesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ImageFolderPathQuery builder.
func (ifpq *ImageFolderPathQuery) Where(ps ...predicate.ImageFolderPath) *ImageFolderPathQuery {
	ifpq.predicates = append(ifpq.predicates, ps...)
	return ifpq
}

// Limit the number of records to be returned by this query.
func (ifpq *ImageFolderPathQuery) Limit(limit int) *ImageFolderPathQuery {
	ifpq.ctx.Limit = &limit
	return ifpq
}

// Offset to start from.
func (ifpq *ImageFolderPathQuery) Offset(offset int) *ImageFolderPathQuery {
	ifpq.ctx.Offset = &offset
	return ifpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ifpq *ImageFolderPathQuery) Unique(unique bool) *ImageFolderPathQuery {
	ifpq.ctx.Unique = &unique
	return ifpq
}

// Order specifies how the records should be ordered.
func (ifpq *ImageFolderPathQuery) Order(o ...imagefolderpath.OrderOption) *ImageFolderPathQuery {
	ifpq.order = append(ifpq.order, o...)
	return ifpq
}

// QueryImageFolderSource chains the current query on the "image_folder_source" edge.
func (ifpq *ImageFolderPathQuery) QueryImageFolderSource() *ImageFolderSourceQuery {
	query := (&ImageFolderSourceClient{config: ifpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ifpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ifpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagefolderpath.Table, imagefolderpath.FieldID, selector),
			sqlgraph.To(imagefoldersource.Table, imagefoldersource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, imagefolderpath.ImageFolderSourceTable, imagefolderpath.ImageFolderSourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ifpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImages chains the current query on the "images" edge.
func (ifpq *ImageFolderPathQuery) QueryImages() *ImagesQuery {
	query := (&ImagesClient{config: ifpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ifpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ifpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagefolderpath.Table, imagefolderpath.FieldID, selector),
			sqlgraph.To(images.Table, images.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, imagefolderpath.ImagesTable, imagefolderpath.ImagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ifpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ImageFolderPath entity from the query.
// Returns a *NotFoundError when no ImageFolderPath was found.
func (ifpq *ImageFolderPathQuery) First(ctx context.Context) (*ImageFolderPath, error) {
	nodes, err := ifpq.Limit(1).All(setContextOp(ctx, ifpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{imagefolderpath.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) FirstX(ctx context.Context) *ImageFolderPath {
	node, err := ifpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ImageFolderPath ID from the query.
// Returns a *NotFoundError when no ImageFolderPath ID was found.
func (ifpq *ImageFolderPathQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifpq.Limit(1).IDs(setContextOp(ctx, ifpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{imagefolderpath.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) FirstIDX(ctx context.Context) int {
	id, err := ifpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ImageFolderPath entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ImageFolderPath entity is found.
// Returns a *NotFoundError when no ImageFolderPath entities are found.
func (ifpq *ImageFolderPathQuery) Only(ctx context.Context) (*ImageFolderPath, error) {
	nodes, err := ifpq.Limit(2).All(setContextOp(ctx, ifpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{imagefolderpath.Label}
	default:
		return nil, &NotSingularError{imagefolderpath.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) OnlyX(ctx context.Context) *ImageFolderPath {
	node, err := ifpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ImageFolderPath ID in the query.
// Returns a *NotSingularError when more than one ImageFolderPath ID is found.
// Returns a *NotFoundError when no entities are found.
func (ifpq *ImageFolderPathQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ifpq.Limit(2).IDs(setContextOp(ctx, ifpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{imagefolderpath.Label}
	default:
		err = &NotSingularError{imagefolderpath.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) OnlyIDX(ctx context.Context) int {
	id, err := ifpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ImageFolderPaths.
func (ifpq *ImageFolderPathQuery) All(ctx context.Context) ([]*ImageFolderPath, error) {
	ctx = setContextOp(ctx, ifpq.ctx, ent.OpQueryAll)
	if err := ifpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ImageFolderPath, *ImageFolderPathQuery]()
	return withInterceptors[[]*ImageFolderPath](ctx, ifpq, qr, ifpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) AllX(ctx context.Context) []*ImageFolderPath {
	nodes, err := ifpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ImageFolderPath IDs.
func (ifpq *ImageFolderPathQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ifpq.ctx.Unique == nil && ifpq.path != nil {
		ifpq.Unique(true)
	}
	ctx = setContextOp(ctx, ifpq.ctx, ent.OpQueryIDs)
	if err = ifpq.Select(imagefolderpath.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) IDsX(ctx context.Context) []int {
	ids, err := ifpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ifpq *ImageFolderPathQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ifpq.ctx, ent.OpQueryCount)
	if err := ifpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ifpq, querierCount[*ImageFolderPathQuery](), ifpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) CountX(ctx context.Context) int {
	count, err := ifpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ifpq *ImageFolderPathQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ifpq.ctx, ent.OpQueryExist)
	switch _, err := ifpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ifpq *ImageFolderPathQuery) ExistX(ctx context.Context) bool {
	exist, err := ifpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ImageFolderPathQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ifpq *ImageFolderPathQuery) Clone() *ImageFolderPathQuery {
	if ifpq == nil {
		return nil
	}
	return &ImageFolderPathQuery{
		config:                ifpq.config,
		ctx:                   ifpq.ctx.Clone(),
		order:                 append([]imagefolderpath.OrderOption{}, ifpq.order...),
		inters:                append([]Interceptor{}, ifpq.inters...),
		predicates:            append([]predicate.ImageFolderPath{}, ifpq.predicates...),
		withImageFolderSource: ifpq.withImageFolderSource.Clone(),
		withImages:            ifpq.withImages.Clone(),
		// clone intermediate query.
		sql:  ifpq.sql.Clone(),
		path: ifpq.path,
	}
}

// WithImageFolderSource tells the query-builder to eager-load the nodes that are connected to
// the "image_folder_source" edge. The optional arguments are used to configure the query builder of the edge.
func (ifpq *ImageFolderPathQuery) WithImageFolderSource(opts ...func(*ImageFolderSourceQuery)) *ImageFolderPathQuery {
	query := (&ImageFolderSourceClient{config: ifpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ifpq.withImageFolderSource = query
	return ifpq
}

// WithImages tells the query-builder to eager-load the nodes that are connected to
// the "images" edge. The optional arguments are used to configure the query builder of the edge.
func (ifpq *ImageFolderPathQuery) WithImages(opts ...func(*ImagesQuery)) *ImageFolderPathQuery {
	query := (&ImagesClient{config: ifpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ifpq.withImages = query
	return ifpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ImageFolderPath.Query().
//		GroupBy(imagefolderpath.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ifpq *ImageFolderPathQuery) GroupBy(field string, fields ...string) *ImageFolderPathGroupBy {
	ifpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ImageFolderPathGroupBy{build: ifpq}
	grbuild.flds = &ifpq.ctx.Fields
	grbuild.label = imagefolderpath.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ImageFolderPath.Query().
//		Select(imagefolderpath.FieldCreatedAt).
//		Scan(ctx, &v)
func (ifpq *ImageFolderPathQuery) Select(fields ...string) *ImageFolderPathSelect {
	ifpq.ctx.Fields = append(ifpq.ctx.Fields, fields...)
	sbuild := &ImageFolderPathSelect{ImageFolderPathQuery: ifpq}
	sbuild.label = imagefolderpath.Label
	sbuild.flds, sbuild.scan = &ifpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ImageFolderPathSelect configured with the given aggregations.
func (ifpq *ImageFolderPathQuery) Aggregate(fns ...AggregateFunc) *ImageFolderPathSelect {
	return ifpq.Select().Aggregate(fns...)
}

func (ifpq *ImageFolderPathQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ifpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ifpq); err != nil {
				return err
			}
		}
	}
	for _, f := range ifpq.ctx.Fields {
		if !imagefolderpath.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ifpq.path != nil {
		prev, err := ifpq.path(ctx)
		if err != nil {
			return err
		}
		ifpq.sql = prev
	}
	return nil
}

func (ifpq *ImageFolderPathQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ImageFolderPath, error) {
	var (
		nodes       = []*ImageFolderPath{}
		_spec       = ifpq.querySpec()
		loadedTypes = [2]bool{
			ifpq.withImageFolderSource != nil,
			ifpq.withImages != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ImageFolderPath).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ImageFolderPath{config: ifpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ifpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ifpq.withImageFolderSource; query != nil {
		if err := ifpq.loadImageFolderSource(ctx, query, nodes, nil,
			func(n *ImageFolderPath, e *ImageFolderSource) { n.Edges.ImageFolderSource = e }); err != nil {
			return nil, err
		}
	}
	if query := ifpq.withImages; query != nil {
		if err := ifpq.loadImages(ctx, query, nodes,
			func(n *ImageFolderPath) { n.Edges.Images = []*Images{} },
			func(n *ImageFolderPath, e *Images) { n.Edges.Images = append(n.Edges.Images, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ifpq *ImageFolderPathQuery) loadImageFolderSource(ctx context.Context, query *ImageFolderSourceQuery, nodes []*ImageFolderPath, init func(*ImageFolderPath), assign func(*ImageFolderPath, *ImageFolderSource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ImageFolderPath)
	for i := range nodes {
		if nodes[i].ImageFolderSourceID == nil {
			continue
		}
		fk := *nodes[i].ImageFolderSourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(imagefoldersource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_folder_source_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ifpq *ImageFolderPathQuery) loadImages(ctx context.Context, query *ImagesQuery, nodes []*ImageFolderPath, init func(*ImageFolderPath), assign func(*ImageFolderPath, *Images)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ImageFolderPath)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Images(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(imagefolderpath.ImagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.image_folder_path_images
		if fk == nil {
			return fmt.Errorf(`foreign-key "image_folder_path_images" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "image_folder_path_images" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ifpq *ImageFolderPathQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ifpq.querySpec()
	_spec.Node.Columns = ifpq.ctx.Fields
	if len(ifpq.ctx.Fields) > 0 {
		_spec.Unique = ifpq.ctx.Unique != nil && *ifpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ifpq.driver, _spec)
}

func (ifpq *ImageFolderPathQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(imagefolderpath.Table, imagefolderpath.Columns, sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt))
	_spec.From = ifpq.sql
	if unique := ifpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ifpq.path != nil {
		_spec.Unique = true
	}
	if fields := ifpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagefolderpath.FieldID)
		for i := range fields {
			if fields[i] != imagefolderpath.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ifpq.withImageFolderSource != nil {
			_spec.Node.AddColumnOnce(imagefolderpath.FieldImageFolderSourceID)
		}
	}
	if ps := ifpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ifpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ifpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ifpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ifpq *ImageFolderPathQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ifpq.driver.Dialect())
	t1 := builder.Table(imagefolderpath.Table)
	columns := ifpq.ctx.Fields
	if len(columns) == 0 {
		columns = imagefolderpath.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ifpq.sql != nil {
		selector = ifpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ifpq.ctx.Unique != nil && *ifpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ifpq.predicates {
		p(selector)
	}
	for _, p := range ifpq.order {
		p(selector)
	}
	if offset := ifpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ifpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ImageFolderPathGroupBy is the group-by builder for ImageFolderPath entities.
type ImageFolderPathGroupBy struct {
	selector
	build *ImageFolderPathQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ifpgb *ImageFolderPathGroupBy) Aggregate(fns ...AggregateFunc) *ImageFolderPathGroupBy {
	ifpgb.fns = append(ifpgb.fns, fns...)
	return ifpgb
}

// Scan applies the selector query and scans the result into the given value.
func (ifpgb *ImageFolderPathGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifpgb.build.ctx, ent.OpQueryGroupBy)
	if err := ifpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageFolderPathQuery, *ImageFolderPathGroupBy](ctx, ifpgb.build, ifpgb, ifpgb.build.inters, v)
}

func (ifpgb *ImageFolderPathGroupBy) sqlScan(ctx context.Context, root *ImageFolderPathQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ifpgb.fns))
	for _, fn := range ifpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ifpgb.flds)+len(ifpgb.fns))
		for _, f := range *ifpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ifpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ImageFolderPathSelect is the builder for selecting fields of ImageFolderPath entities.
type ImageFolderPathSelect struct {
	*ImageFolderPathQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ifps *ImageFolderPathSelect) Aggregate(fns ...AggregateFunc) *ImageFolderPathSelect {
	ifps.fns = append(ifps.fns, fns...)
	return ifps
}

// Scan applies the selector query and scans the result into the given value.
func (ifps *ImageFolderPathSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ifps.ctx, ent.OpQuerySelect)
	if err := ifps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageFolderPathQuery, *ImageFolderPathSelect](ctx, ifps.ImageFolderPathQuery, ifps, ifps.inters, v)
}

func (ifps *ImageFolderPathSelect) sqlScan(ctx context.Context, root *ImageFolderPathQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ifps.fns))
	for _, fn := range ifps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ifps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ifps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
