// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/brand"
	"products-service/internal/app/ent/category"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/varianttype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Products is the model entity for the Products schema.
type Products struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID *int `json:"category_id,omitempty"`
	// BrandID holds the value of the "brand_id" field.
	BrandID *int `json:"brand_id,omitempty"`
	// VariantTypeID holds the value of the "variant_type_id" field.
	VariantTypeID *int `json:"variant_type_id,omitempty"`
	// ProductReferencesID holds the value of the "product_references_id" field.
	ProductReferencesID *int `json:"product_references_id,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock int `json:"stock,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductsQuery when eager-loading is set.
	Edges                 ProductsEdges `json:"edges"`
	user_products         *int
	user_created_products *int
	user_updated_products *int
	user_deleted_products *int
	selectValues          sql.SelectValues
}

// ProductsEdges holds the relations/edges for other nodes in the graph.
type ProductsEdges struct {
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// Brand holds the value of the brand edge.
	Brand *Brand `json:"brand,omitempty"`
	// VariantType holds the value of the variant_type edge.
	VariantType *VariantType `json:"variant_type,omitempty"`
	// ProductReferences holds the value of the product_references edge.
	ProductReferences *ProductReferences `json:"product_references,omitempty"`
	// ProductHasImage holds the value of the product_has_image edge.
	ProductHasImage []*ProductHasImage `json:"product_has_image,omitempty"`
	// PromotionHasProduct holds the value of the promotion_has_product edge.
	PromotionHasProduct []*PromotionHasProduct `json:"promotion_has_product,omitempty"`
	// ToolHasProduct holds the value of the tool_has_product edge.
	ToolHasProduct []*ToolHasProduct `json:"tool_has_product,omitempty"`
	// ProductHasFeature holds the value of the product_has_feature edge.
	ProductHasFeature []*ProductHasFeature `json:"product_has_feature,omitempty"`
	// ProductHasInfo holds the value of the product_has_info edge.
	ProductHasInfo []*ProductHasInfo `json:"product_has_info,omitempty"`
	// ProductHasProductReference holds the value of the product_has_product_reference edge.
	ProductHasProductReference []*ProductHasProductReference `json:"product_has_product_reference,omitempty"`
	// ProductPrices holds the value of the product_prices edge.
	ProductPrices []*ProductPrices `json:"product_prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductsEdges) CategoryOrErr() (*Category, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductsEdges) BrandOrErr() (*Brand, error) {
	if e.Brand != nil {
		return e.Brand, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: brand.Label}
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// VariantTypeOrErr returns the VariantType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductsEdges) VariantTypeOrErr() (*VariantType, error) {
	if e.VariantType != nil {
		return e.VariantType, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: varianttype.Label}
	}
	return nil, &NotLoadedError{edge: "variant_type"}
}

// ProductReferencesOrErr returns the ProductReferences value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductsEdges) ProductReferencesOrErr() (*ProductReferences, error) {
	if e.ProductReferences != nil {
		return e.ProductReferences, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: productreferences.Label}
	}
	return nil, &NotLoadedError{edge: "product_references"}
}

// ProductHasImageOrErr returns the ProductHasImage value or an error if the edge
// was not loaded in eager-loading.
func (e ProductsEdges) ProductHasImageOrErr() ([]*ProductHasImage, error) {
	if e.loadedTypes[4] {
		return e.ProductHasImage, nil
	}
	return nil, &NotLoadedError{edge: "product_has_image"}
}

// PromotionHasProductOrErr returns the PromotionHasProduct value or an error if the edge
// was not loaded in eager-loading.
func (e ProductsEdges) PromotionHasProductOrErr() ([]*PromotionHasProduct, error) {
	if e.loadedTypes[5] {
		return e.PromotionHasProduct, nil
	}
	return nil, &NotLoadedError{edge: "promotion_has_product"}
}

// ToolHasProductOrErr returns the ToolHasProduct value or an error if the edge
// was not loaded in eager-loading.
func (e ProductsEdges) ToolHasProductOrErr() ([]*ToolHasProduct, error) {
	if e.loadedTypes[6] {
		return e.ToolHasProduct, nil
	}
	return nil, &NotLoadedError{edge: "tool_has_product"}
}

// ProductHasFeatureOrErr returns the ProductHasFeature value or an error if the edge
// was not loaded in eager-loading.
func (e ProductsEdges) ProductHasFeatureOrErr() ([]*ProductHasFeature, error) {
	if e.loadedTypes[7] {
		return e.ProductHasFeature, nil
	}
	return nil, &NotLoadedError{edge: "product_has_feature"}
}

// ProductHasInfoOrErr returns the ProductHasInfo value or an error if the edge
// was not loaded in eager-loading.
func (e ProductsEdges) ProductHasInfoOrErr() ([]*ProductHasInfo, error) {
	if e.loadedTypes[8] {
		return e.ProductHasInfo, nil
	}
	return nil, &NotLoadedError{edge: "product_has_info"}
}

// ProductHasProductReferenceOrErr returns the ProductHasProductReference value or an error if the edge
// was not loaded in eager-loading.
func (e ProductsEdges) ProductHasProductReferenceOrErr() ([]*ProductHasProductReference, error) {
	if e.loadedTypes[9] {
		return e.ProductHasProductReference, nil
	}
	return nil, &NotLoadedError{edge: "product_has_product_reference"}
}

// ProductPricesOrErr returns the ProductPrices value or an error if the edge
// was not loaded in eager-loading.
func (e ProductsEdges) ProductPricesOrErr() ([]*ProductPrices, error) {
	if e.loadedTypes[10] {
		return e.ProductPrices, nil
	}
	return nil, &NotLoadedError{edge: "product_prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Products) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case products.FieldID, products.FieldCategoryID, products.FieldBrandID, products.FieldVariantTypeID, products.FieldProductReferencesID, products.FieldStock:
			values[i] = new(sql.NullInt64)
		case products.FieldName:
			values[i] = new(sql.NullString)
		case products.FieldCreatedAt, products.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case products.ForeignKeys[0]: // user_products
			values[i] = new(sql.NullInt64)
		case products.ForeignKeys[1]: // user_created_products
			values[i] = new(sql.NullInt64)
		case products.ForeignKeys[2]: // user_updated_products
			values[i] = new(sql.NullInt64)
		case products.ForeignKeys[3]: // user_deleted_products
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Products fields.
func (pr *Products) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case products.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case products.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case products.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = new(time.Time)
				*pr.DeletedAt = value.Time
			}
		case products.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				pr.CategoryID = new(int)
				*pr.CategoryID = int(value.Int64)
			}
		case products.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				pr.BrandID = new(int)
				*pr.BrandID = int(value.Int64)
			}
		case products.FieldVariantTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field variant_type_id", values[i])
			} else if value.Valid {
				pr.VariantTypeID = new(int)
				*pr.VariantTypeID = int(value.Int64)
			}
		case products.FieldProductReferencesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_references_id", values[i])
			} else if value.Valid {
				pr.ProductReferencesID = new(int)
				*pr.ProductReferencesID = int(value.Int64)
			}
		case products.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = new(string)
				*pr.Name = value.String
			}
		case products.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				pr.Stock = int(value.Int64)
			}
		case products.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_products", value)
			} else if value.Valid {
				pr.user_products = new(int)
				*pr.user_products = int(value.Int64)
			}
		case products.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_created_products", value)
			} else if value.Valid {
				pr.user_created_products = new(int)
				*pr.user_created_products = int(value.Int64)
			}
		case products.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_updated_products", value)
			} else if value.Valid {
				pr.user_updated_products = new(int)
				*pr.user_updated_products = int(value.Int64)
			}
		case products.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_deleted_products", value)
			} else if value.Valid {
				pr.user_deleted_products = new(int)
				*pr.user_deleted_products = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Products.
// This includes values selected through modifiers, order, etc.
func (pr *Products) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryCategory queries the "category" edge of the Products entity.
func (pr *Products) QueryCategory() *CategoryQuery {
	return NewProductsClient(pr.config).QueryCategory(pr)
}

// QueryBrand queries the "brand" edge of the Products entity.
func (pr *Products) QueryBrand() *BrandQuery {
	return NewProductsClient(pr.config).QueryBrand(pr)
}

// QueryVariantType queries the "variant_type" edge of the Products entity.
func (pr *Products) QueryVariantType() *VariantTypeQuery {
	return NewProductsClient(pr.config).QueryVariantType(pr)
}

// QueryProductReferences queries the "product_references" edge of the Products entity.
func (pr *Products) QueryProductReferences() *ProductReferencesQuery {
	return NewProductsClient(pr.config).QueryProductReferences(pr)
}

// QueryProductHasImage queries the "product_has_image" edge of the Products entity.
func (pr *Products) QueryProductHasImage() *ProductHasImageQuery {
	return NewProductsClient(pr.config).QueryProductHasImage(pr)
}

// QueryPromotionHasProduct queries the "promotion_has_product" edge of the Products entity.
func (pr *Products) QueryPromotionHasProduct() *PromotionHasProductQuery {
	return NewProductsClient(pr.config).QueryPromotionHasProduct(pr)
}

// QueryToolHasProduct queries the "tool_has_product" edge of the Products entity.
func (pr *Products) QueryToolHasProduct() *ToolHasProductQuery {
	return NewProductsClient(pr.config).QueryToolHasProduct(pr)
}

// QueryProductHasFeature queries the "product_has_feature" edge of the Products entity.
func (pr *Products) QueryProductHasFeature() *ProductHasFeatureQuery {
	return NewProductsClient(pr.config).QueryProductHasFeature(pr)
}

// QueryProductHasInfo queries the "product_has_info" edge of the Products entity.
func (pr *Products) QueryProductHasInfo() *ProductHasInfoQuery {
	return NewProductsClient(pr.config).QueryProductHasInfo(pr)
}

// QueryProductHasProductReference queries the "product_has_product_reference" edge of the Products entity.
func (pr *Products) QueryProductHasProductReference() *ProductHasProductReferenceQuery {
	return NewProductsClient(pr.config).QueryProductHasProductReference(pr)
}

// QueryProductPrices queries the "product_prices" edge of the Products entity.
func (pr *Products) QueryProductPrices() *ProductPricesQuery {
	return NewProductsClient(pr.config).QueryProductPrices(pr)
}

// Update returns a builder for updating this Products.
// Note that you need to call Products.Unwrap() before calling this method if this Products
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Products) Update() *ProductsUpdateOne {
	return NewProductsClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Products entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Products) Unwrap() *Products {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Products is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Products) String() string {
	var builder strings.Builder
	builder.WriteString("Products(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.CategoryID; v != nil {
		builder.WriteString("category_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.BrandID; v != nil {
		builder.WriteString("brand_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.VariantTypeID; v != nil {
		builder.WriteString("variant_type_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.ProductReferencesID; v != nil {
		builder.WriteString("product_references_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("stock=")
	builder.WriteString(fmt.Sprintf("%v", pr.Stock))
	builder.WriteByte(')')
	return builder.String()
}

// ProductsSlice is a parsable slice of Products.
type ProductsSlice []*Products
