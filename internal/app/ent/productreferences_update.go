// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/producthasproductreference"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/referencesources"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductReferencesUpdate is the builder for updating ProductReferences entities.
type ProductReferencesUpdate struct {
	config
	hooks    []Hook
	mutation *ProductReferencesMutation
}

// Where appends a list predicates to the ProductReferencesUpdate builder.
func (pru *ProductReferencesUpdate) Where(ps ...predicate.ProductReferences) *ProductReferencesUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetDeletedAt sets the "deleted_at" field.
func (pru *ProductReferencesUpdate) SetDeletedAt(t time.Time) *ProductReferencesUpdate {
	pru.mutation.SetDeletedAt(t)
	return pru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pru *ProductReferencesUpdate) SetNillableDeletedAt(t *time.Time) *ProductReferencesUpdate {
	if t != nil {
		pru.SetDeletedAt(*t)
	}
	return pru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pru *ProductReferencesUpdate) ClearDeletedAt() *ProductReferencesUpdate {
	pru.mutation.ClearDeletedAt()
	return pru
}

// SetReferenceSourceID sets the "reference_source_id" field.
func (pru *ProductReferencesUpdate) SetReferenceSourceID(i int) *ProductReferencesUpdate {
	pru.mutation.SetReferenceSourceID(i)
	return pru
}

// SetNillableReferenceSourceID sets the "reference_source_id" field if the given value is not nil.
func (pru *ProductReferencesUpdate) SetNillableReferenceSourceID(i *int) *ProductReferencesUpdate {
	if i != nil {
		pru.SetReferenceSourceID(*i)
	}
	return pru
}

// ClearReferenceSourceID clears the value of the "reference_source_id" field.
func (pru *ProductReferencesUpdate) ClearReferenceSourceID() *ProductReferencesUpdate {
	pru.mutation.ClearReferenceSourceID()
	return pru
}

// SetValue sets the "value" field.
func (pru *ProductReferencesUpdate) SetValue(s string) *ProductReferencesUpdate {
	pru.mutation.SetValue(s)
	return pru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (pru *ProductReferencesUpdate) SetNillableValue(s *string) *ProductReferencesUpdate {
	if s != nil {
		pru.SetValue(*s)
	}
	return pru
}

// SetReferenceSourcesID sets the "reference_sources" edge to the ReferenceSources entity by ID.
func (pru *ProductReferencesUpdate) SetReferenceSourcesID(id int) *ProductReferencesUpdate {
	pru.mutation.SetReferenceSourcesID(id)
	return pru
}

// SetNillableReferenceSourcesID sets the "reference_sources" edge to the ReferenceSources entity by ID if the given value is not nil.
func (pru *ProductReferencesUpdate) SetNillableReferenceSourcesID(id *int) *ProductReferencesUpdate {
	if id != nil {
		pru = pru.SetReferenceSourcesID(*id)
	}
	return pru
}

// SetReferenceSources sets the "reference_sources" edge to the ReferenceSources entity.
func (pru *ProductReferencesUpdate) SetReferenceSources(r *ReferenceSources) *ProductReferencesUpdate {
	return pru.SetReferenceSourcesID(r.ID)
}

// AddProductIDs adds the "products" edge to the Products entity by IDs.
func (pru *ProductReferencesUpdate) AddProductIDs(ids ...int) *ProductReferencesUpdate {
	pru.mutation.AddProductIDs(ids...)
	return pru
}

// AddProducts adds the "products" edges to the Products entity.
func (pru *ProductReferencesUpdate) AddProducts(p ...*Products) *ProductReferencesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.AddProductIDs(ids...)
}

// AddProductHasProductReferenceIDs adds the "product_has_product_reference" edge to the ProductHasProductReference entity by IDs.
func (pru *ProductReferencesUpdate) AddProductHasProductReferenceIDs(ids ...int) *ProductReferencesUpdate {
	pru.mutation.AddProductHasProductReferenceIDs(ids...)
	return pru
}

// AddProductHasProductReference adds the "product_has_product_reference" edges to the ProductHasProductReference entity.
func (pru *ProductReferencesUpdate) AddProductHasProductReference(p ...*ProductHasProductReference) *ProductReferencesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.AddProductHasProductReferenceIDs(ids...)
}

// Mutation returns the ProductReferencesMutation object of the builder.
func (pru *ProductReferencesUpdate) Mutation() *ProductReferencesMutation {
	return pru.mutation
}

// ClearReferenceSources clears the "reference_sources" edge to the ReferenceSources entity.
func (pru *ProductReferencesUpdate) ClearReferenceSources() *ProductReferencesUpdate {
	pru.mutation.ClearReferenceSources()
	return pru
}

// ClearProducts clears all "products" edges to the Products entity.
func (pru *ProductReferencesUpdate) ClearProducts() *ProductReferencesUpdate {
	pru.mutation.ClearProducts()
	return pru
}

// RemoveProductIDs removes the "products" edge to Products entities by IDs.
func (pru *ProductReferencesUpdate) RemoveProductIDs(ids ...int) *ProductReferencesUpdate {
	pru.mutation.RemoveProductIDs(ids...)
	return pru
}

// RemoveProducts removes "products" edges to Products entities.
func (pru *ProductReferencesUpdate) RemoveProducts(p ...*Products) *ProductReferencesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.RemoveProductIDs(ids...)
}

// ClearProductHasProductReference clears all "product_has_product_reference" edges to the ProductHasProductReference entity.
func (pru *ProductReferencesUpdate) ClearProductHasProductReference() *ProductReferencesUpdate {
	pru.mutation.ClearProductHasProductReference()
	return pru
}

// RemoveProductHasProductReferenceIDs removes the "product_has_product_reference" edge to ProductHasProductReference entities by IDs.
func (pru *ProductReferencesUpdate) RemoveProductHasProductReferenceIDs(ids ...int) *ProductReferencesUpdate {
	pru.mutation.RemoveProductHasProductReferenceIDs(ids...)
	return pru
}

// RemoveProductHasProductReference removes "product_has_product_reference" edges to ProductHasProductReference entities.
func (pru *ProductReferencesUpdate) RemoveProductHasProductReference(p ...*ProductHasProductReference) *ProductReferencesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.RemoveProductHasProductReferenceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *ProductReferencesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *ProductReferencesUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *ProductReferencesUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *ProductReferencesUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *ProductReferencesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productreferences.Table, productreferences.Columns, sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.DeletedAt(); ok {
		_spec.SetField(productreferences.FieldDeletedAt, field.TypeTime, value)
	}
	if pru.mutation.DeletedAtCleared() {
		_spec.ClearField(productreferences.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pru.mutation.Value(); ok {
		_spec.SetField(productreferences.FieldValue, field.TypeString, value)
	}
	if pru.mutation.ReferenceSourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreferences.ReferenceSourcesTable,
			Columns: []string{productreferences.ReferenceSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ReferenceSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreferences.ReferenceSourcesTable,
			Columns: []string{productreferences.ReferenceSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductsTable,
			Columns: []string{productreferences.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pru.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductsTable,
			Columns: []string{productreferences.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductsTable,
			Columns: []string{productreferences.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.ProductHasProductReferenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductHasProductReferenceTable,
			Columns: []string{productreferences.ProductHasProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedProductHasProductReferenceIDs(); len(nodes) > 0 && !pru.mutation.ProductHasProductReferenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductHasProductReferenceTable,
			Columns: []string{productreferences.ProductHasProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ProductHasProductReferenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductHasProductReferenceTable,
			Columns: []string{productreferences.ProductHasProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productreferences.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// ProductReferencesUpdateOne is the builder for updating a single ProductReferences entity.
type ProductReferencesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductReferencesMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (pruo *ProductReferencesUpdateOne) SetDeletedAt(t time.Time) *ProductReferencesUpdateOne {
	pruo.mutation.SetDeletedAt(t)
	return pruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pruo *ProductReferencesUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductReferencesUpdateOne {
	if t != nil {
		pruo.SetDeletedAt(*t)
	}
	return pruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pruo *ProductReferencesUpdateOne) ClearDeletedAt() *ProductReferencesUpdateOne {
	pruo.mutation.ClearDeletedAt()
	return pruo
}

// SetReferenceSourceID sets the "reference_source_id" field.
func (pruo *ProductReferencesUpdateOne) SetReferenceSourceID(i int) *ProductReferencesUpdateOne {
	pruo.mutation.SetReferenceSourceID(i)
	return pruo
}

// SetNillableReferenceSourceID sets the "reference_source_id" field if the given value is not nil.
func (pruo *ProductReferencesUpdateOne) SetNillableReferenceSourceID(i *int) *ProductReferencesUpdateOne {
	if i != nil {
		pruo.SetReferenceSourceID(*i)
	}
	return pruo
}

// ClearReferenceSourceID clears the value of the "reference_source_id" field.
func (pruo *ProductReferencesUpdateOne) ClearReferenceSourceID() *ProductReferencesUpdateOne {
	pruo.mutation.ClearReferenceSourceID()
	return pruo
}

// SetValue sets the "value" field.
func (pruo *ProductReferencesUpdateOne) SetValue(s string) *ProductReferencesUpdateOne {
	pruo.mutation.SetValue(s)
	return pruo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (pruo *ProductReferencesUpdateOne) SetNillableValue(s *string) *ProductReferencesUpdateOne {
	if s != nil {
		pruo.SetValue(*s)
	}
	return pruo
}

// SetReferenceSourcesID sets the "reference_sources" edge to the ReferenceSources entity by ID.
func (pruo *ProductReferencesUpdateOne) SetReferenceSourcesID(id int) *ProductReferencesUpdateOne {
	pruo.mutation.SetReferenceSourcesID(id)
	return pruo
}

// SetNillableReferenceSourcesID sets the "reference_sources" edge to the ReferenceSources entity by ID if the given value is not nil.
func (pruo *ProductReferencesUpdateOne) SetNillableReferenceSourcesID(id *int) *ProductReferencesUpdateOne {
	if id != nil {
		pruo = pruo.SetReferenceSourcesID(*id)
	}
	return pruo
}

// SetReferenceSources sets the "reference_sources" edge to the ReferenceSources entity.
func (pruo *ProductReferencesUpdateOne) SetReferenceSources(r *ReferenceSources) *ProductReferencesUpdateOne {
	return pruo.SetReferenceSourcesID(r.ID)
}

// AddProductIDs adds the "products" edge to the Products entity by IDs.
func (pruo *ProductReferencesUpdateOne) AddProductIDs(ids ...int) *ProductReferencesUpdateOne {
	pruo.mutation.AddProductIDs(ids...)
	return pruo
}

// AddProducts adds the "products" edges to the Products entity.
func (pruo *ProductReferencesUpdateOne) AddProducts(p ...*Products) *ProductReferencesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.AddProductIDs(ids...)
}

// AddProductHasProductReferenceIDs adds the "product_has_product_reference" edge to the ProductHasProductReference entity by IDs.
func (pruo *ProductReferencesUpdateOne) AddProductHasProductReferenceIDs(ids ...int) *ProductReferencesUpdateOne {
	pruo.mutation.AddProductHasProductReferenceIDs(ids...)
	return pruo
}

// AddProductHasProductReference adds the "product_has_product_reference" edges to the ProductHasProductReference entity.
func (pruo *ProductReferencesUpdateOne) AddProductHasProductReference(p ...*ProductHasProductReference) *ProductReferencesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.AddProductHasProductReferenceIDs(ids...)
}

// Mutation returns the ProductReferencesMutation object of the builder.
func (pruo *ProductReferencesUpdateOne) Mutation() *ProductReferencesMutation {
	return pruo.mutation
}

// ClearReferenceSources clears the "reference_sources" edge to the ReferenceSources entity.
func (pruo *ProductReferencesUpdateOne) ClearReferenceSources() *ProductReferencesUpdateOne {
	pruo.mutation.ClearReferenceSources()
	return pruo
}

// ClearProducts clears all "products" edges to the Products entity.
func (pruo *ProductReferencesUpdateOne) ClearProducts() *ProductReferencesUpdateOne {
	pruo.mutation.ClearProducts()
	return pruo
}

// RemoveProductIDs removes the "products" edge to Products entities by IDs.
func (pruo *ProductReferencesUpdateOne) RemoveProductIDs(ids ...int) *ProductReferencesUpdateOne {
	pruo.mutation.RemoveProductIDs(ids...)
	return pruo
}

// RemoveProducts removes "products" edges to Products entities.
func (pruo *ProductReferencesUpdateOne) RemoveProducts(p ...*Products) *ProductReferencesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.RemoveProductIDs(ids...)
}

// ClearProductHasProductReference clears all "product_has_product_reference" edges to the ProductHasProductReference entity.
func (pruo *ProductReferencesUpdateOne) ClearProductHasProductReference() *ProductReferencesUpdateOne {
	pruo.mutation.ClearProductHasProductReference()
	return pruo
}

// RemoveProductHasProductReferenceIDs removes the "product_has_product_reference" edge to ProductHasProductReference entities by IDs.
func (pruo *ProductReferencesUpdateOne) RemoveProductHasProductReferenceIDs(ids ...int) *ProductReferencesUpdateOne {
	pruo.mutation.RemoveProductHasProductReferenceIDs(ids...)
	return pruo
}

// RemoveProductHasProductReference removes "product_has_product_reference" edges to ProductHasProductReference entities.
func (pruo *ProductReferencesUpdateOne) RemoveProductHasProductReference(p ...*ProductHasProductReference) *ProductReferencesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.RemoveProductHasProductReferenceIDs(ids...)
}

// Where appends a list predicates to the ProductReferencesUpdate builder.
func (pruo *ProductReferencesUpdateOne) Where(ps ...predicate.ProductReferences) *ProductReferencesUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *ProductReferencesUpdateOne) Select(field string, fields ...string) *ProductReferencesUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated ProductReferences entity.
func (pruo *ProductReferencesUpdateOne) Save(ctx context.Context) (*ProductReferences, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *ProductReferencesUpdateOne) SaveX(ctx context.Context) *ProductReferences {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *ProductReferencesUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *ProductReferencesUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *ProductReferencesUpdateOne) sqlSave(ctx context.Context) (_node *ProductReferences, err error) {
	_spec := sqlgraph.NewUpdateSpec(productreferences.Table, productreferences.Columns, sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductReferences.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productreferences.FieldID)
		for _, f := range fields {
			if !productreferences.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productreferences.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.DeletedAt(); ok {
		_spec.SetField(productreferences.FieldDeletedAt, field.TypeTime, value)
	}
	if pruo.mutation.DeletedAtCleared() {
		_spec.ClearField(productreferences.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pruo.mutation.Value(); ok {
		_spec.SetField(productreferences.FieldValue, field.TypeString, value)
	}
	if pruo.mutation.ReferenceSourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreferences.ReferenceSourcesTable,
			Columns: []string{productreferences.ReferenceSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ReferenceSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productreferences.ReferenceSourcesTable,
			Columns: []string{productreferences.ReferenceSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductsTable,
			Columns: []string{productreferences.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !pruo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductsTable,
			Columns: []string{productreferences.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductsTable,
			Columns: []string{productreferences.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.ProductHasProductReferenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductHasProductReferenceTable,
			Columns: []string{productreferences.ProductHasProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedProductHasProductReferenceIDs(); len(nodes) > 0 && !pruo.mutation.ProductHasProductReferenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductHasProductReferenceTable,
			Columns: []string{productreferences.ProductHasProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ProductHasProductReferenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productreferences.ProductHasProductReferenceTable,
			Columns: []string{productreferences.ProductHasProductReferenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producthasproductreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductReferences{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productreferences.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
