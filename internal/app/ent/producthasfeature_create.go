// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/features"
	"products-service/internal/app/ent/producthasfeature"
	"products-service/internal/app/ent/products"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductHasFeatureCreate is the builder for creating a ProductHasFeature entity.
type ProductHasFeatureCreate struct {
	config
	mutation *ProductHasFeatureMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (phfc *ProductHasFeatureCreate) SetCreatedAt(t time.Time) *ProductHasFeatureCreate {
	phfc.mutation.SetCreatedAt(t)
	return phfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phfc *ProductHasFeatureCreate) SetNillableCreatedAt(t *time.Time) *ProductHasFeatureCreate {
	if t != nil {
		phfc.SetCreatedAt(*t)
	}
	return phfc
}

// SetUpdatedAt sets the "updated_at" field.
func (phfc *ProductHasFeatureCreate) SetUpdatedAt(t time.Time) *ProductHasFeatureCreate {
	phfc.mutation.SetUpdatedAt(t)
	return phfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (phfc *ProductHasFeatureCreate) SetNillableUpdatedAt(t *time.Time) *ProductHasFeatureCreate {
	if t != nil {
		phfc.SetUpdatedAt(*t)
	}
	return phfc
}

// SetDeletedAt sets the "deleted_at" field.
func (phfc *ProductHasFeatureCreate) SetDeletedAt(t time.Time) *ProductHasFeatureCreate {
	phfc.mutation.SetDeletedAt(t)
	return phfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phfc *ProductHasFeatureCreate) SetNillableDeletedAt(t *time.Time) *ProductHasFeatureCreate {
	if t != nil {
		phfc.SetDeletedAt(*t)
	}
	return phfc
}

// SetCreatedBy sets the "created_by" field.
func (phfc *ProductHasFeatureCreate) SetCreatedBy(i int) *ProductHasFeatureCreate {
	phfc.mutation.SetCreatedBy(i)
	return phfc
}

// SetUpdatedBy sets the "updated_by" field.
func (phfc *ProductHasFeatureCreate) SetUpdatedBy(i int) *ProductHasFeatureCreate {
	phfc.mutation.SetUpdatedBy(i)
	return phfc
}

// SetDeletedBy sets the "deleted_by" field.
func (phfc *ProductHasFeatureCreate) SetDeletedBy(i int) *ProductHasFeatureCreate {
	phfc.mutation.SetDeletedBy(i)
	return phfc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phfc *ProductHasFeatureCreate) SetNillableDeletedBy(i *int) *ProductHasFeatureCreate {
	if i != nil {
		phfc.SetDeletedBy(*i)
	}
	return phfc
}

// SetFeatureID sets the "feature_id" field.
func (phfc *ProductHasFeatureCreate) SetFeatureID(i int) *ProductHasFeatureCreate {
	phfc.mutation.SetFeatureID(i)
	return phfc
}

// SetProductID sets the "product_id" field.
func (phfc *ProductHasFeatureCreate) SetProductID(i int) *ProductHasFeatureCreate {
	phfc.mutation.SetProductID(i)
	return phfc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (phfc *ProductHasFeatureCreate) SetNillableProductID(i *int) *ProductHasFeatureCreate {
	if i != nil {
		phfc.SetProductID(*i)
	}
	return phfc
}

// SetProductsID sets the "products" edge to the Products entity by ID.
func (phfc *ProductHasFeatureCreate) SetProductsID(id int) *ProductHasFeatureCreate {
	phfc.mutation.SetProductsID(id)
	return phfc
}

// SetNillableProductsID sets the "products" edge to the Products entity by ID if the given value is not nil.
func (phfc *ProductHasFeatureCreate) SetNillableProductsID(id *int) *ProductHasFeatureCreate {
	if id != nil {
		phfc = phfc.SetProductsID(*id)
	}
	return phfc
}

// SetProducts sets the "products" edge to the Products entity.
func (phfc *ProductHasFeatureCreate) SetProducts(p *Products) *ProductHasFeatureCreate {
	return phfc.SetProductsID(p.ID)
}

// SetFeaturesID sets the "features" edge to the Features entity by ID.
func (phfc *ProductHasFeatureCreate) SetFeaturesID(id int) *ProductHasFeatureCreate {
	phfc.mutation.SetFeaturesID(id)
	return phfc
}

// SetFeatures sets the "features" edge to the Features entity.
func (phfc *ProductHasFeatureCreate) SetFeatures(f *Features) *ProductHasFeatureCreate {
	return phfc.SetFeaturesID(f.ID)
}

// Mutation returns the ProductHasFeatureMutation object of the builder.
func (phfc *ProductHasFeatureCreate) Mutation() *ProductHasFeatureMutation {
	return phfc.mutation
}

// Save creates the ProductHasFeature in the database.
func (phfc *ProductHasFeatureCreate) Save(ctx context.Context) (*ProductHasFeature, error) {
	phfc.defaults()
	return withHooks(ctx, phfc.sqlSave, phfc.mutation, phfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (phfc *ProductHasFeatureCreate) SaveX(ctx context.Context) *ProductHasFeature {
	v, err := phfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phfc *ProductHasFeatureCreate) Exec(ctx context.Context) error {
	_, err := phfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phfc *ProductHasFeatureCreate) ExecX(ctx context.Context) {
	if err := phfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phfc *ProductHasFeatureCreate) defaults() {
	if _, ok := phfc.mutation.CreatedAt(); !ok {
		v := producthasfeature.DefaultCreatedAt()
		phfc.mutation.SetCreatedAt(v)
	}
	if _, ok := phfc.mutation.UpdatedAt(); !ok {
		v := producthasfeature.DefaultUpdatedAt()
		phfc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phfc *ProductHasFeatureCreate) check() error {
	if _, ok := phfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductHasFeature.created_at"`)}
	}
	if _, ok := phfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductHasFeature.updated_at"`)}
	}
	if _, ok := phfc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ProductHasFeature.created_by"`)}
	}
	if v, ok := phfc.mutation.CreatedBy(); ok {
		if err := producthasfeature.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ProductHasFeature.created_by": %w`, err)}
		}
	}
	if _, ok := phfc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "ProductHasFeature.updated_by"`)}
	}
	if v, ok := phfc.mutation.UpdatedBy(); ok {
		if err := producthasfeature.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProductHasFeature.updated_by": %w`, err)}
		}
	}
	if _, ok := phfc.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`ent: missing required field "ProductHasFeature.feature_id"`)}
	}
	if len(phfc.mutation.FeaturesIDs()) == 0 {
		return &ValidationError{Name: "features", err: errors.New(`ent: missing required edge "ProductHasFeature.features"`)}
	}
	return nil
}

func (phfc *ProductHasFeatureCreate) sqlSave(ctx context.Context) (*ProductHasFeature, error) {
	if err := phfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := phfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, phfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	phfc.mutation.id = &_node.ID
	phfc.mutation.done = true
	return _node, nil
}

func (phfc *ProductHasFeatureCreate) createSpec() (*ProductHasFeature, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductHasFeature{config: phfc.config}
		_spec = sqlgraph.NewCreateSpec(producthasfeature.Table, sqlgraph.NewFieldSpec(producthasfeature.FieldID, field.TypeInt))
	)
	if value, ok := phfc.mutation.CreatedAt(); ok {
		_spec.SetField(producthasfeature.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := phfc.mutation.UpdatedAt(); ok {
		_spec.SetField(producthasfeature.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := phfc.mutation.DeletedAt(); ok {
		_spec.SetField(producthasfeature.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := phfc.mutation.CreatedBy(); ok {
		_spec.SetField(producthasfeature.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := phfc.mutation.UpdatedBy(); ok {
		_spec.SetField(producthasfeature.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := phfc.mutation.DeletedBy(); ok {
		_spec.SetField(producthasfeature.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if nodes := phfc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.ProductsTable,
			Columns: []string{producthasfeature.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phfc.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   producthasfeature.FeaturesTable,
			Columns: []string{producthasfeature.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(features.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductHasFeatureCreateBulk is the builder for creating many ProductHasFeature entities in bulk.
type ProductHasFeatureCreateBulk struct {
	config
	err      error
	builders []*ProductHasFeatureCreate
}

// Save creates the ProductHasFeature entities in the database.
func (phfcb *ProductHasFeatureCreateBulk) Save(ctx context.Context) ([]*ProductHasFeature, error) {
	if phfcb.err != nil {
		return nil, phfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(phfcb.builders))
	nodes := make([]*ProductHasFeature, len(phfcb.builders))
	mutators := make([]Mutator, len(phfcb.builders))
	for i := range phfcb.builders {
		func(i int, root context.Context) {
			builder := phfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductHasFeatureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, phfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, phfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, phfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (phfcb *ProductHasFeatureCreateBulk) SaveX(ctx context.Context) []*ProductHasFeature {
	v, err := phfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phfcb *ProductHasFeatureCreateBulk) Exec(ctx context.Context) error {
	_, err := phfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phfcb *ProductHasFeatureCreateBulk) ExecX(ctx context.Context) {
	if err := phfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
