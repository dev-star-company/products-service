// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/varianttype"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VariantTypeUpdate is the builder for updating VariantType entities.
type VariantTypeUpdate struct {
	config
	hooks    []Hook
	mutation *VariantTypeMutation
}

// Where appends a list predicates to the VariantTypeUpdate builder.
func (vtu *VariantTypeUpdate) Where(ps ...predicate.VariantType) *VariantTypeUpdate {
	vtu.mutation.Where(ps...)
	return vtu
}

// SetDeletedAt sets the "deleted_at" field.
func (vtu *VariantTypeUpdate) SetDeletedAt(t time.Time) *VariantTypeUpdate {
	vtu.mutation.SetDeletedAt(t)
	return vtu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vtu *VariantTypeUpdate) SetNillableDeletedAt(t *time.Time) *VariantTypeUpdate {
	if t != nil {
		vtu.SetDeletedAt(*t)
	}
	return vtu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vtu *VariantTypeUpdate) ClearDeletedAt() *VariantTypeUpdate {
	vtu.mutation.ClearDeletedAt()
	return vtu
}

// SetName sets the "name" field.
func (vtu *VariantTypeUpdate) SetName(s string) *VariantTypeUpdate {
	vtu.mutation.SetName(s)
	return vtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vtu *VariantTypeUpdate) SetNillableName(s *string) *VariantTypeUpdate {
	if s != nil {
		vtu.SetName(*s)
	}
	return vtu
}

// AddProductIDs adds the "products" edge to the Products entity by IDs.
func (vtu *VariantTypeUpdate) AddProductIDs(ids ...int) *VariantTypeUpdate {
	vtu.mutation.AddProductIDs(ids...)
	return vtu
}

// AddProducts adds the "products" edges to the Products entity.
func (vtu *VariantTypeUpdate) AddProducts(p ...*Products) *VariantTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vtu.AddProductIDs(ids...)
}

// Mutation returns the VariantTypeMutation object of the builder.
func (vtu *VariantTypeUpdate) Mutation() *VariantTypeMutation {
	return vtu.mutation
}

// ClearProducts clears all "products" edges to the Products entity.
func (vtu *VariantTypeUpdate) ClearProducts() *VariantTypeUpdate {
	vtu.mutation.ClearProducts()
	return vtu
}

// RemoveProductIDs removes the "products" edge to Products entities by IDs.
func (vtu *VariantTypeUpdate) RemoveProductIDs(ids ...int) *VariantTypeUpdate {
	vtu.mutation.RemoveProductIDs(ids...)
	return vtu
}

// RemoveProducts removes "products" edges to Products entities.
func (vtu *VariantTypeUpdate) RemoveProducts(p ...*Products) *VariantTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vtu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vtu *VariantTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vtu.sqlSave, vtu.mutation, vtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtu *VariantTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := vtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vtu *VariantTypeUpdate) Exec(ctx context.Context) error {
	_, err := vtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtu *VariantTypeUpdate) ExecX(ctx context.Context) {
	if err := vtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vtu *VariantTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(varianttype.Table, varianttype.Columns, sqlgraph.NewFieldSpec(varianttype.FieldID, field.TypeInt))
	if ps := vtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtu.mutation.DeletedAt(); ok {
		_spec.SetField(varianttype.FieldDeletedAt, field.TypeTime, value)
	}
	if vtu.mutation.DeletedAtCleared() {
		_spec.ClearField(varianttype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vtu.mutation.Name(); ok {
		_spec.SetField(varianttype.FieldName, field.TypeString, value)
	}
	if vtu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varianttype.ProductsTable,
			Columns: []string{varianttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !vtu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varianttype.ProductsTable,
			Columns: []string{varianttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varianttype.ProductsTable,
			Columns: []string{varianttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{varianttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vtu.mutation.done = true
	return n, nil
}

// VariantTypeUpdateOne is the builder for updating a single VariantType entity.
type VariantTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VariantTypeMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (vtuo *VariantTypeUpdateOne) SetDeletedAt(t time.Time) *VariantTypeUpdateOne {
	vtuo.mutation.SetDeletedAt(t)
	return vtuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vtuo *VariantTypeUpdateOne) SetNillableDeletedAt(t *time.Time) *VariantTypeUpdateOne {
	if t != nil {
		vtuo.SetDeletedAt(*t)
	}
	return vtuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vtuo *VariantTypeUpdateOne) ClearDeletedAt() *VariantTypeUpdateOne {
	vtuo.mutation.ClearDeletedAt()
	return vtuo
}

// SetName sets the "name" field.
func (vtuo *VariantTypeUpdateOne) SetName(s string) *VariantTypeUpdateOne {
	vtuo.mutation.SetName(s)
	return vtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vtuo *VariantTypeUpdateOne) SetNillableName(s *string) *VariantTypeUpdateOne {
	if s != nil {
		vtuo.SetName(*s)
	}
	return vtuo
}

// AddProductIDs adds the "products" edge to the Products entity by IDs.
func (vtuo *VariantTypeUpdateOne) AddProductIDs(ids ...int) *VariantTypeUpdateOne {
	vtuo.mutation.AddProductIDs(ids...)
	return vtuo
}

// AddProducts adds the "products" edges to the Products entity.
func (vtuo *VariantTypeUpdateOne) AddProducts(p ...*Products) *VariantTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vtuo.AddProductIDs(ids...)
}

// Mutation returns the VariantTypeMutation object of the builder.
func (vtuo *VariantTypeUpdateOne) Mutation() *VariantTypeMutation {
	return vtuo.mutation
}

// ClearProducts clears all "products" edges to the Products entity.
func (vtuo *VariantTypeUpdateOne) ClearProducts() *VariantTypeUpdateOne {
	vtuo.mutation.ClearProducts()
	return vtuo
}

// RemoveProductIDs removes the "products" edge to Products entities by IDs.
func (vtuo *VariantTypeUpdateOne) RemoveProductIDs(ids ...int) *VariantTypeUpdateOne {
	vtuo.mutation.RemoveProductIDs(ids...)
	return vtuo
}

// RemoveProducts removes "products" edges to Products entities.
func (vtuo *VariantTypeUpdateOne) RemoveProducts(p ...*Products) *VariantTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vtuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the VariantTypeUpdate builder.
func (vtuo *VariantTypeUpdateOne) Where(ps ...predicate.VariantType) *VariantTypeUpdateOne {
	vtuo.mutation.Where(ps...)
	return vtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vtuo *VariantTypeUpdateOne) Select(field string, fields ...string) *VariantTypeUpdateOne {
	vtuo.fields = append([]string{field}, fields...)
	return vtuo
}

// Save executes the query and returns the updated VariantType entity.
func (vtuo *VariantTypeUpdateOne) Save(ctx context.Context) (*VariantType, error) {
	return withHooks(ctx, vtuo.sqlSave, vtuo.mutation, vtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtuo *VariantTypeUpdateOne) SaveX(ctx context.Context) *VariantType {
	node, err := vtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vtuo *VariantTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := vtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtuo *VariantTypeUpdateOne) ExecX(ctx context.Context) {
	if err := vtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vtuo *VariantTypeUpdateOne) sqlSave(ctx context.Context) (_node *VariantType, err error) {
	_spec := sqlgraph.NewUpdateSpec(varianttype.Table, varianttype.Columns, sqlgraph.NewFieldSpec(varianttype.FieldID, field.TypeInt))
	id, ok := vtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VariantType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, varianttype.FieldID)
		for _, f := range fields {
			if !varianttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != varianttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtuo.mutation.DeletedAt(); ok {
		_spec.SetField(varianttype.FieldDeletedAt, field.TypeTime, value)
	}
	if vtuo.mutation.DeletedAtCleared() {
		_spec.ClearField(varianttype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vtuo.mutation.Name(); ok {
		_spec.SetField(varianttype.FieldName, field.TypeString, value)
	}
	if vtuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varianttype.ProductsTable,
			Columns: []string{varianttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !vtuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varianttype.ProductsTable,
			Columns: []string{varianttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   varianttype.ProductsTable,
			Columns: []string{varianttype.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VariantType{config: vtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{varianttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vtuo.mutation.done = true
	return _node, nil
}
