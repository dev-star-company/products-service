// Code generated by ent, DO NOT EDIT.

package producthasproductreference

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldDeletedAt, v))
}

// ProductReferenceID applies equality check predicate on the "product_reference_id" field. It's identical to ProductReferenceIDEQ.
func ProductReferenceID(v int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldProductReferenceID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldProductID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNotNull(FieldDeletedAt))
}

// ProductReferenceIDEQ applies the EQ predicate on the "product_reference_id" field.
func ProductReferenceIDEQ(v int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldProductReferenceID, v))
}

// ProductReferenceIDNEQ applies the NEQ predicate on the "product_reference_id" field.
func ProductReferenceIDNEQ(v int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNEQ(FieldProductReferenceID, v))
}

// ProductReferenceIDIn applies the In predicate on the "product_reference_id" field.
func ProductReferenceIDIn(vs ...int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldIn(FieldProductReferenceID, vs...))
}

// ProductReferenceIDNotIn applies the NotIn predicate on the "product_reference_id" field.
func ProductReferenceIDNotIn(vs ...int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNotIn(FieldProductReferenceID, vs...))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.FieldNotNull(FieldProductID))
}

// HasProductReference applies the HasEdge predicate on the "product_reference" edge.
func HasProductReference() predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductReferenceTable, ProductReferenceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductReferenceWith applies the HasEdge predicate on the "product_reference" edge with a given conditions (other predicates).
func HasProductReferenceWith(preds ...predicate.ProductReferences) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(func(s *sql.Selector) {
		step := newProductReferenceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Products) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductHasProductReference) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductHasProductReference) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductHasProductReference) predicate.ProductHasProductReference {
	return predicate.ProductHasProductReference(sql.NotPredicates(p))
}
