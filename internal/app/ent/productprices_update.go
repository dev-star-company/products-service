// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/pricetype"
	"products-service/internal/app/ent/productprices"
	"products-service/internal/app/ent/products"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPricesUpdate is the builder for updating ProductPrices entities.
type ProductPricesUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPricesMutation
}

// Where appends a list predicates to the ProductPricesUpdate builder.
func (ppu *ProductPricesUpdate) Where(ps ...predicate.ProductPrices) *ProductPricesUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *ProductPricesUpdate) SetUpdatedAt(t time.Time) *ProductPricesUpdate {
	ppu.mutation.SetUpdatedAt(t)
	return ppu
}

// SetDeletedAt sets the "deleted_at" field.
func (ppu *ProductPricesUpdate) SetDeletedAt(t time.Time) *ProductPricesUpdate {
	ppu.mutation.SetDeletedAt(t)
	return ppu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppu *ProductPricesUpdate) SetNillableDeletedAt(t *time.Time) *ProductPricesUpdate {
	if t != nil {
		ppu.SetDeletedAt(*t)
	}
	return ppu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppu *ProductPricesUpdate) ClearDeletedAt() *ProductPricesUpdate {
	ppu.mutation.ClearDeletedAt()
	return ppu
}

// SetUpdatedBy sets the "updated_by" field.
func (ppu *ProductPricesUpdate) SetUpdatedBy(i int) *ProductPricesUpdate {
	ppu.mutation.ResetUpdatedBy()
	ppu.mutation.SetUpdatedBy(i)
	return ppu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ppu *ProductPricesUpdate) SetNillableUpdatedBy(i *int) *ProductPricesUpdate {
	if i != nil {
		ppu.SetUpdatedBy(*i)
	}
	return ppu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ppu *ProductPricesUpdate) AddUpdatedBy(i int) *ProductPricesUpdate {
	ppu.mutation.AddUpdatedBy(i)
	return ppu
}

// SetDeletedBy sets the "deleted_by" field.
func (ppu *ProductPricesUpdate) SetDeletedBy(i int) *ProductPricesUpdate {
	ppu.mutation.ResetDeletedBy()
	ppu.mutation.SetDeletedBy(i)
	return ppu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ppu *ProductPricesUpdate) SetNillableDeletedBy(i *int) *ProductPricesUpdate {
	if i != nil {
		ppu.SetDeletedBy(*i)
	}
	return ppu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (ppu *ProductPricesUpdate) AddDeletedBy(i int) *ProductPricesUpdate {
	ppu.mutation.AddDeletedBy(i)
	return ppu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ppu *ProductPricesUpdate) ClearDeletedBy() *ProductPricesUpdate {
	ppu.mutation.ClearDeletedBy()
	return ppu
}

// SetPriceTypeID sets the "price_type_id" field.
func (ppu *ProductPricesUpdate) SetPriceTypeID(i int) *ProductPricesUpdate {
	ppu.mutation.SetPriceTypeID(i)
	return ppu
}

// SetNillablePriceTypeID sets the "price_type_id" field if the given value is not nil.
func (ppu *ProductPricesUpdate) SetNillablePriceTypeID(i *int) *ProductPricesUpdate {
	if i != nil {
		ppu.SetPriceTypeID(*i)
	}
	return ppu
}

// SetProductID sets the "product_id" field.
func (ppu *ProductPricesUpdate) SetProductID(i int) *ProductPricesUpdate {
	ppu.mutation.SetProductID(i)
	return ppu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ppu *ProductPricesUpdate) SetNillableProductID(i *int) *ProductPricesUpdate {
	if i != nil {
		ppu.SetProductID(*i)
	}
	return ppu
}

// ClearProductID clears the value of the "product_id" field.
func (ppu *ProductPricesUpdate) ClearProductID() *ProductPricesUpdate {
	ppu.mutation.ClearProductID()
	return ppu
}

// SetDefaultValue sets the "default_value" field.
func (ppu *ProductPricesUpdate) SetDefaultValue(f float64) *ProductPricesUpdate {
	ppu.mutation.ResetDefaultValue()
	ppu.mutation.SetDefaultValue(f)
	return ppu
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (ppu *ProductPricesUpdate) SetNillableDefaultValue(f *float64) *ProductPricesUpdate {
	if f != nil {
		ppu.SetDefaultValue(*f)
	}
	return ppu
}

// AddDefaultValue adds f to the "default_value" field.
func (ppu *ProductPricesUpdate) AddDefaultValue(f float64) *ProductPricesUpdate {
	ppu.mutation.AddDefaultValue(f)
	return ppu
}

// SetMinValue sets the "min_value" field.
func (ppu *ProductPricesUpdate) SetMinValue(f float64) *ProductPricesUpdate {
	ppu.mutation.ResetMinValue()
	ppu.mutation.SetMinValue(f)
	return ppu
}

// SetNillableMinValue sets the "min_value" field if the given value is not nil.
func (ppu *ProductPricesUpdate) SetNillableMinValue(f *float64) *ProductPricesUpdate {
	if f != nil {
		ppu.SetMinValue(*f)
	}
	return ppu
}

// AddMinValue adds f to the "min_value" field.
func (ppu *ProductPricesUpdate) AddMinValue(f float64) *ProductPricesUpdate {
	ppu.mutation.AddMinValue(f)
	return ppu
}

// ClearMinValue clears the value of the "min_value" field.
func (ppu *ProductPricesUpdate) ClearMinValue() *ProductPricesUpdate {
	ppu.mutation.ClearMinValue()
	return ppu
}

// SetProduct sets the "product" edge to the Products entity.
func (ppu *ProductPricesUpdate) SetProduct(p *Products) *ProductPricesUpdate {
	return ppu.SetProductID(p.ID)
}

// SetPriceType sets the "price_type" edge to the PriceType entity.
func (ppu *ProductPricesUpdate) SetPriceType(p *PriceType) *ProductPricesUpdate {
	return ppu.SetPriceTypeID(p.ID)
}

// Mutation returns the ProductPricesMutation object of the builder.
func (ppu *ProductPricesUpdate) Mutation() *ProductPricesMutation {
	return ppu.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (ppu *ProductPricesUpdate) ClearProduct() *ProductPricesUpdate {
	ppu.mutation.ClearProduct()
	return ppu
}

// ClearPriceType clears the "price_type" edge to the PriceType entity.
func (ppu *ProductPricesUpdate) ClearPriceType() *ProductPricesUpdate {
	ppu.mutation.ClearPriceType()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *ProductPricesUpdate) Save(ctx context.Context) (int, error) {
	ppu.defaults()
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *ProductPricesUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *ProductPricesUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *ProductPricesUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *ProductPricesUpdate) defaults() {
	if _, ok := ppu.mutation.UpdatedAt(); !ok {
		v := productprices.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppu *ProductPricesUpdate) check() error {
	if v, ok := ppu.mutation.UpdatedBy(); ok {
		if err := productprices.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProductPrices.updated_by": %w`, err)}
		}
	}
	if ppu.mutation.PriceTypeCleared() && len(ppu.mutation.PriceTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductPrices.price_type"`)
	}
	return nil
}

func (ppu *ProductPricesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productprices.Table, productprices.Columns, sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(productprices.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.DeletedAt(); ok {
		_spec.SetField(productprices.FieldDeletedAt, field.TypeTime, value)
	}
	if ppu.mutation.DeletedAtCleared() {
		_spec.ClearField(productprices.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ppu.mutation.UpdatedBy(); ok {
		_spec.SetField(productprices.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(productprices.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.DeletedBy(); ok {
		_spec.SetField(productprices.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(productprices.FieldDeletedBy, field.TypeInt, value)
	}
	if ppu.mutation.DeletedByCleared() {
		_spec.ClearField(productprices.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := ppu.mutation.DefaultValue(); ok {
		_spec.SetField(productprices.FieldDefaultValue, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedDefaultValue(); ok {
		_spec.AddField(productprices.FieldDefaultValue, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.MinValue(); ok {
		_spec.SetField(productprices.FieldMinValue, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedMinValue(); ok {
		_spec.AddField(productprices.FieldMinValue, field.TypeFloat64, value)
	}
	if ppu.mutation.MinValueCleared() {
		_spec.ClearField(productprices.FieldMinValue, field.TypeFloat64)
	}
	if ppu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.ProductTable,
			Columns: []string{productprices.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.ProductTable,
			Columns: []string{productprices.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.PriceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.PriceTypeTable,
			Columns: []string{productprices.PriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.PriceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.PriceTypeTable,
			Columns: []string{productprices.PriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productprices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// ProductPricesUpdateOne is the builder for updating a single ProductPrices entity.
type ProductPricesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPricesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *ProductPricesUpdateOne) SetUpdatedAt(t time.Time) *ProductPricesUpdateOne {
	ppuo.mutation.SetUpdatedAt(t)
	return ppuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ppuo *ProductPricesUpdateOne) SetDeletedAt(t time.Time) *ProductPricesUpdateOne {
	ppuo.mutation.SetDeletedAt(t)
	return ppuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppuo *ProductPricesUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductPricesUpdateOne {
	if t != nil {
		ppuo.SetDeletedAt(*t)
	}
	return ppuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppuo *ProductPricesUpdateOne) ClearDeletedAt() *ProductPricesUpdateOne {
	ppuo.mutation.ClearDeletedAt()
	return ppuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ppuo *ProductPricesUpdateOne) SetUpdatedBy(i int) *ProductPricesUpdateOne {
	ppuo.mutation.ResetUpdatedBy()
	ppuo.mutation.SetUpdatedBy(i)
	return ppuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ppuo *ProductPricesUpdateOne) SetNillableUpdatedBy(i *int) *ProductPricesUpdateOne {
	if i != nil {
		ppuo.SetUpdatedBy(*i)
	}
	return ppuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ppuo *ProductPricesUpdateOne) AddUpdatedBy(i int) *ProductPricesUpdateOne {
	ppuo.mutation.AddUpdatedBy(i)
	return ppuo
}

// SetDeletedBy sets the "deleted_by" field.
func (ppuo *ProductPricesUpdateOne) SetDeletedBy(i int) *ProductPricesUpdateOne {
	ppuo.mutation.ResetDeletedBy()
	ppuo.mutation.SetDeletedBy(i)
	return ppuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ppuo *ProductPricesUpdateOne) SetNillableDeletedBy(i *int) *ProductPricesUpdateOne {
	if i != nil {
		ppuo.SetDeletedBy(*i)
	}
	return ppuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (ppuo *ProductPricesUpdateOne) AddDeletedBy(i int) *ProductPricesUpdateOne {
	ppuo.mutation.AddDeletedBy(i)
	return ppuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ppuo *ProductPricesUpdateOne) ClearDeletedBy() *ProductPricesUpdateOne {
	ppuo.mutation.ClearDeletedBy()
	return ppuo
}

// SetPriceTypeID sets the "price_type_id" field.
func (ppuo *ProductPricesUpdateOne) SetPriceTypeID(i int) *ProductPricesUpdateOne {
	ppuo.mutation.SetPriceTypeID(i)
	return ppuo
}

// SetNillablePriceTypeID sets the "price_type_id" field if the given value is not nil.
func (ppuo *ProductPricesUpdateOne) SetNillablePriceTypeID(i *int) *ProductPricesUpdateOne {
	if i != nil {
		ppuo.SetPriceTypeID(*i)
	}
	return ppuo
}

// SetProductID sets the "product_id" field.
func (ppuo *ProductPricesUpdateOne) SetProductID(i int) *ProductPricesUpdateOne {
	ppuo.mutation.SetProductID(i)
	return ppuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ppuo *ProductPricesUpdateOne) SetNillableProductID(i *int) *ProductPricesUpdateOne {
	if i != nil {
		ppuo.SetProductID(*i)
	}
	return ppuo
}

// ClearProductID clears the value of the "product_id" field.
func (ppuo *ProductPricesUpdateOne) ClearProductID() *ProductPricesUpdateOne {
	ppuo.mutation.ClearProductID()
	return ppuo
}

// SetDefaultValue sets the "default_value" field.
func (ppuo *ProductPricesUpdateOne) SetDefaultValue(f float64) *ProductPricesUpdateOne {
	ppuo.mutation.ResetDefaultValue()
	ppuo.mutation.SetDefaultValue(f)
	return ppuo
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (ppuo *ProductPricesUpdateOne) SetNillableDefaultValue(f *float64) *ProductPricesUpdateOne {
	if f != nil {
		ppuo.SetDefaultValue(*f)
	}
	return ppuo
}

// AddDefaultValue adds f to the "default_value" field.
func (ppuo *ProductPricesUpdateOne) AddDefaultValue(f float64) *ProductPricesUpdateOne {
	ppuo.mutation.AddDefaultValue(f)
	return ppuo
}

// SetMinValue sets the "min_value" field.
func (ppuo *ProductPricesUpdateOne) SetMinValue(f float64) *ProductPricesUpdateOne {
	ppuo.mutation.ResetMinValue()
	ppuo.mutation.SetMinValue(f)
	return ppuo
}

// SetNillableMinValue sets the "min_value" field if the given value is not nil.
func (ppuo *ProductPricesUpdateOne) SetNillableMinValue(f *float64) *ProductPricesUpdateOne {
	if f != nil {
		ppuo.SetMinValue(*f)
	}
	return ppuo
}

// AddMinValue adds f to the "min_value" field.
func (ppuo *ProductPricesUpdateOne) AddMinValue(f float64) *ProductPricesUpdateOne {
	ppuo.mutation.AddMinValue(f)
	return ppuo
}

// ClearMinValue clears the value of the "min_value" field.
func (ppuo *ProductPricesUpdateOne) ClearMinValue() *ProductPricesUpdateOne {
	ppuo.mutation.ClearMinValue()
	return ppuo
}

// SetProduct sets the "product" edge to the Products entity.
func (ppuo *ProductPricesUpdateOne) SetProduct(p *Products) *ProductPricesUpdateOne {
	return ppuo.SetProductID(p.ID)
}

// SetPriceType sets the "price_type" edge to the PriceType entity.
func (ppuo *ProductPricesUpdateOne) SetPriceType(p *PriceType) *ProductPricesUpdateOne {
	return ppuo.SetPriceTypeID(p.ID)
}

// Mutation returns the ProductPricesMutation object of the builder.
func (ppuo *ProductPricesUpdateOne) Mutation() *ProductPricesMutation {
	return ppuo.mutation
}

// ClearProduct clears the "product" edge to the Products entity.
func (ppuo *ProductPricesUpdateOne) ClearProduct() *ProductPricesUpdateOne {
	ppuo.mutation.ClearProduct()
	return ppuo
}

// ClearPriceType clears the "price_type" edge to the PriceType entity.
func (ppuo *ProductPricesUpdateOne) ClearPriceType() *ProductPricesUpdateOne {
	ppuo.mutation.ClearPriceType()
	return ppuo
}

// Where appends a list predicates to the ProductPricesUpdate builder.
func (ppuo *ProductPricesUpdateOne) Where(ps ...predicate.ProductPrices) *ProductPricesUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *ProductPricesUpdateOne) Select(field string, fields ...string) *ProductPricesUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated ProductPrices entity.
func (ppuo *ProductPricesUpdateOne) Save(ctx context.Context) (*ProductPrices, error) {
	ppuo.defaults()
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *ProductPricesUpdateOne) SaveX(ctx context.Context) *ProductPrices {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *ProductPricesUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *ProductPricesUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *ProductPricesUpdateOne) defaults() {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok {
		v := productprices.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *ProductPricesUpdateOne) check() error {
	if v, ok := ppuo.mutation.UpdatedBy(); ok {
		if err := productprices.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProductPrices.updated_by": %w`, err)}
		}
	}
	if ppuo.mutation.PriceTypeCleared() && len(ppuo.mutation.PriceTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductPrices.price_type"`)
	}
	return nil
}

func (ppuo *ProductPricesUpdateOne) sqlSave(ctx context.Context) (_node *ProductPrices, err error) {
	if err := ppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productprices.Table, productprices.Columns, sqlgraph.NewFieldSpec(productprices.FieldID, field.TypeInt))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductPrices.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productprices.FieldID)
		for _, f := range fields {
			if !productprices.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productprices.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productprices.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.DeletedAt(); ok {
		_spec.SetField(productprices.FieldDeletedAt, field.TypeTime, value)
	}
	if ppuo.mutation.DeletedAtCleared() {
		_spec.ClearField(productprices.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ppuo.mutation.UpdatedBy(); ok {
		_spec.SetField(productprices.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(productprices.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.DeletedBy(); ok {
		_spec.SetField(productprices.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(productprices.FieldDeletedBy, field.TypeInt, value)
	}
	if ppuo.mutation.DeletedByCleared() {
		_spec.ClearField(productprices.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := ppuo.mutation.DefaultValue(); ok {
		_spec.SetField(productprices.FieldDefaultValue, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedDefaultValue(); ok {
		_spec.AddField(productprices.FieldDefaultValue, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.MinValue(); ok {
		_spec.SetField(productprices.FieldMinValue, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedMinValue(); ok {
		_spec.AddField(productprices.FieldMinValue, field.TypeFloat64, value)
	}
	if ppuo.mutation.MinValueCleared() {
		_spec.ClearField(productprices.FieldMinValue, field.TypeFloat64)
	}
	if ppuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.ProductTable,
			Columns: []string{productprices.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.ProductTable,
			Columns: []string{productprices.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(products.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.PriceTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.PriceTypeTable,
			Columns: []string{productprices.PriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.PriceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprices.PriceTypeTable,
			Columns: []string{productprices.PriceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pricetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductPrices{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productprices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
