// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/promotionhasproduct"
	"products-service/internal/app/ent/promotions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromotionsUpdate is the builder for updating Promotions entities.
type PromotionsUpdate struct {
	config
	hooks    []Hook
	mutation *PromotionsMutation
}

// Where appends a list predicates to the PromotionsUpdate builder.
func (pu *PromotionsUpdate) Where(ps ...predicate.Promotions) *PromotionsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PromotionsUpdate) SetDeletedAt(t time.Time) *PromotionsUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PromotionsUpdate) SetNillableDeletedAt(t *time.Time) *PromotionsUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PromotionsUpdate) ClearDeletedAt() *PromotionsUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *PromotionsUpdate) SetName(s string) *PromotionsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PromotionsUpdate) SetNillableName(s *string) *PromotionsUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetStartingDatetime sets the "starting_datetime" field.
func (pu *PromotionsUpdate) SetStartingDatetime(t time.Time) *PromotionsUpdate {
	pu.mutation.SetStartingDatetime(t)
	return pu
}

// SetNillableStartingDatetime sets the "starting_datetime" field if the given value is not nil.
func (pu *PromotionsUpdate) SetNillableStartingDatetime(t *time.Time) *PromotionsUpdate {
	if t != nil {
		pu.SetStartingDatetime(*t)
	}
	return pu
}

// SetEndingDatetime sets the "ending_datetime" field.
func (pu *PromotionsUpdate) SetEndingDatetime(t time.Time) *PromotionsUpdate {
	pu.mutation.SetEndingDatetime(t)
	return pu
}

// SetNillableEndingDatetime sets the "ending_datetime" field if the given value is not nil.
func (pu *PromotionsUpdate) SetNillableEndingDatetime(t *time.Time) *PromotionsUpdate {
	if t != nil {
		pu.SetEndingDatetime(*t)
	}
	return pu
}

// AddPromotionHasProductIDs adds the "promotion_has_product" edge to the PromotionHasProduct entity by IDs.
func (pu *PromotionsUpdate) AddPromotionHasProductIDs(ids ...int) *PromotionsUpdate {
	pu.mutation.AddPromotionHasProductIDs(ids...)
	return pu
}

// AddPromotionHasProduct adds the "promotion_has_product" edges to the PromotionHasProduct entity.
func (pu *PromotionsUpdate) AddPromotionHasProduct(p ...*PromotionHasProduct) *PromotionsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPromotionHasProductIDs(ids...)
}

// Mutation returns the PromotionsMutation object of the builder.
func (pu *PromotionsUpdate) Mutation() *PromotionsMutation {
	return pu.mutation
}

// ClearPromotionHasProduct clears all "promotion_has_product" edges to the PromotionHasProduct entity.
func (pu *PromotionsUpdate) ClearPromotionHasProduct() *PromotionsUpdate {
	pu.mutation.ClearPromotionHasProduct()
	return pu
}

// RemovePromotionHasProductIDs removes the "promotion_has_product" edge to PromotionHasProduct entities by IDs.
func (pu *PromotionsUpdate) RemovePromotionHasProductIDs(ids ...int) *PromotionsUpdate {
	pu.mutation.RemovePromotionHasProductIDs(ids...)
	return pu
}

// RemovePromotionHasProduct removes "promotion_has_product" edges to PromotionHasProduct entities.
func (pu *PromotionsUpdate) RemovePromotionHasProduct(p ...*PromotionHasProduct) *PromotionsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePromotionHasProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PromotionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PromotionsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PromotionsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PromotionsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PromotionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotions.Table, promotions.Columns, sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(promotions.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotions.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(promotions.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.StartingDatetime(); ok {
		_spec.SetField(promotions.FieldStartingDatetime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.EndingDatetime(); ok {
		_spec.SetField(promotions.FieldEndingDatetime, field.TypeTime, value)
	}
	if pu.mutation.PromotionHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotions.PromotionHasProductTable,
			Columns: []string{promotions.PromotionHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPromotionHasProductIDs(); len(nodes) > 0 && !pu.mutation.PromotionHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotions.PromotionHasProductTable,
			Columns: []string{promotions.PromotionHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PromotionHasProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotions.PromotionHasProductTable,
			Columns: []string{promotions.PromotionHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PromotionsUpdateOne is the builder for updating a single Promotions entity.
type PromotionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromotionsMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PromotionsUpdateOne) SetDeletedAt(t time.Time) *PromotionsUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PromotionsUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionsUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PromotionsUpdateOne) ClearDeletedAt() *PromotionsUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *PromotionsUpdateOne) SetName(s string) *PromotionsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PromotionsUpdateOne) SetNillableName(s *string) *PromotionsUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetStartingDatetime sets the "starting_datetime" field.
func (puo *PromotionsUpdateOne) SetStartingDatetime(t time.Time) *PromotionsUpdateOne {
	puo.mutation.SetStartingDatetime(t)
	return puo
}

// SetNillableStartingDatetime sets the "starting_datetime" field if the given value is not nil.
func (puo *PromotionsUpdateOne) SetNillableStartingDatetime(t *time.Time) *PromotionsUpdateOne {
	if t != nil {
		puo.SetStartingDatetime(*t)
	}
	return puo
}

// SetEndingDatetime sets the "ending_datetime" field.
func (puo *PromotionsUpdateOne) SetEndingDatetime(t time.Time) *PromotionsUpdateOne {
	puo.mutation.SetEndingDatetime(t)
	return puo
}

// SetNillableEndingDatetime sets the "ending_datetime" field if the given value is not nil.
func (puo *PromotionsUpdateOne) SetNillableEndingDatetime(t *time.Time) *PromotionsUpdateOne {
	if t != nil {
		puo.SetEndingDatetime(*t)
	}
	return puo
}

// AddPromotionHasProductIDs adds the "promotion_has_product" edge to the PromotionHasProduct entity by IDs.
func (puo *PromotionsUpdateOne) AddPromotionHasProductIDs(ids ...int) *PromotionsUpdateOne {
	puo.mutation.AddPromotionHasProductIDs(ids...)
	return puo
}

// AddPromotionHasProduct adds the "promotion_has_product" edges to the PromotionHasProduct entity.
func (puo *PromotionsUpdateOne) AddPromotionHasProduct(p ...*PromotionHasProduct) *PromotionsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPromotionHasProductIDs(ids...)
}

// Mutation returns the PromotionsMutation object of the builder.
func (puo *PromotionsUpdateOne) Mutation() *PromotionsMutation {
	return puo.mutation
}

// ClearPromotionHasProduct clears all "promotion_has_product" edges to the PromotionHasProduct entity.
func (puo *PromotionsUpdateOne) ClearPromotionHasProduct() *PromotionsUpdateOne {
	puo.mutation.ClearPromotionHasProduct()
	return puo
}

// RemovePromotionHasProductIDs removes the "promotion_has_product" edge to PromotionHasProduct entities by IDs.
func (puo *PromotionsUpdateOne) RemovePromotionHasProductIDs(ids ...int) *PromotionsUpdateOne {
	puo.mutation.RemovePromotionHasProductIDs(ids...)
	return puo
}

// RemovePromotionHasProduct removes "promotion_has_product" edges to PromotionHasProduct entities.
func (puo *PromotionsUpdateOne) RemovePromotionHasProduct(p ...*PromotionHasProduct) *PromotionsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePromotionHasProductIDs(ids...)
}

// Where appends a list predicates to the PromotionsUpdate builder.
func (puo *PromotionsUpdateOne) Where(ps ...predicate.Promotions) *PromotionsUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PromotionsUpdateOne) Select(field string, fields ...string) *PromotionsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Promotions entity.
func (puo *PromotionsUpdateOne) Save(ctx context.Context) (*Promotions, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PromotionsUpdateOne) SaveX(ctx context.Context) *Promotions {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PromotionsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PromotionsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PromotionsUpdateOne) sqlSave(ctx context.Context) (_node *Promotions, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotions.Table, promotions.Columns, sqlgraph.NewFieldSpec(promotions.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Promotions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotions.FieldID)
		for _, f := range fields {
			if !promotions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(promotions.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotions.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(promotions.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.StartingDatetime(); ok {
		_spec.SetField(promotions.FieldStartingDatetime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.EndingDatetime(); ok {
		_spec.SetField(promotions.FieldEndingDatetime, field.TypeTime, value)
	}
	if puo.mutation.PromotionHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotions.PromotionHasProductTable,
			Columns: []string{promotions.PromotionHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPromotionHasProductIDs(); len(nodes) > 0 && !puo.mutation.PromotionHasProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotions.PromotionHasProductTable,
			Columns: []string{promotions.PromotionHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PromotionHasProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotions.PromotionHasProductTable,
			Columns: []string{promotions.PromotionHasProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionhasproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Promotions{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
