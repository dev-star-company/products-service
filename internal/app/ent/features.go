// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/features"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Features is the model entity for the Features schema.
type Features struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// FeatureValueID holds the value of the "feature_value_id" field.
	FeatureValueID *int `json:"feature_value_id,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeaturesQuery when eager-loading is set.
	Edges        FeaturesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeaturesEdges holds the relations/edges for other nodes in the graph.
type FeaturesEdges struct {
	// FeatureValues holds the value of the feature_values edge.
	FeatureValues []*FeaturesValues `json:"feature_values,omitempty"`
	// ProductHasFeature holds the value of the product_has_feature edge.
	ProductHasFeature []*ProductHasFeature `json:"product_has_feature,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeatureValuesOrErr returns the FeatureValues value or an error if the edge
// was not loaded in eager-loading.
func (e FeaturesEdges) FeatureValuesOrErr() ([]*FeaturesValues, error) {
	if e.loadedTypes[0] {
		return e.FeatureValues, nil
	}
	return nil, &NotLoadedError{edge: "feature_values"}
}

// ProductHasFeatureOrErr returns the ProductHasFeature value or an error if the edge
// was not loaded in eager-loading.
func (e FeaturesEdges) ProductHasFeatureOrErr() ([]*ProductHasFeature, error) {
	if e.loadedTypes[1] {
		return e.ProductHasFeature, nil
	}
	return nil, &NotLoadedError{edge: "product_has_feature"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Features) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case features.FieldID, features.FieldFeatureValueID:
			values[i] = new(sql.NullInt64)
		case features.FieldName:
			values[i] = new(sql.NullString)
		case features.FieldCreatedAt, features.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Features fields.
func (f *Features) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case features.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case features.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case features.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = new(time.Time)
				*f.DeletedAt = value.Time
			}
		case features.FieldFeatureValueID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature_value_id", values[i])
			} else if value.Valid {
				f.FeatureValueID = new(int)
				*f.FeatureValueID = int(value.Int64)
			}
		case features.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = new(string)
				*f.Name = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Features.
// This includes values selected through modifiers, order, etc.
func (f *Features) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryFeatureValues queries the "feature_values" edge of the Features entity.
func (f *Features) QueryFeatureValues() *FeaturesValuesQuery {
	return NewFeaturesClient(f.config).QueryFeatureValues(f)
}

// QueryProductHasFeature queries the "product_has_feature" edge of the Features entity.
func (f *Features) QueryProductHasFeature() *ProductHasFeatureQuery {
	return NewFeaturesClient(f.config).QueryProductHasFeature(f)
}

// Update returns a builder for updating this Features.
// Note that you need to call Features.Unwrap() before calling this method if this Features
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Features) Update() *FeaturesUpdateOne {
	return NewFeaturesClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Features entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Features) Unwrap() *Features {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Features is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Features) String() string {
	var builder strings.Builder
	builder.WriteString("Features(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := f.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := f.FeatureValueID; v != nil {
		builder.WriteString("feature_value_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// FeaturesSlice is a parsable slice of Features.
type FeaturesSlice []*Features
