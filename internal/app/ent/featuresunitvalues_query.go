// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"products-service/internal/app/ent/featuresunitvalues"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesUnitValuesQuery is the builder for querying FeaturesUnitValues entities.
type FeaturesUnitValuesQuery struct {
	config
	ctx               *QueryContext
	order             []featuresunitvalues.OrderOption
	inters            []Interceptor
	predicates        []predicate.FeaturesUnitValues
	withFeatureValues *FeaturesValuesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeaturesUnitValuesQuery builder.
func (fuvq *FeaturesUnitValuesQuery) Where(ps ...predicate.FeaturesUnitValues) *FeaturesUnitValuesQuery {
	fuvq.predicates = append(fuvq.predicates, ps...)
	return fuvq
}

// Limit the number of records to be returned by this query.
func (fuvq *FeaturesUnitValuesQuery) Limit(limit int) *FeaturesUnitValuesQuery {
	fuvq.ctx.Limit = &limit
	return fuvq
}

// Offset to start from.
func (fuvq *FeaturesUnitValuesQuery) Offset(offset int) *FeaturesUnitValuesQuery {
	fuvq.ctx.Offset = &offset
	return fuvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fuvq *FeaturesUnitValuesQuery) Unique(unique bool) *FeaturesUnitValuesQuery {
	fuvq.ctx.Unique = &unique
	return fuvq
}

// Order specifies how the records should be ordered.
func (fuvq *FeaturesUnitValuesQuery) Order(o ...featuresunitvalues.OrderOption) *FeaturesUnitValuesQuery {
	fuvq.order = append(fuvq.order, o...)
	return fuvq
}

// QueryFeatureValues chains the current query on the "feature_values" edge.
func (fuvq *FeaturesUnitValuesQuery) QueryFeatureValues() *FeaturesValuesQuery {
	query := (&FeaturesValuesClient{config: fuvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fuvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fuvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(featuresunitvalues.Table, featuresunitvalues.FieldID, selector),
			sqlgraph.To(featuresvalues.Table, featuresvalues.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, featuresunitvalues.FeatureValuesTable, featuresunitvalues.FeatureValuesColumn),
		)
		fromU = sqlgraph.SetNeighbors(fuvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FeaturesUnitValues entity from the query.
// Returns a *NotFoundError when no FeaturesUnitValues was found.
func (fuvq *FeaturesUnitValuesQuery) First(ctx context.Context) (*FeaturesUnitValues, error) {
	nodes, err := fuvq.Limit(1).All(setContextOp(ctx, fuvq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{featuresunitvalues.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) FirstX(ctx context.Context) *FeaturesUnitValues {
	node, err := fuvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeaturesUnitValues ID from the query.
// Returns a *NotFoundError when no FeaturesUnitValues ID was found.
func (fuvq *FeaturesUnitValuesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fuvq.Limit(1).IDs(setContextOp(ctx, fuvq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{featuresunitvalues.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) FirstIDX(ctx context.Context) int {
	id, err := fuvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeaturesUnitValues entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeaturesUnitValues entity is found.
// Returns a *NotFoundError when no FeaturesUnitValues entities are found.
func (fuvq *FeaturesUnitValuesQuery) Only(ctx context.Context) (*FeaturesUnitValues, error) {
	nodes, err := fuvq.Limit(2).All(setContextOp(ctx, fuvq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{featuresunitvalues.Label}
	default:
		return nil, &NotSingularError{featuresunitvalues.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) OnlyX(ctx context.Context) *FeaturesUnitValues {
	node, err := fuvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeaturesUnitValues ID in the query.
// Returns a *NotSingularError when more than one FeaturesUnitValues ID is found.
// Returns a *NotFoundError when no entities are found.
func (fuvq *FeaturesUnitValuesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fuvq.Limit(2).IDs(setContextOp(ctx, fuvq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{featuresunitvalues.Label}
	default:
		err = &NotSingularError{featuresunitvalues.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) OnlyIDX(ctx context.Context) int {
	id, err := fuvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeaturesUnitValuesSlice.
func (fuvq *FeaturesUnitValuesQuery) All(ctx context.Context) ([]*FeaturesUnitValues, error) {
	ctx = setContextOp(ctx, fuvq.ctx, ent.OpQueryAll)
	if err := fuvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeaturesUnitValues, *FeaturesUnitValuesQuery]()
	return withInterceptors[[]*FeaturesUnitValues](ctx, fuvq, qr, fuvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) AllX(ctx context.Context) []*FeaturesUnitValues {
	nodes, err := fuvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeaturesUnitValues IDs.
func (fuvq *FeaturesUnitValuesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fuvq.ctx.Unique == nil && fuvq.path != nil {
		fuvq.Unique(true)
	}
	ctx = setContextOp(ctx, fuvq.ctx, ent.OpQueryIDs)
	if err = fuvq.Select(featuresunitvalues.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) IDsX(ctx context.Context) []int {
	ids, err := fuvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fuvq *FeaturesUnitValuesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fuvq.ctx, ent.OpQueryCount)
	if err := fuvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fuvq, querierCount[*FeaturesUnitValuesQuery](), fuvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) CountX(ctx context.Context) int {
	count, err := fuvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fuvq *FeaturesUnitValuesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fuvq.ctx, ent.OpQueryExist)
	switch _, err := fuvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fuvq *FeaturesUnitValuesQuery) ExistX(ctx context.Context) bool {
	exist, err := fuvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeaturesUnitValuesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fuvq *FeaturesUnitValuesQuery) Clone() *FeaturesUnitValuesQuery {
	if fuvq == nil {
		return nil
	}
	return &FeaturesUnitValuesQuery{
		config:            fuvq.config,
		ctx:               fuvq.ctx.Clone(),
		order:             append([]featuresunitvalues.OrderOption{}, fuvq.order...),
		inters:            append([]Interceptor{}, fuvq.inters...),
		predicates:        append([]predicate.FeaturesUnitValues{}, fuvq.predicates...),
		withFeatureValues: fuvq.withFeatureValues.Clone(),
		// clone intermediate query.
		sql:  fuvq.sql.Clone(),
		path: fuvq.path,
	}
}

// WithFeatureValues tells the query-builder to eager-load the nodes that are connected to
// the "feature_values" edge. The optional arguments are used to configure the query builder of the edge.
func (fuvq *FeaturesUnitValuesQuery) WithFeatureValues(opts ...func(*FeaturesValuesQuery)) *FeaturesUnitValuesQuery {
	query := (&FeaturesValuesClient{config: fuvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fuvq.withFeatureValues = query
	return fuvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeaturesUnitValues.Query().
//		GroupBy(featuresunitvalues.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fuvq *FeaturesUnitValuesQuery) GroupBy(field string, fields ...string) *FeaturesUnitValuesGroupBy {
	fuvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeaturesUnitValuesGroupBy{build: fuvq}
	grbuild.flds = &fuvq.ctx.Fields
	grbuild.label = featuresunitvalues.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.FeaturesUnitValues.Query().
//		Select(featuresunitvalues.FieldCreatedAt).
//		Scan(ctx, &v)
func (fuvq *FeaturesUnitValuesQuery) Select(fields ...string) *FeaturesUnitValuesSelect {
	fuvq.ctx.Fields = append(fuvq.ctx.Fields, fields...)
	sbuild := &FeaturesUnitValuesSelect{FeaturesUnitValuesQuery: fuvq}
	sbuild.label = featuresunitvalues.Label
	sbuild.flds, sbuild.scan = &fuvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeaturesUnitValuesSelect configured with the given aggregations.
func (fuvq *FeaturesUnitValuesQuery) Aggregate(fns ...AggregateFunc) *FeaturesUnitValuesSelect {
	return fuvq.Select().Aggregate(fns...)
}

func (fuvq *FeaturesUnitValuesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fuvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fuvq); err != nil {
				return err
			}
		}
	}
	for _, f := range fuvq.ctx.Fields {
		if !featuresunitvalues.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fuvq.path != nil {
		prev, err := fuvq.path(ctx)
		if err != nil {
			return err
		}
		fuvq.sql = prev
	}
	return nil
}

func (fuvq *FeaturesUnitValuesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeaturesUnitValues, error) {
	var (
		nodes       = []*FeaturesUnitValues{}
		_spec       = fuvq.querySpec()
		loadedTypes = [1]bool{
			fuvq.withFeatureValues != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeaturesUnitValues).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeaturesUnitValues{config: fuvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fuvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fuvq.withFeatureValues; query != nil {
		if err := fuvq.loadFeatureValues(ctx, query, nodes,
			func(n *FeaturesUnitValues) { n.Edges.FeatureValues = []*FeaturesValues{} },
			func(n *FeaturesUnitValues, e *FeaturesValues) {
				n.Edges.FeatureValues = append(n.Edges.FeatureValues, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fuvq *FeaturesUnitValuesQuery) loadFeatureValues(ctx context.Context, query *FeaturesValuesQuery, nodes []*FeaturesUnitValues, init func(*FeaturesUnitValues), assign func(*FeaturesUnitValues, *FeaturesValues)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*FeaturesUnitValues)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(featuresvalues.FieldFeatureUnitValuesID)
	}
	query.Where(predicate.FeaturesValues(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(featuresunitvalues.FeatureValuesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FeatureUnitValuesID
		if fk == nil {
			return fmt.Errorf(`foreign-key "feature_unit_values_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "feature_unit_values_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fuvq *FeaturesUnitValuesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fuvq.querySpec()
	_spec.Node.Columns = fuvq.ctx.Fields
	if len(fuvq.ctx.Fields) > 0 {
		_spec.Unique = fuvq.ctx.Unique != nil && *fuvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fuvq.driver, _spec)
}

func (fuvq *FeaturesUnitValuesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(featuresunitvalues.Table, featuresunitvalues.Columns, sqlgraph.NewFieldSpec(featuresunitvalues.FieldID, field.TypeInt))
	_spec.From = fuvq.sql
	if unique := fuvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fuvq.path != nil {
		_spec.Unique = true
	}
	if fields := fuvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featuresunitvalues.FieldID)
		for i := range fields {
			if fields[i] != featuresunitvalues.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fuvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fuvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fuvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fuvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fuvq *FeaturesUnitValuesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fuvq.driver.Dialect())
	t1 := builder.Table(featuresunitvalues.Table)
	columns := fuvq.ctx.Fields
	if len(columns) == 0 {
		columns = featuresunitvalues.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fuvq.sql != nil {
		selector = fuvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fuvq.ctx.Unique != nil && *fuvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fuvq.predicates {
		p(selector)
	}
	for _, p := range fuvq.order {
		p(selector)
	}
	if offset := fuvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fuvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FeaturesUnitValuesGroupBy is the group-by builder for FeaturesUnitValues entities.
type FeaturesUnitValuesGroupBy struct {
	selector
	build *FeaturesUnitValuesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fuvgb *FeaturesUnitValuesGroupBy) Aggregate(fns ...AggregateFunc) *FeaturesUnitValuesGroupBy {
	fuvgb.fns = append(fuvgb.fns, fns...)
	return fuvgb
}

// Scan applies the selector query and scans the result into the given value.
func (fuvgb *FeaturesUnitValuesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fuvgb.build.ctx, ent.OpQueryGroupBy)
	if err := fuvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeaturesUnitValuesQuery, *FeaturesUnitValuesGroupBy](ctx, fuvgb.build, fuvgb, fuvgb.build.inters, v)
}

func (fuvgb *FeaturesUnitValuesGroupBy) sqlScan(ctx context.Context, root *FeaturesUnitValuesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fuvgb.fns))
	for _, fn := range fuvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fuvgb.flds)+len(fuvgb.fns))
		for _, f := range *fuvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fuvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fuvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeaturesUnitValuesSelect is the builder for selecting fields of FeaturesUnitValues entities.
type FeaturesUnitValuesSelect struct {
	*FeaturesUnitValuesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fuvs *FeaturesUnitValuesSelect) Aggregate(fns ...AggregateFunc) *FeaturesUnitValuesSelect {
	fuvs.fns = append(fuvs.fns, fns...)
	return fuvs
}

// Scan applies the selector query and scans the result into the given value.
func (fuvs *FeaturesUnitValuesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fuvs.ctx, ent.OpQuerySelect)
	if err := fuvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeaturesUnitValuesQuery, *FeaturesUnitValuesSelect](ctx, fuvs.FeaturesUnitValuesQuery, fuvs, fuvs.inters, v)
}

func (fuvs *FeaturesUnitValuesSelect) sqlScan(ctx context.Context, root *FeaturesUnitValuesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fuvs.fns))
	for _, fn := range fuvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fuvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fuvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
