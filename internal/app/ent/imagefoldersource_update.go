// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/imagefoldersource"
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderSourceUpdate is the builder for updating ImageFolderSource entities.
type ImageFolderSourceUpdate struct {
	config
	hooks    []Hook
	mutation *ImageFolderSourceMutation
}

// Where appends a list predicates to the ImageFolderSourceUpdate builder.
func (ifsu *ImageFolderSourceUpdate) Where(ps ...predicate.ImageFolderSource) *ImageFolderSourceUpdate {
	ifsu.mutation.Where(ps...)
	return ifsu
}

// SetDeletedAt sets the "deleted_at" field.
func (ifsu *ImageFolderSourceUpdate) SetDeletedAt(t time.Time) *ImageFolderSourceUpdate {
	ifsu.mutation.SetDeletedAt(t)
	return ifsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ifsu *ImageFolderSourceUpdate) SetNillableDeletedAt(t *time.Time) *ImageFolderSourceUpdate {
	if t != nil {
		ifsu.SetDeletedAt(*t)
	}
	return ifsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ifsu *ImageFolderSourceUpdate) ClearDeletedAt() *ImageFolderSourceUpdate {
	ifsu.mutation.ClearDeletedAt()
	return ifsu
}

// SetName sets the "name" field.
func (ifsu *ImageFolderSourceUpdate) SetName(s string) *ImageFolderSourceUpdate {
	ifsu.mutation.SetName(s)
	return ifsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ifsu *ImageFolderSourceUpdate) SetNillableName(s *string) *ImageFolderSourceUpdate {
	if s != nil {
		ifsu.SetName(*s)
	}
	return ifsu
}

// SetBaseURL sets the "base_url" field.
func (ifsu *ImageFolderSourceUpdate) SetBaseURL(s string) *ImageFolderSourceUpdate {
	ifsu.mutation.SetBaseURL(s)
	return ifsu
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (ifsu *ImageFolderSourceUpdate) SetNillableBaseURL(s *string) *ImageFolderSourceUpdate {
	if s != nil {
		ifsu.SetBaseURL(*s)
	}
	return ifsu
}

// SetAccessKey sets the "access_key" field.
func (ifsu *ImageFolderSourceUpdate) SetAccessKey(s string) *ImageFolderSourceUpdate {
	ifsu.mutation.SetAccessKey(s)
	return ifsu
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (ifsu *ImageFolderSourceUpdate) SetNillableAccessKey(s *string) *ImageFolderSourceUpdate {
	if s != nil {
		ifsu.SetAccessKey(*s)
	}
	return ifsu
}

// ClearAccessKey clears the value of the "access_key" field.
func (ifsu *ImageFolderSourceUpdate) ClearAccessKey() *ImageFolderSourceUpdate {
	ifsu.mutation.ClearAccessKey()
	return ifsu
}

// SetSecretKey sets the "secret_key" field.
func (ifsu *ImageFolderSourceUpdate) SetSecretKey(s string) *ImageFolderSourceUpdate {
	ifsu.mutation.SetSecretKey(s)
	return ifsu
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (ifsu *ImageFolderSourceUpdate) SetNillableSecretKey(s *string) *ImageFolderSourceUpdate {
	if s != nil {
		ifsu.SetSecretKey(*s)
	}
	return ifsu
}

// ClearSecretKey clears the value of the "secret_key" field.
func (ifsu *ImageFolderSourceUpdate) ClearSecretKey() *ImageFolderSourceUpdate {
	ifsu.mutation.ClearSecretKey()
	return ifsu
}

// AddImageFolderPathIDs adds the "image_folder_path" edge to the ImageFolderPath entity by IDs.
func (ifsu *ImageFolderSourceUpdate) AddImageFolderPathIDs(ids ...int) *ImageFolderSourceUpdate {
	ifsu.mutation.AddImageFolderPathIDs(ids...)
	return ifsu
}

// AddImageFolderPath adds the "image_folder_path" edges to the ImageFolderPath entity.
func (ifsu *ImageFolderSourceUpdate) AddImageFolderPath(i ...*ImageFolderPath) *ImageFolderSourceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifsu.AddImageFolderPathIDs(ids...)
}

// Mutation returns the ImageFolderSourceMutation object of the builder.
func (ifsu *ImageFolderSourceUpdate) Mutation() *ImageFolderSourceMutation {
	return ifsu.mutation
}

// ClearImageFolderPath clears all "image_folder_path" edges to the ImageFolderPath entity.
func (ifsu *ImageFolderSourceUpdate) ClearImageFolderPath() *ImageFolderSourceUpdate {
	ifsu.mutation.ClearImageFolderPath()
	return ifsu
}

// RemoveImageFolderPathIDs removes the "image_folder_path" edge to ImageFolderPath entities by IDs.
func (ifsu *ImageFolderSourceUpdate) RemoveImageFolderPathIDs(ids ...int) *ImageFolderSourceUpdate {
	ifsu.mutation.RemoveImageFolderPathIDs(ids...)
	return ifsu
}

// RemoveImageFolderPath removes "image_folder_path" edges to ImageFolderPath entities.
func (ifsu *ImageFolderSourceUpdate) RemoveImageFolderPath(i ...*ImageFolderPath) *ImageFolderSourceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifsu.RemoveImageFolderPathIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ifsu *ImageFolderSourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ifsu.sqlSave, ifsu.mutation, ifsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifsu *ImageFolderSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ifsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ifsu *ImageFolderSourceUpdate) Exec(ctx context.Context) error {
	_, err := ifsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifsu *ImageFolderSourceUpdate) ExecX(ctx context.Context) {
	if err := ifsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ifsu *ImageFolderSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(imagefoldersource.Table, imagefoldersource.Columns, sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt))
	if ps := ifsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifsu.mutation.DeletedAt(); ok {
		_spec.SetField(imagefoldersource.FieldDeletedAt, field.TypeTime, value)
	}
	if ifsu.mutation.DeletedAtCleared() {
		_spec.ClearField(imagefoldersource.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ifsu.mutation.Name(); ok {
		_spec.SetField(imagefoldersource.FieldName, field.TypeString, value)
	}
	if value, ok := ifsu.mutation.BaseURL(); ok {
		_spec.SetField(imagefoldersource.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := ifsu.mutation.AccessKey(); ok {
		_spec.SetField(imagefoldersource.FieldAccessKey, field.TypeString, value)
	}
	if ifsu.mutation.AccessKeyCleared() {
		_spec.ClearField(imagefoldersource.FieldAccessKey, field.TypeString)
	}
	if value, ok := ifsu.mutation.SecretKey(); ok {
		_spec.SetField(imagefoldersource.FieldSecretKey, field.TypeString, value)
	}
	if ifsu.mutation.SecretKeyCleared() {
		_spec.ClearField(imagefoldersource.FieldSecretKey, field.TypeString)
	}
	if ifsu.mutation.ImageFolderPathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefoldersource.ImageFolderPathTable,
			Columns: []string{imagefoldersource.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifsu.mutation.RemovedImageFolderPathIDs(); len(nodes) > 0 && !ifsu.mutation.ImageFolderPathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefoldersource.ImageFolderPathTable,
			Columns: []string{imagefoldersource.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifsu.mutation.ImageFolderPathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefoldersource.ImageFolderPathTable,
			Columns: []string{imagefoldersource.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ifsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagefoldersource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ifsu.mutation.done = true
	return n, nil
}

// ImageFolderSourceUpdateOne is the builder for updating a single ImageFolderSource entity.
type ImageFolderSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageFolderSourceMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ifsuo *ImageFolderSourceUpdateOne) SetDeletedAt(t time.Time) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.SetDeletedAt(t)
	return ifsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ifsuo *ImageFolderSourceUpdateOne) SetNillableDeletedAt(t *time.Time) *ImageFolderSourceUpdateOne {
	if t != nil {
		ifsuo.SetDeletedAt(*t)
	}
	return ifsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ifsuo *ImageFolderSourceUpdateOne) ClearDeletedAt() *ImageFolderSourceUpdateOne {
	ifsuo.mutation.ClearDeletedAt()
	return ifsuo
}

// SetName sets the "name" field.
func (ifsuo *ImageFolderSourceUpdateOne) SetName(s string) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.SetName(s)
	return ifsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ifsuo *ImageFolderSourceUpdateOne) SetNillableName(s *string) *ImageFolderSourceUpdateOne {
	if s != nil {
		ifsuo.SetName(*s)
	}
	return ifsuo
}

// SetBaseURL sets the "base_url" field.
func (ifsuo *ImageFolderSourceUpdateOne) SetBaseURL(s string) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.SetBaseURL(s)
	return ifsuo
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (ifsuo *ImageFolderSourceUpdateOne) SetNillableBaseURL(s *string) *ImageFolderSourceUpdateOne {
	if s != nil {
		ifsuo.SetBaseURL(*s)
	}
	return ifsuo
}

// SetAccessKey sets the "access_key" field.
func (ifsuo *ImageFolderSourceUpdateOne) SetAccessKey(s string) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.SetAccessKey(s)
	return ifsuo
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (ifsuo *ImageFolderSourceUpdateOne) SetNillableAccessKey(s *string) *ImageFolderSourceUpdateOne {
	if s != nil {
		ifsuo.SetAccessKey(*s)
	}
	return ifsuo
}

// ClearAccessKey clears the value of the "access_key" field.
func (ifsuo *ImageFolderSourceUpdateOne) ClearAccessKey() *ImageFolderSourceUpdateOne {
	ifsuo.mutation.ClearAccessKey()
	return ifsuo
}

// SetSecretKey sets the "secret_key" field.
func (ifsuo *ImageFolderSourceUpdateOne) SetSecretKey(s string) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.SetSecretKey(s)
	return ifsuo
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (ifsuo *ImageFolderSourceUpdateOne) SetNillableSecretKey(s *string) *ImageFolderSourceUpdateOne {
	if s != nil {
		ifsuo.SetSecretKey(*s)
	}
	return ifsuo
}

// ClearSecretKey clears the value of the "secret_key" field.
func (ifsuo *ImageFolderSourceUpdateOne) ClearSecretKey() *ImageFolderSourceUpdateOne {
	ifsuo.mutation.ClearSecretKey()
	return ifsuo
}

// AddImageFolderPathIDs adds the "image_folder_path" edge to the ImageFolderPath entity by IDs.
func (ifsuo *ImageFolderSourceUpdateOne) AddImageFolderPathIDs(ids ...int) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.AddImageFolderPathIDs(ids...)
	return ifsuo
}

// AddImageFolderPath adds the "image_folder_path" edges to the ImageFolderPath entity.
func (ifsuo *ImageFolderSourceUpdateOne) AddImageFolderPath(i ...*ImageFolderPath) *ImageFolderSourceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifsuo.AddImageFolderPathIDs(ids...)
}

// Mutation returns the ImageFolderSourceMutation object of the builder.
func (ifsuo *ImageFolderSourceUpdateOne) Mutation() *ImageFolderSourceMutation {
	return ifsuo.mutation
}

// ClearImageFolderPath clears all "image_folder_path" edges to the ImageFolderPath entity.
func (ifsuo *ImageFolderSourceUpdateOne) ClearImageFolderPath() *ImageFolderSourceUpdateOne {
	ifsuo.mutation.ClearImageFolderPath()
	return ifsuo
}

// RemoveImageFolderPathIDs removes the "image_folder_path" edge to ImageFolderPath entities by IDs.
func (ifsuo *ImageFolderSourceUpdateOne) RemoveImageFolderPathIDs(ids ...int) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.RemoveImageFolderPathIDs(ids...)
	return ifsuo
}

// RemoveImageFolderPath removes "image_folder_path" edges to ImageFolderPath entities.
func (ifsuo *ImageFolderSourceUpdateOne) RemoveImageFolderPath(i ...*ImageFolderPath) *ImageFolderSourceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifsuo.RemoveImageFolderPathIDs(ids...)
}

// Where appends a list predicates to the ImageFolderSourceUpdate builder.
func (ifsuo *ImageFolderSourceUpdateOne) Where(ps ...predicate.ImageFolderSource) *ImageFolderSourceUpdateOne {
	ifsuo.mutation.Where(ps...)
	return ifsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ifsuo *ImageFolderSourceUpdateOne) Select(field string, fields ...string) *ImageFolderSourceUpdateOne {
	ifsuo.fields = append([]string{field}, fields...)
	return ifsuo
}

// Save executes the query and returns the updated ImageFolderSource entity.
func (ifsuo *ImageFolderSourceUpdateOne) Save(ctx context.Context) (*ImageFolderSource, error) {
	return withHooks(ctx, ifsuo.sqlSave, ifsuo.mutation, ifsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ifsuo *ImageFolderSourceUpdateOne) SaveX(ctx context.Context) *ImageFolderSource {
	node, err := ifsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ifsuo *ImageFolderSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ifsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifsuo *ImageFolderSourceUpdateOne) ExecX(ctx context.Context) {
	if err := ifsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ifsuo *ImageFolderSourceUpdateOne) sqlSave(ctx context.Context) (_node *ImageFolderSource, err error) {
	_spec := sqlgraph.NewUpdateSpec(imagefoldersource.Table, imagefoldersource.Columns, sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt))
	id, ok := ifsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageFolderSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ifsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagefoldersource.FieldID)
		for _, f := range fields {
			if !imagefoldersource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imagefoldersource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ifsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ifsuo.mutation.DeletedAt(); ok {
		_spec.SetField(imagefoldersource.FieldDeletedAt, field.TypeTime, value)
	}
	if ifsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(imagefoldersource.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ifsuo.mutation.Name(); ok {
		_spec.SetField(imagefoldersource.FieldName, field.TypeString, value)
	}
	if value, ok := ifsuo.mutation.BaseURL(); ok {
		_spec.SetField(imagefoldersource.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := ifsuo.mutation.AccessKey(); ok {
		_spec.SetField(imagefoldersource.FieldAccessKey, field.TypeString, value)
	}
	if ifsuo.mutation.AccessKeyCleared() {
		_spec.ClearField(imagefoldersource.FieldAccessKey, field.TypeString)
	}
	if value, ok := ifsuo.mutation.SecretKey(); ok {
		_spec.SetField(imagefoldersource.FieldSecretKey, field.TypeString, value)
	}
	if ifsuo.mutation.SecretKeyCleared() {
		_spec.ClearField(imagefoldersource.FieldSecretKey, field.TypeString)
	}
	if ifsuo.mutation.ImageFolderPathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefoldersource.ImageFolderPathTable,
			Columns: []string{imagefoldersource.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifsuo.mutation.RemovedImageFolderPathIDs(); len(nodes) > 0 && !ifsuo.mutation.ImageFolderPathCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefoldersource.ImageFolderPathTable,
			Columns: []string{imagefoldersource.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ifsuo.mutation.ImageFolderPathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefoldersource.ImageFolderPathTable,
			Columns: []string{imagefoldersource.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageFolderSource{config: ifsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ifsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagefoldersource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ifsuo.mutation.done = true
	return _node, nil
}
