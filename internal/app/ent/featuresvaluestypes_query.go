// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"products-service/internal/app/ent/featuresvalues"
	"products-service/internal/app/ent/featuresvaluestypes"
	"products-service/internal/app/ent/predicate"
	"products-service/internal/app/ent/productinfo"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeaturesValuesTypesQuery is the builder for querying FeaturesValuesTypes entities.
type FeaturesValuesTypesQuery struct {
	config
	ctx               *QueryContext
	order             []featuresvaluestypes.OrderOption
	inters            []Interceptor
	predicates        []predicate.FeaturesValuesTypes
	withProductInfo   *ProductInfoQuery
	withFeatureValues *FeaturesValuesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeaturesValuesTypesQuery builder.
func (fvtq *FeaturesValuesTypesQuery) Where(ps ...predicate.FeaturesValuesTypes) *FeaturesValuesTypesQuery {
	fvtq.predicates = append(fvtq.predicates, ps...)
	return fvtq
}

// Limit the number of records to be returned by this query.
func (fvtq *FeaturesValuesTypesQuery) Limit(limit int) *FeaturesValuesTypesQuery {
	fvtq.ctx.Limit = &limit
	return fvtq
}

// Offset to start from.
func (fvtq *FeaturesValuesTypesQuery) Offset(offset int) *FeaturesValuesTypesQuery {
	fvtq.ctx.Offset = &offset
	return fvtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fvtq *FeaturesValuesTypesQuery) Unique(unique bool) *FeaturesValuesTypesQuery {
	fvtq.ctx.Unique = &unique
	return fvtq
}

// Order specifies how the records should be ordered.
func (fvtq *FeaturesValuesTypesQuery) Order(o ...featuresvaluestypes.OrderOption) *FeaturesValuesTypesQuery {
	fvtq.order = append(fvtq.order, o...)
	return fvtq
}

// QueryProductInfo chains the current query on the "product_info" edge.
func (fvtq *FeaturesValuesTypesQuery) QueryProductInfo() *ProductInfoQuery {
	query := (&ProductInfoClient{config: fvtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(featuresvaluestypes.Table, featuresvaluestypes.FieldID, selector),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, featuresvaluestypes.ProductInfoTable, featuresvaluestypes.ProductInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(fvtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeatureValues chains the current query on the "feature_values" edge.
func (fvtq *FeaturesValuesTypesQuery) QueryFeatureValues() *FeaturesValuesQuery {
	query := (&FeaturesValuesClient{config: fvtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(featuresvaluestypes.Table, featuresvaluestypes.FieldID, selector),
			sqlgraph.To(featuresvalues.Table, featuresvalues.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, featuresvaluestypes.FeatureValuesTable, featuresvaluestypes.FeatureValuesColumn),
		)
		fromU = sqlgraph.SetNeighbors(fvtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FeaturesValuesTypes entity from the query.
// Returns a *NotFoundError when no FeaturesValuesTypes was found.
func (fvtq *FeaturesValuesTypesQuery) First(ctx context.Context) (*FeaturesValuesTypes, error) {
	nodes, err := fvtq.Limit(1).All(setContextOp(ctx, fvtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{featuresvaluestypes.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) FirstX(ctx context.Context) *FeaturesValuesTypes {
	node, err := fvtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FeaturesValuesTypes ID from the query.
// Returns a *NotFoundError when no FeaturesValuesTypes ID was found.
func (fvtq *FeaturesValuesTypesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fvtq.Limit(1).IDs(setContextOp(ctx, fvtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{featuresvaluestypes.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) FirstIDX(ctx context.Context) int {
	id, err := fvtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FeaturesValuesTypes entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FeaturesValuesTypes entity is found.
// Returns a *NotFoundError when no FeaturesValuesTypes entities are found.
func (fvtq *FeaturesValuesTypesQuery) Only(ctx context.Context) (*FeaturesValuesTypes, error) {
	nodes, err := fvtq.Limit(2).All(setContextOp(ctx, fvtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{featuresvaluestypes.Label}
	default:
		return nil, &NotSingularError{featuresvaluestypes.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) OnlyX(ctx context.Context) *FeaturesValuesTypes {
	node, err := fvtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FeaturesValuesTypes ID in the query.
// Returns a *NotSingularError when more than one FeaturesValuesTypes ID is found.
// Returns a *NotFoundError when no entities are found.
func (fvtq *FeaturesValuesTypesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fvtq.Limit(2).IDs(setContextOp(ctx, fvtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{featuresvaluestypes.Label}
	default:
		err = &NotSingularError{featuresvaluestypes.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) OnlyIDX(ctx context.Context) int {
	id, err := fvtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FeaturesValuesTypesSlice.
func (fvtq *FeaturesValuesTypesQuery) All(ctx context.Context) ([]*FeaturesValuesTypes, error) {
	ctx = setContextOp(ctx, fvtq.ctx, ent.OpQueryAll)
	if err := fvtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FeaturesValuesTypes, *FeaturesValuesTypesQuery]()
	return withInterceptors[[]*FeaturesValuesTypes](ctx, fvtq, qr, fvtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) AllX(ctx context.Context) []*FeaturesValuesTypes {
	nodes, err := fvtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FeaturesValuesTypes IDs.
func (fvtq *FeaturesValuesTypesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fvtq.ctx.Unique == nil && fvtq.path != nil {
		fvtq.Unique(true)
	}
	ctx = setContextOp(ctx, fvtq.ctx, ent.OpQueryIDs)
	if err = fvtq.Select(featuresvaluestypes.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) IDsX(ctx context.Context) []int {
	ids, err := fvtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fvtq *FeaturesValuesTypesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fvtq.ctx, ent.OpQueryCount)
	if err := fvtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fvtq, querierCount[*FeaturesValuesTypesQuery](), fvtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) CountX(ctx context.Context) int {
	count, err := fvtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fvtq *FeaturesValuesTypesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fvtq.ctx, ent.OpQueryExist)
	switch _, err := fvtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fvtq *FeaturesValuesTypesQuery) ExistX(ctx context.Context) bool {
	exist, err := fvtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeaturesValuesTypesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fvtq *FeaturesValuesTypesQuery) Clone() *FeaturesValuesTypesQuery {
	if fvtq == nil {
		return nil
	}
	return &FeaturesValuesTypesQuery{
		config:            fvtq.config,
		ctx:               fvtq.ctx.Clone(),
		order:             append([]featuresvaluestypes.OrderOption{}, fvtq.order...),
		inters:            append([]Interceptor{}, fvtq.inters...),
		predicates:        append([]predicate.FeaturesValuesTypes{}, fvtq.predicates...),
		withProductInfo:   fvtq.withProductInfo.Clone(),
		withFeatureValues: fvtq.withFeatureValues.Clone(),
		// clone intermediate query.
		sql:  fvtq.sql.Clone(),
		path: fvtq.path,
	}
}

// WithProductInfo tells the query-builder to eager-load the nodes that are connected to
// the "product_info" edge. The optional arguments are used to configure the query builder of the edge.
func (fvtq *FeaturesValuesTypesQuery) WithProductInfo(opts ...func(*ProductInfoQuery)) *FeaturesValuesTypesQuery {
	query := (&ProductInfoClient{config: fvtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvtq.withProductInfo = query
	return fvtq
}

// WithFeatureValues tells the query-builder to eager-load the nodes that are connected to
// the "feature_values" edge. The optional arguments are used to configure the query builder of the edge.
func (fvtq *FeaturesValuesTypesQuery) WithFeatureValues(opts ...func(*FeaturesValuesQuery)) *FeaturesValuesTypesQuery {
	query := (&FeaturesValuesClient{config: fvtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvtq.withFeatureValues = query
	return fvtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FeaturesValuesTypes.Query().
//		GroupBy(featuresvaluestypes.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fvtq *FeaturesValuesTypesQuery) GroupBy(field string, fields ...string) *FeaturesValuesTypesGroupBy {
	fvtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeaturesValuesTypesGroupBy{build: fvtq}
	grbuild.flds = &fvtq.ctx.Fields
	grbuild.label = featuresvaluestypes.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.FeaturesValuesTypes.Query().
//		Select(featuresvaluestypes.FieldCreatedAt).
//		Scan(ctx, &v)
func (fvtq *FeaturesValuesTypesQuery) Select(fields ...string) *FeaturesValuesTypesSelect {
	fvtq.ctx.Fields = append(fvtq.ctx.Fields, fields...)
	sbuild := &FeaturesValuesTypesSelect{FeaturesValuesTypesQuery: fvtq}
	sbuild.label = featuresvaluestypes.Label
	sbuild.flds, sbuild.scan = &fvtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeaturesValuesTypesSelect configured with the given aggregations.
func (fvtq *FeaturesValuesTypesQuery) Aggregate(fns ...AggregateFunc) *FeaturesValuesTypesSelect {
	return fvtq.Select().Aggregate(fns...)
}

func (fvtq *FeaturesValuesTypesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fvtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fvtq); err != nil {
				return err
			}
		}
	}
	for _, f := range fvtq.ctx.Fields {
		if !featuresvaluestypes.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fvtq.path != nil {
		prev, err := fvtq.path(ctx)
		if err != nil {
			return err
		}
		fvtq.sql = prev
	}
	return nil
}

func (fvtq *FeaturesValuesTypesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FeaturesValuesTypes, error) {
	var (
		nodes       = []*FeaturesValuesTypes{}
		_spec       = fvtq.querySpec()
		loadedTypes = [2]bool{
			fvtq.withProductInfo != nil,
			fvtq.withFeatureValues != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FeaturesValuesTypes).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FeaturesValuesTypes{config: fvtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fvtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fvtq.withProductInfo; query != nil {
		if err := fvtq.loadProductInfo(ctx, query, nodes,
			func(n *FeaturesValuesTypes) { n.Edges.ProductInfo = []*ProductInfo{} },
			func(n *FeaturesValuesTypes, e *ProductInfo) { n.Edges.ProductInfo = append(n.Edges.ProductInfo, e) }); err != nil {
			return nil, err
		}
	}
	if query := fvtq.withFeatureValues; query != nil {
		if err := fvtq.loadFeatureValues(ctx, query, nodes,
			func(n *FeaturesValuesTypes) { n.Edges.FeatureValues = []*FeaturesValues{} },
			func(n *FeaturesValuesTypes, e *FeaturesValues) {
				n.Edges.FeatureValues = append(n.Edges.FeatureValues, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fvtq *FeaturesValuesTypesQuery) loadProductInfo(ctx context.Context, query *ProductInfoQuery, nodes []*FeaturesValuesTypes, init func(*FeaturesValuesTypes), assign func(*FeaturesValuesTypes, *ProductInfo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*FeaturesValuesTypes)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ProductInfo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(featuresvaluestypes.ProductInfoColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.features_values_types_product_info
		if fk == nil {
			return fmt.Errorf(`foreign-key "features_values_types_product_info" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "features_values_types_product_info" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (fvtq *FeaturesValuesTypesQuery) loadFeatureValues(ctx context.Context, query *FeaturesValuesQuery, nodes []*FeaturesValuesTypes, init func(*FeaturesValuesTypes), assign func(*FeaturesValuesTypes, *FeaturesValues)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*FeaturesValuesTypes)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(featuresvalues.FieldFeatureValuesTypesID)
	}
	query.Where(predicate.FeaturesValues(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(featuresvaluestypes.FeatureValuesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FeatureValuesTypesID
		if fk == nil {
			return fmt.Errorf(`foreign-key "feature_values_types_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "feature_values_types_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fvtq *FeaturesValuesTypesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fvtq.querySpec()
	_spec.Node.Columns = fvtq.ctx.Fields
	if len(fvtq.ctx.Fields) > 0 {
		_spec.Unique = fvtq.ctx.Unique != nil && *fvtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fvtq.driver, _spec)
}

func (fvtq *FeaturesValuesTypesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(featuresvaluestypes.Table, featuresvaluestypes.Columns, sqlgraph.NewFieldSpec(featuresvaluestypes.FieldID, field.TypeInt))
	_spec.From = fvtq.sql
	if unique := fvtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fvtq.path != nil {
		_spec.Unique = true
	}
	if fields := fvtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featuresvaluestypes.FieldID)
		for i := range fields {
			if fields[i] != featuresvaluestypes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fvtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fvtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fvtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fvtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fvtq *FeaturesValuesTypesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fvtq.driver.Dialect())
	t1 := builder.Table(featuresvaluestypes.Table)
	columns := fvtq.ctx.Fields
	if len(columns) == 0 {
		columns = featuresvaluestypes.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fvtq.sql != nil {
		selector = fvtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fvtq.ctx.Unique != nil && *fvtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fvtq.predicates {
		p(selector)
	}
	for _, p := range fvtq.order {
		p(selector)
	}
	if offset := fvtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fvtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FeaturesValuesTypesGroupBy is the group-by builder for FeaturesValuesTypes entities.
type FeaturesValuesTypesGroupBy struct {
	selector
	build *FeaturesValuesTypesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fvtgb *FeaturesValuesTypesGroupBy) Aggregate(fns ...AggregateFunc) *FeaturesValuesTypesGroupBy {
	fvtgb.fns = append(fvtgb.fns, fns...)
	return fvtgb
}

// Scan applies the selector query and scans the result into the given value.
func (fvtgb *FeaturesValuesTypesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fvtgb.build.ctx, ent.OpQueryGroupBy)
	if err := fvtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeaturesValuesTypesQuery, *FeaturesValuesTypesGroupBy](ctx, fvtgb.build, fvtgb, fvtgb.build.inters, v)
}

func (fvtgb *FeaturesValuesTypesGroupBy) sqlScan(ctx context.Context, root *FeaturesValuesTypesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fvtgb.fns))
	for _, fn := range fvtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fvtgb.flds)+len(fvtgb.fns))
		for _, f := range *fvtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fvtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fvtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeaturesValuesTypesSelect is the builder for selecting fields of FeaturesValuesTypes entities.
type FeaturesValuesTypesSelect struct {
	*FeaturesValuesTypesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fvts *FeaturesValuesTypesSelect) Aggregate(fns ...AggregateFunc) *FeaturesValuesTypesSelect {
	fvts.fns = append(fvts.fns, fns...)
	return fvts
}

// Scan applies the selector query and scans the result into the given value.
func (fvts *FeaturesValuesTypesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fvts.ctx, ent.OpQuerySelect)
	if err := fvts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeaturesValuesTypesQuery, *FeaturesValuesTypesSelect](ctx, fvts.FeaturesValuesTypesQuery, fvts, fvts.inters, v)
}

func (fvts *FeaturesValuesTypesSelect) sqlScan(ctx context.Context, root *FeaturesValuesTypesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fvts.fns))
	for _, fn := range fvts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fvts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fvts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
