// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/pricetype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PriceType is the model entity for the PriceType schema.
type PriceType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PriceTypeQuery when eager-loading is set.
	Edges        PriceTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PriceTypeEdges holds the relations/edges for other nodes in the graph.
type PriceTypeEdges struct {
	// ProductPrices holds the value of the product_prices edge.
	ProductPrices []*ProductPrices `json:"product_prices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductPricesOrErr returns the ProductPrices value or an error if the edge
// was not loaded in eager-loading.
func (e PriceTypeEdges) ProductPricesOrErr() ([]*ProductPrices, error) {
	if e.loadedTypes[0] {
		return e.ProductPrices, nil
	}
	return nil, &NotLoadedError{edge: "product_prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PriceType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pricetype.FieldID, pricetype.FieldCreatedBy, pricetype.FieldUpdatedBy, pricetype.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case pricetype.FieldName:
			values[i] = new(sql.NullString)
		case pricetype.FieldCreatedAt, pricetype.FieldUpdatedAt, pricetype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PriceType fields.
func (pt *PriceType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pricetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case pricetype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case pricetype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		case pricetype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pt.DeletedAt = new(time.Time)
				*pt.DeletedAt = value.Time
			}
		case pricetype.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				pt.CreatedBy = int(value.Int64)
			}
		case pricetype.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				pt.UpdatedBy = int(value.Int64)
			}
		case pricetype.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pt.DeletedBy = new(int)
				*pt.DeletedBy = int(value.Int64)
			}
		case pricetype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = new(string)
				*pt.Name = value.String
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PriceType.
// This includes values selected through modifiers, order, etc.
func (pt *PriceType) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryProductPrices queries the "product_prices" edge of the PriceType entity.
func (pt *PriceType) QueryProductPrices() *ProductPricesQuery {
	return NewPriceTypeClient(pt.config).QueryProductPrices(pt)
}

// Update returns a builder for updating this PriceType.
// Note that you need to call PriceType.Unwrap() before calling this method if this PriceType
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PriceType) Update() *PriceTypeUpdateOne {
	return NewPriceTypeClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PriceType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PriceType) Unwrap() *PriceType {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PriceType is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PriceType) String() string {
	var builder strings.Builder
	builder.WriteString("PriceType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pt.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", pt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", pt.UpdatedBy))
	builder.WriteString(", ")
	if v := pt.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pt.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// PriceTypes is a parsable slice of PriceType.
type PriceTypes []*PriceType
