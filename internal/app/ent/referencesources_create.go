// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/productreferences"
	"products-service/internal/app/ent/referencesources"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReferenceSourcesCreate is the builder for creating a ReferenceSources entity.
type ReferenceSourcesCreate struct {
	config
	mutation *ReferenceSourcesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rsc *ReferenceSourcesCreate) SetCreatedAt(t time.Time) *ReferenceSourcesCreate {
	rsc.mutation.SetCreatedAt(t)
	return rsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsc *ReferenceSourcesCreate) SetNillableCreatedAt(t *time.Time) *ReferenceSourcesCreate {
	if t != nil {
		rsc.SetCreatedAt(*t)
	}
	return rsc
}

// SetUpdatedAt sets the "updated_at" field.
func (rsc *ReferenceSourcesCreate) SetUpdatedAt(t time.Time) *ReferenceSourcesCreate {
	rsc.mutation.SetUpdatedAt(t)
	return rsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rsc *ReferenceSourcesCreate) SetNillableUpdatedAt(t *time.Time) *ReferenceSourcesCreate {
	if t != nil {
		rsc.SetUpdatedAt(*t)
	}
	return rsc
}

// SetDeletedAt sets the "deleted_at" field.
func (rsc *ReferenceSourcesCreate) SetDeletedAt(t time.Time) *ReferenceSourcesCreate {
	rsc.mutation.SetDeletedAt(t)
	return rsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rsc *ReferenceSourcesCreate) SetNillableDeletedAt(t *time.Time) *ReferenceSourcesCreate {
	if t != nil {
		rsc.SetDeletedAt(*t)
	}
	return rsc
}

// SetCreatedBy sets the "created_by" field.
func (rsc *ReferenceSourcesCreate) SetCreatedBy(i int) *ReferenceSourcesCreate {
	rsc.mutation.SetCreatedBy(i)
	return rsc
}

// SetUpdatedBy sets the "updated_by" field.
func (rsc *ReferenceSourcesCreate) SetUpdatedBy(i int) *ReferenceSourcesCreate {
	rsc.mutation.SetUpdatedBy(i)
	return rsc
}

// SetDeletedBy sets the "deleted_by" field.
func (rsc *ReferenceSourcesCreate) SetDeletedBy(i int) *ReferenceSourcesCreate {
	rsc.mutation.SetDeletedBy(i)
	return rsc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rsc *ReferenceSourcesCreate) SetNillableDeletedBy(i *int) *ReferenceSourcesCreate {
	if i != nil {
		rsc.SetDeletedBy(*i)
	}
	return rsc
}

// SetName sets the "name" field.
func (rsc *ReferenceSourcesCreate) SetName(s string) *ReferenceSourcesCreate {
	rsc.mutation.SetName(s)
	return rsc
}

// AddProductReferenceIDs adds the "product_references" edge to the ProductReferences entity by IDs.
func (rsc *ReferenceSourcesCreate) AddProductReferenceIDs(ids ...int) *ReferenceSourcesCreate {
	rsc.mutation.AddProductReferenceIDs(ids...)
	return rsc
}

// AddProductReferences adds the "product_references" edges to the ProductReferences entity.
func (rsc *ReferenceSourcesCreate) AddProductReferences(p ...*ProductReferences) *ReferenceSourcesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsc.AddProductReferenceIDs(ids...)
}

// Mutation returns the ReferenceSourcesMutation object of the builder.
func (rsc *ReferenceSourcesCreate) Mutation() *ReferenceSourcesMutation {
	return rsc.mutation
}

// Save creates the ReferenceSources in the database.
func (rsc *ReferenceSourcesCreate) Save(ctx context.Context) (*ReferenceSources, error) {
	rsc.defaults()
	return withHooks(ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *ReferenceSourcesCreate) SaveX(ctx context.Context) *ReferenceSources {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *ReferenceSourcesCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *ReferenceSourcesCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *ReferenceSourcesCreate) defaults() {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		v := referencesources.DefaultCreatedAt()
		rsc.mutation.SetCreatedAt(v)
	}
	if _, ok := rsc.mutation.UpdatedAt(); !ok {
		v := referencesources.DefaultUpdatedAt()
		rsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *ReferenceSourcesCreate) check() error {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ReferenceSources.created_at"`)}
	}
	if _, ok := rsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ReferenceSources.updated_at"`)}
	}
	if _, ok := rsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ReferenceSources.created_by"`)}
	}
	if v, ok := rsc.mutation.CreatedBy(); ok {
		if err := referencesources.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ReferenceSources.created_by": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "ReferenceSources.updated_by"`)}
	}
	if v, ok := rsc.mutation.UpdatedBy(); ok {
		if err := referencesources.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ReferenceSources.updated_by": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ReferenceSources.name"`)}
	}
	return nil
}

func (rsc *ReferenceSourcesCreate) sqlSave(ctx context.Context) (*ReferenceSources, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *ReferenceSourcesCreate) createSpec() (*ReferenceSources, *sqlgraph.CreateSpec) {
	var (
		_node = &ReferenceSources{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(referencesources.Table, sqlgraph.NewFieldSpec(referencesources.FieldID, field.TypeInt))
	)
	if value, ok := rsc.mutation.CreatedAt(); ok {
		_spec.SetField(referencesources.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rsc.mutation.UpdatedAt(); ok {
		_spec.SetField(referencesources.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rsc.mutation.DeletedAt(); ok {
		_spec.SetField(referencesources.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rsc.mutation.CreatedBy(); ok {
		_spec.SetField(referencesources.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := rsc.mutation.UpdatedBy(); ok {
		_spec.SetField(referencesources.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := rsc.mutation.DeletedBy(); ok {
		_spec.SetField(referencesources.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if value, ok := rsc.mutation.Name(); ok {
		_spec.SetField(referencesources.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if nodes := rsc.mutation.ProductReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   referencesources.ProductReferencesTable,
			Columns: []string{referencesources.ProductReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productreferences.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReferenceSourcesCreateBulk is the builder for creating many ReferenceSources entities in bulk.
type ReferenceSourcesCreateBulk struct {
	config
	err      error
	builders []*ReferenceSourcesCreate
}

// Save creates the ReferenceSources entities in the database.
func (rscb *ReferenceSourcesCreateBulk) Save(ctx context.Context) ([]*ReferenceSources, error) {
	if rscb.err != nil {
		return nil, rscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*ReferenceSources, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReferenceSourcesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *ReferenceSourcesCreateBulk) SaveX(ctx context.Context) []*ReferenceSources {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *ReferenceSourcesCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *ReferenceSourcesCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}
