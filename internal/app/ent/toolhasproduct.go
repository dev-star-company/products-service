// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"products-service/internal/app/ent/products"
	"products-service/internal/app/ent/toolhasproduct"
	"products-service/internal/app/ent/tools"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ToolHasProduct is the model entity for the ToolHasProduct schema.
type ToolHasProduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// ProductsID holds the value of the "products_id" field.
	ProductsID *int `json:"products_id,omitempty"`
	// ToolsID holds the value of the "tools_id" field.
	ToolsID *int `json:"tools_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ToolHasProductQuery when eager-loading is set.
	Edges        ToolHasProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ToolHasProductEdges holds the relations/edges for other nodes in the graph.
type ToolHasProductEdges struct {
	// Products holds the value of the products edge.
	Products *Products `json:"products,omitempty"`
	// Tools holds the value of the tools edge.
	Tools *Tools `json:"tools,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ToolHasProductEdges) ProductsOrErr() (*Products, error) {
	if e.Products != nil {
		return e.Products, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: products.Label}
	}
	return nil, &NotLoadedError{edge: "products"}
}

// ToolsOrErr returns the Tools value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ToolHasProductEdges) ToolsOrErr() (*Tools, error) {
	if e.Tools != nil {
		return e.Tools, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tools.Label}
	}
	return nil, &NotLoadedError{edge: "tools"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ToolHasProduct) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case toolhasproduct.FieldID, toolhasproduct.FieldProductsID, toolhasproduct.FieldToolsID:
			values[i] = new(sql.NullInt64)
		case toolhasproduct.FieldCreatedAt, toolhasproduct.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ToolHasProduct fields.
func (thp *ToolHasProduct) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case toolhasproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			thp.ID = int(value.Int64)
		case toolhasproduct.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				thp.CreatedAt = value.Time
			}
		case toolhasproduct.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				thp.DeletedAt = new(time.Time)
				*thp.DeletedAt = value.Time
			}
		case toolhasproduct.FieldProductsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field products_id", values[i])
			} else if value.Valid {
				thp.ProductsID = new(int)
				*thp.ProductsID = int(value.Int64)
			}
		case toolhasproduct.FieldToolsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tools_id", values[i])
			} else if value.Valid {
				thp.ToolsID = new(int)
				*thp.ToolsID = int(value.Int64)
			}
		default:
			thp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ToolHasProduct.
// This includes values selected through modifiers, order, etc.
func (thp *ToolHasProduct) Value(name string) (ent.Value, error) {
	return thp.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the ToolHasProduct entity.
func (thp *ToolHasProduct) QueryProducts() *ProductsQuery {
	return NewToolHasProductClient(thp.config).QueryProducts(thp)
}

// QueryTools queries the "tools" edge of the ToolHasProduct entity.
func (thp *ToolHasProduct) QueryTools() *ToolsQuery {
	return NewToolHasProductClient(thp.config).QueryTools(thp)
}

// Update returns a builder for updating this ToolHasProduct.
// Note that you need to call ToolHasProduct.Unwrap() before calling this method if this ToolHasProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (thp *ToolHasProduct) Update() *ToolHasProductUpdateOne {
	return NewToolHasProductClient(thp.config).UpdateOne(thp)
}

// Unwrap unwraps the ToolHasProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (thp *ToolHasProduct) Unwrap() *ToolHasProduct {
	_tx, ok := thp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ToolHasProduct is not a transactional entity")
	}
	thp.config.driver = _tx.drv
	return thp
}

// String implements the fmt.Stringer.
func (thp *ToolHasProduct) String() string {
	var builder strings.Builder
	builder.WriteString("ToolHasProduct(")
	builder.WriteString(fmt.Sprintf("id=%v, ", thp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(thp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := thp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := thp.ProductsID; v != nil {
		builder.WriteString("products_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := thp.ToolsID; v != nil {
		builder.WriteString("tools_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ToolHasProducts is a parsable slice of ToolHasProduct.
type ToolHasProducts []*ToolHasProduct
