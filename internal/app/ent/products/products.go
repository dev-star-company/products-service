// Code generated by ent, DO NOT EDIT.

package products

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the products type in the database.
	Label = "products"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldVariantTypeID holds the string denoting the variant_type_id field in the database.
	FieldVariantTypeID = "variant_type_id"
	// FieldProductReferencesID holds the string denoting the product_references_id field in the database.
	FieldProductReferencesID = "product_references_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeVariantType holds the string denoting the variant_type edge name in mutations.
	EdgeVariantType = "variant_type"
	// EdgeProductReferences holds the string denoting the product_references edge name in mutations.
	EdgeProductReferences = "product_references"
	// EdgeProductHasImage holds the string denoting the product_has_image edge name in mutations.
	EdgeProductHasImage = "product_has_image"
	// EdgePromotionHasProduct holds the string denoting the promotion_has_product edge name in mutations.
	EdgePromotionHasProduct = "promotion_has_product"
	// EdgeToolHasProduct holds the string denoting the tool_has_product edge name in mutations.
	EdgeToolHasProduct = "tool_has_product"
	// EdgeProductHasFeature holds the string denoting the product_has_feature edge name in mutations.
	EdgeProductHasFeature = "product_has_feature"
	// EdgeProductHasInfo holds the string denoting the product_has_info edge name in mutations.
	EdgeProductHasInfo = "product_has_info"
	// EdgeProductHasProductReference holds the string denoting the product_has_product_reference edge name in mutations.
	EdgeProductHasProductReference = "product_has_product_reference"
	// EdgeProductPrices holds the string denoting the product_prices edge name in mutations.
	EdgeProductPrices = "product_prices"
	// Table holds the table name of the products in the database.
	Table = "products"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "products"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_id"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "products"
	// BrandInverseTable is the table name for the Brand entity.
	// It exists in this package in order to avoid circular dependency with the "brand" package.
	BrandInverseTable = "brands"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// VariantTypeTable is the table that holds the variant_type relation/edge.
	VariantTypeTable = "products"
	// VariantTypeInverseTable is the table name for the VariantType entity.
	// It exists in this package in order to avoid circular dependency with the "varianttype" package.
	VariantTypeInverseTable = "variant_types"
	// VariantTypeColumn is the table column denoting the variant_type relation/edge.
	VariantTypeColumn = "variant_type_id"
	// ProductReferencesTable is the table that holds the product_references relation/edge.
	ProductReferencesTable = "products"
	// ProductReferencesInverseTable is the table name for the ProductReferences entity.
	// It exists in this package in order to avoid circular dependency with the "productreferences" package.
	ProductReferencesInverseTable = "product_references"
	// ProductReferencesColumn is the table column denoting the product_references relation/edge.
	ProductReferencesColumn = "product_references_id"
	// ProductHasImageTable is the table that holds the product_has_image relation/edge.
	ProductHasImageTable = "product_has_images"
	// ProductHasImageInverseTable is the table name for the ProductHasImage entity.
	// It exists in this package in order to avoid circular dependency with the "producthasimage" package.
	ProductHasImageInverseTable = "product_has_images"
	// ProductHasImageColumn is the table column denoting the product_has_image relation/edge.
	ProductHasImageColumn = "product_id"
	// PromotionHasProductTable is the table that holds the promotion_has_product relation/edge.
	PromotionHasProductTable = "promotion_has_products"
	// PromotionHasProductInverseTable is the table name for the PromotionHasProduct entity.
	// It exists in this package in order to avoid circular dependency with the "promotionhasproduct" package.
	PromotionHasProductInverseTable = "promotion_has_products"
	// PromotionHasProductColumn is the table column denoting the promotion_has_product relation/edge.
	PromotionHasProductColumn = "products_id"
	// ToolHasProductTable is the table that holds the tool_has_product relation/edge.
	ToolHasProductTable = "tool_has_products"
	// ToolHasProductInverseTable is the table name for the ToolHasProduct entity.
	// It exists in this package in order to avoid circular dependency with the "toolhasproduct" package.
	ToolHasProductInverseTable = "tool_has_products"
	// ToolHasProductColumn is the table column denoting the tool_has_product relation/edge.
	ToolHasProductColumn = "products_id"
	// ProductHasFeatureTable is the table that holds the product_has_feature relation/edge.
	ProductHasFeatureTable = "product_has_features"
	// ProductHasFeatureInverseTable is the table name for the ProductHasFeature entity.
	// It exists in this package in order to avoid circular dependency with the "producthasfeature" package.
	ProductHasFeatureInverseTable = "product_has_features"
	// ProductHasFeatureColumn is the table column denoting the product_has_feature relation/edge.
	ProductHasFeatureColumn = "product_id"
	// ProductHasInfoTable is the table that holds the product_has_info relation/edge.
	ProductHasInfoTable = "product_has_infos"
	// ProductHasInfoInverseTable is the table name for the ProductHasInfo entity.
	// It exists in this package in order to avoid circular dependency with the "producthasinfo" package.
	ProductHasInfoInverseTable = "product_has_infos"
	// ProductHasInfoColumn is the table column denoting the product_has_info relation/edge.
	ProductHasInfoColumn = "product_id"
	// ProductHasProductReferenceTable is the table that holds the product_has_product_reference relation/edge.
	ProductHasProductReferenceTable = "product_has_product_references"
	// ProductHasProductReferenceInverseTable is the table name for the ProductHasProductReference entity.
	// It exists in this package in order to avoid circular dependency with the "producthasproductreference" package.
	ProductHasProductReferenceInverseTable = "product_has_product_references"
	// ProductHasProductReferenceColumn is the table column denoting the product_has_product_reference relation/edge.
	ProductHasProductReferenceColumn = "product_id"
	// ProductPricesTable is the table that holds the product_prices relation/edge.
	ProductPricesTable = "product_prices"
	// ProductPricesInverseTable is the table name for the ProductPrices entity.
	// It exists in this package in order to avoid circular dependency with the "productprices" package.
	ProductPricesInverseTable = "product_prices"
	// ProductPricesColumn is the table column denoting the product_prices relation/edge.
	ProductPricesColumn = "product_id"
)

// Columns holds all SQL columns for products fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldCategoryID,
	FieldBrandID,
	FieldVariantTypeID,
	FieldProductReferencesID,
	FieldName,
	FieldStock,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_products",
	"user_created_products",
	"user_updated_products",
	"user_deleted_products",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Products queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByBrandID orders the results by the brand_id field.
func ByBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandID, opts...).ToFunc()
}

// ByVariantTypeID orders the results by the variant_type_id field.
func ByVariantTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariantTypeID, opts...).ToFunc()
}

// ByProductReferencesID orders the results by the product_references_id field.
func ByProductReferencesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductReferencesID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByBrandField orders the results by brand field.
func ByBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByVariantTypeField orders the results by variant_type field.
func ByVariantTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVariantTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductReferencesField orders the results by product_references field.
func ByProductReferencesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductReferencesStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductHasImageCount orders the results by product_has_image count.
func ByProductHasImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductHasImageStep(), opts...)
	}
}

// ByProductHasImage orders the results by product_has_image terms.
func ByProductHasImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductHasImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPromotionHasProductCount orders the results by promotion_has_product count.
func ByPromotionHasProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPromotionHasProductStep(), opts...)
	}
}

// ByPromotionHasProduct orders the results by promotion_has_product terms.
func ByPromotionHasProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromotionHasProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByToolHasProductCount orders the results by tool_has_product count.
func ByToolHasProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newToolHasProductStep(), opts...)
	}
}

// ByToolHasProduct orders the results by tool_has_product terms.
func ByToolHasProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToolHasProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductHasFeatureCount orders the results by product_has_feature count.
func ByProductHasFeatureCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductHasFeatureStep(), opts...)
	}
}

// ByProductHasFeature orders the results by product_has_feature terms.
func ByProductHasFeature(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductHasFeatureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductHasInfoCount orders the results by product_has_info count.
func ByProductHasInfoCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductHasInfoStep(), opts...)
	}
}

// ByProductHasInfo orders the results by product_has_info terms.
func ByProductHasInfo(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductHasInfoStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductHasProductReferenceCount orders the results by product_has_product_reference count.
func ByProductHasProductReferenceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductHasProductReferenceStep(), opts...)
	}
}

// ByProductHasProductReference orders the results by product_has_product_reference terms.
func ByProductHasProductReference(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductHasProductReferenceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductPricesCount orders the results by product_prices count.
func ByProductPricesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductPricesStep(), opts...)
	}
}

// ByProductPrices orders the results by product_prices terms.
func ByProductPrices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductPricesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
func newBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BrandTable, BrandColumn),
	)
}
func newVariantTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VariantTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VariantTypeTable, VariantTypeColumn),
	)
}
func newProductReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductReferencesTable, ProductReferencesColumn),
	)
}
func newProductHasImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductHasImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductHasImageTable, ProductHasImageColumn),
	)
}
func newPromotionHasProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromotionHasProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PromotionHasProductTable, PromotionHasProductColumn),
	)
}
func newToolHasProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToolHasProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ToolHasProductTable, ToolHasProductColumn),
	)
}
func newProductHasFeatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductHasFeatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductHasFeatureTable, ProductHasFeatureColumn),
	)
}
func newProductHasInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductHasInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductHasInfoTable, ProductHasInfoColumn),
	)
}
func newProductHasProductReferenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductHasProductReferenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductHasProductReferenceTable, ProductHasProductReferenceColumn),
	)
}
func newProductPricesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductPricesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductPricesTable, ProductPricesColumn),
	)
}
