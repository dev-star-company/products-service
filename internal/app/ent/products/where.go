// Code generated by ent, DO NOT EDIT.

package products

import (
	"products-service/internal/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldDeletedBy, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldCategoryID, v))
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldBrandID, v))
}

// VariantTypeID applies equality check predicate on the "variant_type_id" field. It's identical to VariantTypeIDEQ.
func VariantTypeID(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldVariantTypeID, v))
}

// ProductReferencesID applies equality check predicate on the "product_references_id" field. It's identical to ProductReferencesIDEQ.
func ProductReferencesID(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldProductReferencesID, v))
}

// ImageID applies equality check predicate on the "image_id" field. It's identical to ImageIDEQ.
func ImageID(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldImageID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldName, v))
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldStock, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Products {
	return predicate.Products(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Products {
	return predicate.Products(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldUpdatedBy, v))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Products {
	return predicate.Products(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Products {
	return predicate.Products(sql.FieldNotNull(FieldDeletedBy))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.Products {
	return predicate.Products(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.Products {
	return predicate.Products(sql.FieldNotNull(FieldCategoryID))
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldBrandID, v))
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldBrandID, v))
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldBrandID, vs...))
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldBrandID, vs...))
}

// BrandIDGT applies the GT predicate on the "brand_id" field.
func BrandIDGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldBrandID, v))
}

// BrandIDGTE applies the GTE predicate on the "brand_id" field.
func BrandIDGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldBrandID, v))
}

// BrandIDLT applies the LT predicate on the "brand_id" field.
func BrandIDLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldBrandID, v))
}

// BrandIDLTE applies the LTE predicate on the "brand_id" field.
func BrandIDLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldBrandID, v))
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.Products {
	return predicate.Products(sql.FieldIsNull(FieldBrandID))
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.Products {
	return predicate.Products(sql.FieldNotNull(FieldBrandID))
}

// VariantTypeIDEQ applies the EQ predicate on the "variant_type_id" field.
func VariantTypeIDEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldVariantTypeID, v))
}

// VariantTypeIDNEQ applies the NEQ predicate on the "variant_type_id" field.
func VariantTypeIDNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldVariantTypeID, v))
}

// VariantTypeIDIn applies the In predicate on the "variant_type_id" field.
func VariantTypeIDIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldVariantTypeID, vs...))
}

// VariantTypeIDNotIn applies the NotIn predicate on the "variant_type_id" field.
func VariantTypeIDNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldVariantTypeID, vs...))
}

// VariantTypeIDGT applies the GT predicate on the "variant_type_id" field.
func VariantTypeIDGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldVariantTypeID, v))
}

// VariantTypeIDGTE applies the GTE predicate on the "variant_type_id" field.
func VariantTypeIDGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldVariantTypeID, v))
}

// VariantTypeIDLT applies the LT predicate on the "variant_type_id" field.
func VariantTypeIDLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldVariantTypeID, v))
}

// VariantTypeIDLTE applies the LTE predicate on the "variant_type_id" field.
func VariantTypeIDLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldVariantTypeID, v))
}

// VariantTypeIDIsNil applies the IsNil predicate on the "variant_type_id" field.
func VariantTypeIDIsNil() predicate.Products {
	return predicate.Products(sql.FieldIsNull(FieldVariantTypeID))
}

// VariantTypeIDNotNil applies the NotNil predicate on the "variant_type_id" field.
func VariantTypeIDNotNil() predicate.Products {
	return predicate.Products(sql.FieldNotNull(FieldVariantTypeID))
}

// ProductReferencesIDEQ applies the EQ predicate on the "product_references_id" field.
func ProductReferencesIDEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldProductReferencesID, v))
}

// ProductReferencesIDNEQ applies the NEQ predicate on the "product_references_id" field.
func ProductReferencesIDNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldProductReferencesID, v))
}

// ProductReferencesIDIn applies the In predicate on the "product_references_id" field.
func ProductReferencesIDIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldProductReferencesID, vs...))
}

// ProductReferencesIDNotIn applies the NotIn predicate on the "product_references_id" field.
func ProductReferencesIDNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldProductReferencesID, vs...))
}

// ProductReferencesIDGT applies the GT predicate on the "product_references_id" field.
func ProductReferencesIDGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldProductReferencesID, v))
}

// ProductReferencesIDGTE applies the GTE predicate on the "product_references_id" field.
func ProductReferencesIDGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldProductReferencesID, v))
}

// ProductReferencesIDLT applies the LT predicate on the "product_references_id" field.
func ProductReferencesIDLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldProductReferencesID, v))
}

// ProductReferencesIDLTE applies the LTE predicate on the "product_references_id" field.
func ProductReferencesIDLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldProductReferencesID, v))
}

// ProductReferencesIDIsNil applies the IsNil predicate on the "product_references_id" field.
func ProductReferencesIDIsNil() predicate.Products {
	return predicate.Products(sql.FieldIsNull(FieldProductReferencesID))
}

// ProductReferencesIDNotNil applies the NotNil predicate on the "product_references_id" field.
func ProductReferencesIDNotNil() predicate.Products {
	return predicate.Products(sql.FieldNotNull(FieldProductReferencesID))
}

// ImageIDEQ applies the EQ predicate on the "image_id" field.
func ImageIDEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldImageID, v))
}

// ImageIDNEQ applies the NEQ predicate on the "image_id" field.
func ImageIDNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldImageID, v))
}

// ImageIDIn applies the In predicate on the "image_id" field.
func ImageIDIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldImageID, vs...))
}

// ImageIDNotIn applies the NotIn predicate on the "image_id" field.
func ImageIDNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldImageID, vs...))
}

// ImageIDGT applies the GT predicate on the "image_id" field.
func ImageIDGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldImageID, v))
}

// ImageIDGTE applies the GTE predicate on the "image_id" field.
func ImageIDGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldImageID, v))
}

// ImageIDLT applies the LT predicate on the "image_id" field.
func ImageIDLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldImageID, v))
}

// ImageIDLTE applies the LTE predicate on the "image_id" field.
func ImageIDLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldImageID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Products {
	return predicate.Products(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Products {
	return predicate.Products(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Products {
	return predicate.Products(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Products {
	return predicate.Products(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Products {
	return predicate.Products(sql.FieldContainsFold(FieldName, v))
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldEQ(FieldStock, v))
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v int) predicate.Products {
	return predicate.Products(sql.FieldNEQ(FieldStock, v))
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldIn(FieldStock, vs...))
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...int) predicate.Products {
	return predicate.Products(sql.FieldNotIn(FieldStock, vs...))
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v int) predicate.Products {
	return predicate.Products(sql.FieldGT(FieldStock, v))
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v int) predicate.Products {
	return predicate.Products(sql.FieldGTE(FieldStock, v))
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v int) predicate.Products {
	return predicate.Products(sql.FieldLT(FieldStock, v))
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v int) predicate.Products {
	return predicate.Products(sql.FieldLTE(FieldStock, v))
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.Brand) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVariantType applies the HasEdge predicate on the "variant_type" edge.
func HasVariantType() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VariantTypeTable, VariantTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVariantTypeWith applies the HasEdge predicate on the "variant_type" edge with a given conditions (other predicates).
func HasVariantTypeWith(preds ...predicate.VariantType) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newVariantTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductReferences applies the HasEdge predicate on the "product_references" edge.
func HasProductReferences() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductReferencesTable, ProductReferencesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductReferencesWith applies the HasEdge predicate on the "product_references" edge with a given conditions (other predicates).
func HasProductReferencesWith(preds ...predicate.ProductReferences) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newProductReferencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ImagesTable, ImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.Images) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductHasImage applies the HasEdge predicate on the "product_has_image" edge.
func HasProductHasImage() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductHasImageTable, ProductHasImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductHasImageWith applies the HasEdge predicate on the "product_has_image" edge with a given conditions (other predicates).
func HasProductHasImageWith(preds ...predicate.ProductHasImage) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newProductHasImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPromotionHasProduct applies the HasEdge predicate on the "promotion_has_product" edge.
func HasPromotionHasProduct() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PromotionHasProductTable, PromotionHasProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromotionHasProductWith applies the HasEdge predicate on the "promotion_has_product" edge with a given conditions (other predicates).
func HasPromotionHasProductWith(preds ...predicate.PromotionHasProduct) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newPromotionHasProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToolHasProduct applies the HasEdge predicate on the "tool_has_product" edge.
func HasToolHasProduct() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ToolHasProductTable, ToolHasProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToolHasProductWith applies the HasEdge predicate on the "tool_has_product" edge with a given conditions (other predicates).
func HasToolHasProductWith(preds ...predicate.ToolHasProduct) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newToolHasProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductHasFeature applies the HasEdge predicate on the "product_has_feature" edge.
func HasProductHasFeature() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductHasFeatureTable, ProductHasFeatureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductHasFeatureWith applies the HasEdge predicate on the "product_has_feature" edge with a given conditions (other predicates).
func HasProductHasFeatureWith(preds ...predicate.ProductHasFeature) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newProductHasFeatureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductHasInfo applies the HasEdge predicate on the "product_has_info" edge.
func HasProductHasInfo() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductHasInfoTable, ProductHasInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductHasInfoWith applies the HasEdge predicate on the "product_has_info" edge with a given conditions (other predicates).
func HasProductHasInfoWith(preds ...predicate.ProductHasInfo) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newProductHasInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductHasProductReference applies the HasEdge predicate on the "product_has_product_reference" edge.
func HasProductHasProductReference() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductHasProductReferenceTable, ProductHasProductReferenceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductHasProductReferenceWith applies the HasEdge predicate on the "product_has_product_reference" edge with a given conditions (other predicates).
func HasProductHasProductReferenceWith(preds ...predicate.ProductHasProductReference) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newProductHasProductReferenceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductPrices applies the HasEdge predicate on the "product_prices" edge.
func HasProductPrices() predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductPricesTable, ProductPricesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductPricesWith applies the HasEdge predicate on the "product_prices" edge with a given conditions (other predicates).
func HasProductPricesWith(preds ...predicate.ProductPrices) predicate.Products {
	return predicate.Products(func(s *sql.Selector) {
		step := newProductPricesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Products) predicate.Products {
	return predicate.Products(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Products) predicate.Products {
	return predicate.Products(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Products) predicate.Products {
	return predicate.Products(sql.NotPredicates(p))
}
