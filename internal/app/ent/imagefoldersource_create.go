// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/imagefoldersource"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderSourceCreate is the builder for creating a ImageFolderSource entity.
type ImageFolderSourceCreate struct {
	config
	mutation *ImageFolderSourceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ifsc *ImageFolderSourceCreate) SetCreatedAt(t time.Time) *ImageFolderSourceCreate {
	ifsc.mutation.SetCreatedAt(t)
	return ifsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ifsc *ImageFolderSourceCreate) SetNillableCreatedAt(t *time.Time) *ImageFolderSourceCreate {
	if t != nil {
		ifsc.SetCreatedAt(*t)
	}
	return ifsc
}

// SetDeletedAt sets the "deleted_at" field.
func (ifsc *ImageFolderSourceCreate) SetDeletedAt(t time.Time) *ImageFolderSourceCreate {
	ifsc.mutation.SetDeletedAt(t)
	return ifsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ifsc *ImageFolderSourceCreate) SetNillableDeletedAt(t *time.Time) *ImageFolderSourceCreate {
	if t != nil {
		ifsc.SetDeletedAt(*t)
	}
	return ifsc
}

// SetName sets the "name" field.
func (ifsc *ImageFolderSourceCreate) SetName(s string) *ImageFolderSourceCreate {
	ifsc.mutation.SetName(s)
	return ifsc
}

// SetBaseURL sets the "base_url" field.
func (ifsc *ImageFolderSourceCreate) SetBaseURL(s string) *ImageFolderSourceCreate {
	ifsc.mutation.SetBaseURL(s)
	return ifsc
}

// SetAccessKey sets the "access_key" field.
func (ifsc *ImageFolderSourceCreate) SetAccessKey(s string) *ImageFolderSourceCreate {
	ifsc.mutation.SetAccessKey(s)
	return ifsc
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (ifsc *ImageFolderSourceCreate) SetNillableAccessKey(s *string) *ImageFolderSourceCreate {
	if s != nil {
		ifsc.SetAccessKey(*s)
	}
	return ifsc
}

// SetSecretKey sets the "secret_key" field.
func (ifsc *ImageFolderSourceCreate) SetSecretKey(s string) *ImageFolderSourceCreate {
	ifsc.mutation.SetSecretKey(s)
	return ifsc
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (ifsc *ImageFolderSourceCreate) SetNillableSecretKey(s *string) *ImageFolderSourceCreate {
	if s != nil {
		ifsc.SetSecretKey(*s)
	}
	return ifsc
}

// AddImageFolderPathIDs adds the "image_folder_path" edge to the ImageFolderPath entity by IDs.
func (ifsc *ImageFolderSourceCreate) AddImageFolderPathIDs(ids ...int) *ImageFolderSourceCreate {
	ifsc.mutation.AddImageFolderPathIDs(ids...)
	return ifsc
}

// AddImageFolderPath adds the "image_folder_path" edges to the ImageFolderPath entity.
func (ifsc *ImageFolderSourceCreate) AddImageFolderPath(i ...*ImageFolderPath) *ImageFolderSourceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifsc.AddImageFolderPathIDs(ids...)
}

// Mutation returns the ImageFolderSourceMutation object of the builder.
func (ifsc *ImageFolderSourceCreate) Mutation() *ImageFolderSourceMutation {
	return ifsc.mutation
}

// Save creates the ImageFolderSource in the database.
func (ifsc *ImageFolderSourceCreate) Save(ctx context.Context) (*ImageFolderSource, error) {
	ifsc.defaults()
	return withHooks(ctx, ifsc.sqlSave, ifsc.mutation, ifsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ifsc *ImageFolderSourceCreate) SaveX(ctx context.Context) *ImageFolderSource {
	v, err := ifsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifsc *ImageFolderSourceCreate) Exec(ctx context.Context) error {
	_, err := ifsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifsc *ImageFolderSourceCreate) ExecX(ctx context.Context) {
	if err := ifsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ifsc *ImageFolderSourceCreate) defaults() {
	if _, ok := ifsc.mutation.CreatedAt(); !ok {
		v := imagefoldersource.DefaultCreatedAt()
		ifsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifsc *ImageFolderSourceCreate) check() error {
	if _, ok := ifsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImageFolderSource.created_at"`)}
	}
	if _, ok := ifsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ImageFolderSource.name"`)}
	}
	if _, ok := ifsc.mutation.BaseURL(); !ok {
		return &ValidationError{Name: "base_url", err: errors.New(`ent: missing required field "ImageFolderSource.base_url"`)}
	}
	return nil
}

func (ifsc *ImageFolderSourceCreate) sqlSave(ctx context.Context) (*ImageFolderSource, error) {
	if err := ifsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ifsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ifsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ifsc.mutation.id = &_node.ID
	ifsc.mutation.done = true
	return _node, nil
}

func (ifsc *ImageFolderSourceCreate) createSpec() (*ImageFolderSource, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageFolderSource{config: ifsc.config}
		_spec = sqlgraph.NewCreateSpec(imagefoldersource.Table, sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt))
	)
	if value, ok := ifsc.mutation.CreatedAt(); ok {
		_spec.SetField(imagefoldersource.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ifsc.mutation.DeletedAt(); ok {
		_spec.SetField(imagefoldersource.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ifsc.mutation.Name(); ok {
		_spec.SetField(imagefoldersource.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := ifsc.mutation.BaseURL(); ok {
		_spec.SetField(imagefoldersource.FieldBaseURL, field.TypeString, value)
		_node.BaseURL = &value
	}
	if value, ok := ifsc.mutation.AccessKey(); ok {
		_spec.SetField(imagefoldersource.FieldAccessKey, field.TypeString, value)
		_node.AccessKey = &value
	}
	if value, ok := ifsc.mutation.SecretKey(); ok {
		_spec.SetField(imagefoldersource.FieldSecretKey, field.TypeString, value)
		_node.SecretKey = &value
	}
	if nodes := ifsc.mutation.ImageFolderPathIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefoldersource.ImageFolderPathTable,
			Columns: []string{imagefoldersource.ImageFolderPathColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageFolderSourceCreateBulk is the builder for creating many ImageFolderSource entities in bulk.
type ImageFolderSourceCreateBulk struct {
	config
	err      error
	builders []*ImageFolderSourceCreate
}

// Save creates the ImageFolderSource entities in the database.
func (ifscb *ImageFolderSourceCreateBulk) Save(ctx context.Context) ([]*ImageFolderSource, error) {
	if ifscb.err != nil {
		return nil, ifscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ifscb.builders))
	nodes := make([]*ImageFolderSource, len(ifscb.builders))
	mutators := make([]Mutator, len(ifscb.builders))
	for i := range ifscb.builders {
		func(i int, root context.Context) {
			builder := ifscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageFolderSourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ifscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ifscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ifscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ifscb *ImageFolderSourceCreateBulk) SaveX(ctx context.Context) []*ImageFolderSource {
	v, err := ifscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifscb *ImageFolderSourceCreateBulk) Exec(ctx context.Context) error {
	_, err := ifscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifscb *ImageFolderSourceCreateBulk) ExecX(ctx context.Context) {
	if err := ifscb.Exec(ctx); err != nil {
		panic(err)
	}
}
