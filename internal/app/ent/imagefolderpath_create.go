// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"products-service/internal/app/ent/imagefolderpath"
	"products-service/internal/app/ent/imagefoldersource"
	"products-service/internal/app/ent/images"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageFolderPathCreate is the builder for creating a ImageFolderPath entity.
type ImageFolderPathCreate struct {
	config
	mutation *ImageFolderPathMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ifpc *ImageFolderPathCreate) SetCreatedAt(t time.Time) *ImageFolderPathCreate {
	ifpc.mutation.SetCreatedAt(t)
	return ifpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ifpc *ImageFolderPathCreate) SetNillableCreatedAt(t *time.Time) *ImageFolderPathCreate {
	if t != nil {
		ifpc.SetCreatedAt(*t)
	}
	return ifpc
}

// SetUpdatedAt sets the "updated_at" field.
func (ifpc *ImageFolderPathCreate) SetUpdatedAt(t time.Time) *ImageFolderPathCreate {
	ifpc.mutation.SetUpdatedAt(t)
	return ifpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ifpc *ImageFolderPathCreate) SetNillableUpdatedAt(t *time.Time) *ImageFolderPathCreate {
	if t != nil {
		ifpc.SetUpdatedAt(*t)
	}
	return ifpc
}

// SetDeletedAt sets the "deleted_at" field.
func (ifpc *ImageFolderPathCreate) SetDeletedAt(t time.Time) *ImageFolderPathCreate {
	ifpc.mutation.SetDeletedAt(t)
	return ifpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ifpc *ImageFolderPathCreate) SetNillableDeletedAt(t *time.Time) *ImageFolderPathCreate {
	if t != nil {
		ifpc.SetDeletedAt(*t)
	}
	return ifpc
}

// SetCreatedBy sets the "created_by" field.
func (ifpc *ImageFolderPathCreate) SetCreatedBy(i int) *ImageFolderPathCreate {
	ifpc.mutation.SetCreatedBy(i)
	return ifpc
}

// SetUpdatedBy sets the "updated_by" field.
func (ifpc *ImageFolderPathCreate) SetUpdatedBy(i int) *ImageFolderPathCreate {
	ifpc.mutation.SetUpdatedBy(i)
	return ifpc
}

// SetDeletedBy sets the "deleted_by" field.
func (ifpc *ImageFolderPathCreate) SetDeletedBy(i int) *ImageFolderPathCreate {
	ifpc.mutation.SetDeletedBy(i)
	return ifpc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ifpc *ImageFolderPathCreate) SetNillableDeletedBy(i *int) *ImageFolderPathCreate {
	if i != nil {
		ifpc.SetDeletedBy(*i)
	}
	return ifpc
}

// SetImageFolderSourceID sets the "image_folder_source_id" field.
func (ifpc *ImageFolderPathCreate) SetImageFolderSourceID(i int) *ImageFolderPathCreate {
	ifpc.mutation.SetImageFolderSourceID(i)
	return ifpc
}

// SetImageFolderSource sets the "image_folder_source" edge to the ImageFolderSource entity.
func (ifpc *ImageFolderPathCreate) SetImageFolderSource(i *ImageFolderSource) *ImageFolderPathCreate {
	return ifpc.SetImageFolderSourceID(i.ID)
}

// AddImageIDs adds the "images" edge to the Images entity by IDs.
func (ifpc *ImageFolderPathCreate) AddImageIDs(ids ...int) *ImageFolderPathCreate {
	ifpc.mutation.AddImageIDs(ids...)
	return ifpc
}

// AddImages adds the "images" edges to the Images entity.
func (ifpc *ImageFolderPathCreate) AddImages(i ...*Images) *ImageFolderPathCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ifpc.AddImageIDs(ids...)
}

// Mutation returns the ImageFolderPathMutation object of the builder.
func (ifpc *ImageFolderPathCreate) Mutation() *ImageFolderPathMutation {
	return ifpc.mutation
}

// Save creates the ImageFolderPath in the database.
func (ifpc *ImageFolderPathCreate) Save(ctx context.Context) (*ImageFolderPath, error) {
	ifpc.defaults()
	return withHooks(ctx, ifpc.sqlSave, ifpc.mutation, ifpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ifpc *ImageFolderPathCreate) SaveX(ctx context.Context) *ImageFolderPath {
	v, err := ifpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifpc *ImageFolderPathCreate) Exec(ctx context.Context) error {
	_, err := ifpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifpc *ImageFolderPathCreate) ExecX(ctx context.Context) {
	if err := ifpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ifpc *ImageFolderPathCreate) defaults() {
	if _, ok := ifpc.mutation.CreatedAt(); !ok {
		v := imagefolderpath.DefaultCreatedAt()
		ifpc.mutation.SetCreatedAt(v)
	}
	if _, ok := ifpc.mutation.UpdatedAt(); !ok {
		v := imagefolderpath.DefaultUpdatedAt()
		ifpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ifpc *ImageFolderPathCreate) check() error {
	if _, ok := ifpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImageFolderPath.created_at"`)}
	}
	if _, ok := ifpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ImageFolderPath.updated_at"`)}
	}
	if _, ok := ifpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "ImageFolderPath.created_by"`)}
	}
	if v, ok := ifpc.mutation.CreatedBy(); ok {
		if err := imagefolderpath.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "ImageFolderPath.created_by": %w`, err)}
		}
	}
	if _, ok := ifpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "ImageFolderPath.updated_by"`)}
	}
	if v, ok := ifpc.mutation.UpdatedBy(); ok {
		if err := imagefolderpath.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ImageFolderPath.updated_by": %w`, err)}
		}
	}
	if _, ok := ifpc.mutation.ImageFolderSourceID(); !ok {
		return &ValidationError{Name: "image_folder_source_id", err: errors.New(`ent: missing required field "ImageFolderPath.image_folder_source_id"`)}
	}
	if len(ifpc.mutation.ImageFolderSourceIDs()) == 0 {
		return &ValidationError{Name: "image_folder_source", err: errors.New(`ent: missing required edge "ImageFolderPath.image_folder_source"`)}
	}
	return nil
}

func (ifpc *ImageFolderPathCreate) sqlSave(ctx context.Context) (*ImageFolderPath, error) {
	if err := ifpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ifpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ifpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ifpc.mutation.id = &_node.ID
	ifpc.mutation.done = true
	return _node, nil
}

func (ifpc *ImageFolderPathCreate) createSpec() (*ImageFolderPath, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageFolderPath{config: ifpc.config}
		_spec = sqlgraph.NewCreateSpec(imagefolderpath.Table, sqlgraph.NewFieldSpec(imagefolderpath.FieldID, field.TypeInt))
	)
	if value, ok := ifpc.mutation.CreatedAt(); ok {
		_spec.SetField(imagefolderpath.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ifpc.mutation.UpdatedAt(); ok {
		_spec.SetField(imagefolderpath.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ifpc.mutation.DeletedAt(); ok {
		_spec.SetField(imagefolderpath.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ifpc.mutation.CreatedBy(); ok {
		_spec.SetField(imagefolderpath.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := ifpc.mutation.UpdatedBy(); ok {
		_spec.SetField(imagefolderpath.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := ifpc.mutation.DeletedBy(); ok {
		_spec.SetField(imagefolderpath.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if nodes := ifpc.mutation.ImageFolderSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagefolderpath.ImageFolderSourceTable,
			Columns: []string{imagefolderpath.ImageFolderSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagefoldersource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ImageFolderSourceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ifpc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   imagefolderpath.ImagesTable,
			Columns: []string{imagefolderpath.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(images.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageFolderPathCreateBulk is the builder for creating many ImageFolderPath entities in bulk.
type ImageFolderPathCreateBulk struct {
	config
	err      error
	builders []*ImageFolderPathCreate
}

// Save creates the ImageFolderPath entities in the database.
func (ifpcb *ImageFolderPathCreateBulk) Save(ctx context.Context) ([]*ImageFolderPath, error) {
	if ifpcb.err != nil {
		return nil, ifpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ifpcb.builders))
	nodes := make([]*ImageFolderPath, len(ifpcb.builders))
	mutators := make([]Mutator, len(ifpcb.builders))
	for i := range ifpcb.builders {
		func(i int, root context.Context) {
			builder := ifpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageFolderPathMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ifpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ifpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ifpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ifpcb *ImageFolderPathCreateBulk) SaveX(ctx context.Context) []*ImageFolderPath {
	v, err := ifpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ifpcb *ImageFolderPathCreateBulk) Exec(ctx context.Context) error {
	_, err := ifpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ifpcb *ImageFolderPathCreateBulk) ExecX(ctx context.Context) {
	if err := ifpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
